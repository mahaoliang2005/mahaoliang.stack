[{"content":"Python 虚拟环境概述 为什么需要虚拟环境 在 Python 开发中，不同的项目往往需要不同版本的 Python 解释器和第三方库。如果所有项目都共享同一套全局 Python 环境，很容易导致版本冲突和依赖混乱。虚拟环境通过创建隔离的 Python 运行环境，解决了这一问题，确保每个项目都能独立管理自己的依赖关系。\n虚拟环境的核心优势包括：\n环境隔离：不同项目的依赖相互隔离，避免版本冲突 系统保护：保持系统全局 Python 环境干净整洁，防止不必要的包污染 项目可移植性：通过requirements.txt文件记录依赖，方便在不同环境中重建相同的运行环境 版本控制：可以为每个项目指定特定的 Python 版本和库版本 venv 目录结构 venv 是 Python 3.3 及以上版本内置的虚拟环境创建工具，它的工作原理是通过创建一个独立的目录结构，其中包含 Python 解释器的符号链接和独立的site-packages目录。当你使用python -m venv myenv命令创建虚拟环境时，会生成以下关键文件和目录：\n1 2 3 4 5 6 7 8 myenv/ ├── bin/ │ ├── python -\u0026gt; # 指向系统Python解释器的符号链接 │ └── pip ├── lib/ │ └── python3.13/ │ └── site-packages/ # 第三方包安装目录 └── pyvenv.cfg # 环境配置文件 venv 基础操作指南 创建虚拟环境 要创建一个新的虚拟环境，使用以下命令：\n1 2 3 4 5 # macOS/Linux python -m venv myenv # Windows python -m venv myenv 其中，myenv是虚拟环境的名称，你可以根据需要修改。执行上述命令后，会在当前目录下创建一个名为myenv的文件夹，其中包含虚拟环境的所有文件和目录。\n激活虚拟环境 创建虚拟环境后，需要激活它才能使用：\n1 2 3 4 5 6 7 8 # macOS/Linux source myenv/bin/activate # Windows (命令提示符) myenv\\Scripts\\activate.bat # Windows (PowerShell) myenv\\Scripts\\Activate.ps1 激活成功后，你会注意到命令提示符前出现了虚拟环境的名称，例如：\n1 (myenv) $ 这表示你现在正在myenv虚拟环境中工作。\n激活虚拟环境的本质，实际上是执行了一个脚本，该脚本会：\n设置VIRTUAL_ENV环境变量指向虚拟环境的根目录 修改系统 PATH 环境变量，将虚拟环境的bin或Scripts目录添加到最前面 确保后续执行的python和pip命令都指向虚拟环境中的版本 停用虚拟环境 当你完成工作后，可以通过以下命令退出虚拟环境：\n1 $ deactivate 退出后，你将返回到系统的全局 Python 环境，虚拟环境的相关设置将不再生效。\n验证虚拟环境 在激活虚拟环境后，你可以通过以下方式验证环境是否正确设置：\n检查 Python 版本： 1 $ python --version 这将显示虚拟环境中使用的 Python 版本。\n检查 Python 解释器路径： 1 2 3 4 5 # macOS/Linux which python # Windows where python 输出应该是虚拟环境中 Python 解释器的路径，例如/path/to/your/project/myenv/bin/python（macOS/Linux）或C:\\path\\to\\your\\project\\myenv\\Scripts\\python.exe（Windows）。\n检查 pip 版本： 1 pip --version 这将显示虚拟环境中使用的 pip 版本。\n检查环境变量： 1 2 3 4 5 # macOS/Linux echo $VIRTUAL_ENV # Windows echo %VIRTUAL_ENV% 输出应该是虚拟环境的根目录路径。\n依赖管理与包操作 安装包 在激活的虚拟环境中，你可以使用pip命令安装项目所需的 Python 包。安装包的基本语法如下：\n1 pip install package_name 例如，要安装requests库，可以执行以下命令：\n1 pip install requests 如果需要安装特定版本的包，可以使用以下语法：\n1 pip install package_name==version_number 例如，要安装requests库的 2.26.0 版本：\n1 pip install requests==2.26.0 当你在虚拟环境中安装包时，这些包会被安装到虚拟环境的site-packages目录中。具体路径如下：\n1 2 3 4 5 # macOS/Linux myenv/lib/python3.x/site-packages/ # Windows myenv/Lib/site-packages/ 这个目录是虚拟环境隔离的关键，确保包不会被安装到系统全局环境中。\n更新包 当需要更新虚拟环境中的包时，可以使用以下命令：\n1 pip install --upgrade package_name 例如，要更新requests库到最新版本：\n1 pip install --upgrade requests 卸载包 当某个包不再需要时，可以使用以下命令卸载：\n1 pip uninstall package_name 例如，要卸载requests库：\n1 pip uninstall requests 卸载时，pip 会提示你确认是否卸载该包，输入y确认即可。\n管理依赖列表 对于较大的项目，管理所有依赖和它们的版本可能会变得复杂。pip允许你使用requirements.txt文件来跟踪这些依赖。\n生成依赖列表： 1 pip freeze \u0026gt; requirements.txt 这将在当前目录下创建一个requirements.txt文件，其中包含所有已安装包及其版本号\n安装依赖列表： 1 pip install -r requirements.txt 这将安装requirements.txt文件中列出的所有包及其指定版本。\n更新依赖列表： 当你安装或更新包后，需要重新生成requirements.txt文件：\n1 pip freeze \u0026gt; requirements.txt requirements.txt文件的格式通常如下：\n1 2 3 4 5 certifi==2025.7.14 charset-normalizer==3.4.2 idna==3.10 requests==2.32.4 urllib3==2.5.0 VS Code 集成 VS Code 对 Python 虚拟环境提供了良好的支持，以下是在 VS Code 中使用 venv 的步骤：\n安装 Python 扩展： 打开 VS Code，按下Ctrl+Shift+X（Windows/Linux）或Cmd+Shift+X（macOS）打开扩展市场，搜索并安装 \u0026ldquo;Python\u0026rdquo; 扩展。\n打开项目目录： 使用File \u0026gt; Open Folder打开包含虚拟环境的项目目录。\n创建新终端： 当你创建新终端时，VS Code 会自动激活当前选择的虚拟环境，命令提示符前会显示环境名称。\n总结 在本文中，我们详细介绍了 Python 虚拟环境（venv）的使用方法和工作原理。\n基本使用流程 创建虚拟环境 python -m venv myenv\n激活虚拟环境：source myenv/bin/activate（macOS/Linux）或myenv\\Scripts\\activate.bat（Windows）\n安装依赖：pip install package\n生成依赖列表：pip freeze \u0026gt; requirements.txt\n停用虚拟环境：deactivate\n最佳实践建议 项目结构 在项目根目录下创建名为.venv的虚拟环境 这样可以保持项目结构的清晰，并方便激活虚拟环境 依赖管理 使用requirements.txt文件记录项目依赖 在提交代码时，包含requirements.txt文件，而不是整个虚拟环境目录 使用pip freeze \u0026gt; requirements.txt生成依赖列表 环境激活 在开发过程中，始终激活虚拟环境后再执行 Python 命令或安装包 版本控制 将虚拟环境目录添加到.gitignore文件中 提交requirements.txt文件，确保其他开发者可以复现相同的环境 虚拟环境是 Python 开发中不可或缺的工具，它帮助开发者保持环境的整洁和项目的可维护性。随着你的项目规模和复杂性的增加，熟练掌握虚拟环境的使用将成为一项重要的技能。\n","date":"2025-07-14T16:21:43+08:00","permalink":"https://mahaoliang.tech/p/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86venv-%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/","title":"Python 虚拟环境管理：venv 实用指南"},{"content":"作为 Python 初学者，使用 pyenv 来管理多版本 Python 环境是一个明智的选择。pyenv 允许你轻松安装、切换和管理多个 Python 版本，同时保护系统自带的 Python 不被修改。本指南将详细介绍在 macOS 上安装和使用 pyenv 的全过程，包括安装步骤、管理不同 Python 版本、保护系统 Python 等操作方法。\n准备工作 检查 Homebrew 安装 在开始安装 pyenv 之前，首先需要确保你已经安装了 Homebrew。Homebrew 是 macOS 上的包管理器，方便我们安装各种工具和依赖。可以在终端中运行以下命令检查：\n1 2 $ brew --version Homebrew 4.5.8 安装 Xcode 命令行工具 macOS 上编译安装 Python 需要一些开发工具，这些工具可以通过 Xcode 命令行工具提供。运行以下命令安装：\n1 $ xcode-select --install 这会弹出一个安装窗口，按照提示完成安装即可。\n安装 pyenv 使用 Homebrew 安装 pyenv 在 macOS 上安装 pyenv 最简单的方法就是使用 Homebrew。在终端中运行以下命令：\n1 $ brew install pyenv 这一步会下载并安装 pyenv 及其依赖。安装完成后，你可以通过以下命令验证安装是否成功：\n1 2 $ pyenv --version pyenv 2.6.3 如果看到版本号，说明安装成功。\n配置环境变量 安装完成后，需要将 pyenv 添加到你的 Shell 配置文件中，以便在任何终端会话中都能使用。根据你使用的 Shell 类型（zsh 或 bash），打开相应的配置文件。以 zsh 为例，打开 ${HOME}/.zshrc 文件，在文件末尾添加以下内容：\n1 2 3 export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34; [[ -d $PYENV_ROOT/bin ]] \u0026amp;\u0026amp; export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34; eval \u0026#34;$(pyenv init - zsh)\u0026#34; 这些配置将：\n设置 pyenv 的根目录 将 pyenv 的二进制目录添加到系统 PATH 中 初始化 pyenv 环境 保存文件后，在终端中运行以下命令使配置生效：\n1 source ${HOME}/.zshrc 管理 Python 版本 查看可用 Python 版本 安装 pyenv 后，你可以查看所有可用的 Python 版本：\n1 2 3 4 5 6 7 8 $ pyenv install --list Available versions: 2.1.3 2.2.3 2.3.7 2.4.0 2.4.1 ... 这会列出所有可通过 pyenv 安装的 Python 版本，包括最新版本和旧版本。\n安装特定版本的 Python 要安装特定版本的 Python，使用以下命令：\n1 $ pyenv install \u0026lt;version\u0026gt; 例如，要安装 Python 3.13.5，可以运行：\n1 $ pyenv install 3.13.5 安装过程可能需要一些时间，因为 pyenv 会从源代码编译 Python。你会看到类似以下的提示：\n1 2 3 4 5 6 7 8 python-build: use openssl@3 from homebrew python-build: use readline from homebrew Downloading Python-3.13.5.tar.xz... -\u0026gt; https://www.python.org/ftp/python/3.13.5/Python-3.13.5.tar.xz Installing Python-3.13.5... python-build: use readline from homebrew python-build: use zlib from xcode sdk Installed Python-3.13.5 to /Users/haoliangma/.pyenv/versions/3.13.5 查看已安装的 Python 版本 安装完成后，可以使用 pyenv versions 查看已安装的 Python 版本：\n1 2 3 4 5 $ pyenv versions system 2.7.18 * 3.11.8 (set by /Users/haoliangma/.pyenv/version) 3.13.5 第一行 system 表示系统自带的 Python 版本，通常由操作系统预装。当前未被激活（没有 * 标记）\n第二行 2.7.18 表示通过 pyenv 安装的 Python 2.7.18 版本。当前未被激活（没有 * 标记）。\n第三行 * 3.11.8 (set by /Users/haoliangma/.pyenv/version) 表示当前激活的 Python 版本，该版本是通过全局配置文件 /Users/haoliangma/.pyenv/version 设置的默认版本。\n第四行 3.13.5 表示通过 pyenv 安装的 Python 3.13.5 版本，同样没有被激活。\n设置全局 Python 版本 要设置系统默认的 Python 版本，可以使用以下命令：\n1 $ pyenv global \u0026lt;version\u0026gt; 例如，要将 Python 3.13.5 设置为全局默认版本：\n1 $ pyenv global 3.13.5 再次使用 pyenv versions 查看已安装的版本：\n1 2 3 4 5 $ pyenv versions system 2.7.18 3.11.8 * 3.13.5 (set by /Users/haoliangma/.pyenv/version) 发现 3.13.5 版本已经被激活。\n可以通过以下命令验证：\n1 2 $ python --version Python 3.13.5 设置局部 Python 版本 在项目目录中，你可以设置特定于该项目的 Python 版本。进入项目目录，运行：\n1 $ pyenv local \u0026lt;version\u0026gt; 这会在当前目录下创建一个名为.python-version的文件，记录当前项目使用的 Python 版本。当你进入该目录时，pyenv 会自动切换到指定的 Python 版本。例如：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 $ cd pythonprojects $ pyenv local 3.11.8 $ pyenv versions system 2.7.18 * 3.11.8 (set by /Users/haoliangma/works/pythonprojects/.python-version) 3.13.5 $ cd .. $ pyenv versions system 2.7.18 3.11.8 * 3.13.5 (set by /Users/haoliangma/.pyenv/version) 临时使用特定版本 如果你只需要在当前终端会话中临时使用某个 Python 版本，可以使用：\n1 $ pyenv shell \u0026lt;version\u0026gt; 例如：\n1 2 3 4 5 6 7 8 9 10 11 $ pyenv versions system 2.7.18 3.11.8 * 3.13.5 (set by /Users/haoliangma/.pyenv/version) $ pyenv shell 3.11.8 $ pyenv versions system 2.7.18 * 3.11.8 (set by PYENV_VERSION environment variable) 3.13.5 这会覆盖全局和局部设置，仅在当前终端会话中生效。要恢复到之前的设置，可以使用：\n1 $ pyenv shell --unset 卸载 Python 版本 当你不再需要某个 Python 版本时，可以使用以下命令卸载：\n1 $ pyenv uninstall \u0026lt;version\u0026gt; 保护系统 Python macOS 系统自带了一个 Python 解释器，通常位于/usr/bin/python3。这个 Python 版本是系统正常运行所必需的，修改或删除它可能导致系统不稳定或某些功能无法正常工作。因此，保护系统 Python 非常重要。\npyenv 不会自动管理或修改系统 Python。当你安装新的 Python 版本时，它们会被安装在~/.pyenv/versions目录下，而不是系统路径中。这意味着系统 Python 始终保持不变，不会受到 pyenv 安装的版本的影响。\n你可以通过以下命令验证系统 Python 是否未被修改：\n1 2 $ which python /Users/haoliangma/.pyenv/shims/python 可以看出，你当前使用的是 pyenv 管理的 Python 版本。\n为了确保系统 Python 不被覆盖，你应该避免使用sudo安装或升级 Python。此外，在设置全局 Python 版本时，应确保不将系统 Python 设置为全局版本。\n如果你不小心覆盖了系统 Python 的某些行为，你可以通过重新安装 Xcode 命令行工具来恢复。运行：\n1 $ xcode-select --install 这会重新安装系统工具，包括系统 Python。\n总结 通过本指南，你应该已经掌握了在 macOS 上使用 pyenv 管理 Python 版本的基本技能。以下是关键点回顾：\n安装 pyenv：使用 Homebrew 安装 pyenv 和相关插件，确保正确配置环境变量。\n管理 Python 版本\n命令 描述 pyenv install \u0026ndash;list 查看可安装版本 pyenv install 安装指定版本 pyenv versions 查看已安装版本 pyenv global 设置全局默认版本 pyenv local 为当前目录设置版本 pyenv shell 为当前 Shell 设置版本 pyenv uninstall 卸载版本 保护系统 Python：pyenv 不会自动管理系统 Python，确保系统 Python 不被覆盖是使用 pyenv 的重要原则。 通过使用 pyenv，你可以在保持系统 Python 完整的同时，灵活地管理多个 Python 版本，使你的 Python 开发更加高效和安全。\n","date":"2025-07-14T13:18:30+08:00","permalink":"https://mahaoliang.tech/p/%E5%9C%A8-macos-%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-pyenv/","title":"在 macOS 上安装和使用 pyenv"},{"content":"\n","date":"2025-05-05T10:38:49+08:00","permalink":"https://mahaoliang.tech/p/ai-%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%932025%E5%B9%B45%E6%9C%88%E7%89%88/","title":"AI 工具总结（2025年5月版）"},{"content":"Zsh 是一种专门为交互式使用而设计的 Shell，同时也是一种强大的脚本语言，集成了 bash、ksh 和 tcsh 的许多有用特性，并添加了许多独特的功能。\n本文将指导您在 macOS 和 Linux 系统上安装 Zsh、Oh My Zsh 以及其常用插件，并展示如何配置 Oh My Zsh，以打造一个高效的命令行工作环境。\n安装 Zsh macOS brew install zsh Ubuntu sudo apt install zsh RHEL sudo yum update \u0026amp;\u0026amp; sudo yum -y install zsh 验证安装的 Zsh 版本 1 2 $ zsh --version zsh 5.8.1 (x86_64-ubuntu-linux-gnu) 设置 Zsh 为缺省 shell 1 $ chsh -s $(which zsh) 退出并重新登录。\n安装 Oh My Zsh Oh My Zsh 是一个开源、社区驱动的 Zsh 配置管理框架，，提供了 300 多个可选插件和 140 多个主题，并且内置了自动更新工具。\n使用下面的命令安装：\n1 $ sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 安装 zsh-autosuggestions zsh-autosuggestions 为 zsh shell 提供了类似 Fish shell 的自动建议功能的插件，该插件可以根据历史记录和自动补全来为用户提供命令建议。\n将插件 clone 到 $ZSH_CUSTOM/plugins：\n1 $ git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 然后在 ${HOME}/.zshrc 启用插件：\n1 plugins=(git zsh-autosuggestions) 在命令行输入命令时，zsh-autosuggestions 会根据命令历史或命令补全进行建议提示。那么如何接受建议呢？\nBash 和 Zsh 这样的 Unix shell 提供了两种主要的编辑模式：Emacs 模式和 Vi 模式，也就是说可以使用 Emacs 或 Vi 的快捷键来编辑命令行。 Emacs 模式是缺省模式。\n在 zsh-autosuggestions 的缺省配置文件中，定义接受建议的快捷键：\n1 2 3 4 5 6 7 8 9 10 11 12 13 ... # Widgets that accept the entire suggestion (( ! ${+ZSH_AUTOSUGGEST_ACCEPT_WIDGETS} )) \u0026amp;\u0026amp; { typeset -ga ZSH_AUTOSUGGEST_ACCEPT_WIDGETS ZSH_AUTOSUGGEST_ACCEPT_WIDGETS=( forward-char end-of-line vi-forward-char vi-end-of-line vi-add-eol ) } ... 如果命令行处于Emacs 模式，那么：\nctrl-f 或 ctrl-e 跳到行尾接受当前的建议 option-f 向前前进一个单词并接受建议 同样，如果命令行处于 vi 模式，那么就使用对应的 vi 键盘绑定接受建议。\n配置 Oh My Zsh Oh My Zsh 有非常多的内置插件，你也可以安装第三方插件，就像上面安装的 zsh-autosuggestions。\nOh My Zsh 也内置了多个 主题 供你选择。\n我们可以编辑 ${HOME}/.zshrc，配置 Oh My Zsh 的插件、主题，以及其他一些定制化设置。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ... # 设置主题 ZSH_THEME=\u0026#34;bira\u0026#34; # 启用插件 plugins=(git z zsh-autosuggestions) # 命令别名 alias mkdir=\u0026#39;mkdir -v\u0026#39; alias mv=\u0026#39;mv -v\u0026#39; alias cp=\u0026#39;cp -v\u0026#39; alias rm=\u0026#39;rm -v\u0026#39; alias ln=\u0026#39;ln -v\u0026#39; # 配置zsh-autosuggestions export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=\u0026#34;fg=#ff00ff,bg=cyan,bold,underline\u0026#34; export ZSH_AUTOSUGGEST_STRATEGY=(history completion) ","date":"2025-01-05T21:06:07+08:00","permalink":"https://mahaoliang.tech/p/zsh%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/","title":"Zsh的安装和配置"},{"content":"\n计算机系统与组成原理 极客时间：深入浅出计算机组成原理 Computer Systems: A Programmer\u0026rsquo;s Perspective 从程序员的角度学习计算机系统，了解计算机系统的各个方面，包括硬件、操作系统、编译器和网络。这本书涵盖了数据表示、C 语言程序的机器级表示、处理器架构、程序优化、内存层次结构、链接、异常控制流（异常、中断、进程和 Unix 信号）、虚拟内存和内存管理、系统级 I/O、基本的网络编程和并发编程等概念。这些概念由一系列有趣且实践性强的实验室作业支持。 Computer Systems: A programmer\u0026rsquo;s Perspective 视频课 Computer Science from the Bottom Up 采用“从下到上”的方法，从最基础的二进制、数据表示开始，逐步深入计算机内部工作原理，目的是帮助读者真正掌握计算机科学的基础知识。 Putting the “You” in CPU 深入探讨了计算机系统的工作原理，包括 CPU 的基本操作、系统调用、多任务处理、内存管理以及程序的执行过程。 编码 从二进制编码、数据表示到计算机体系结构、操作系统等多个重要主题，从根本上理解计算机的工作原理。 漫画计算机原理 趣话计算机底层技术 计算机底层的秘密 穿越计算机的迷雾 嵌入式 C 语言自我修养 C 语言 征服 C 指针 彻底理解和掌握指针的各种用法和技巧 C 专家编程 Sun 公司编译器和 OS 核心开发团队成员，对 C 的历史、语言特性、声明、数组、指针、链接、运行时、内存等问题进行了细致的讲解和深入的分析 C from Scratch 一个学习 C 语言的从零开始的路线图，包括推荐的课程、项目和资源，以及进阶到 x86-64 汇编语言和操作系统内部的指导。 极客时间：深入 C 语言和程序运行原理 cdecl 将C语言声明转换为英文描述，例如将这样复杂的声明 void (\\*signal(int, void (\\*)(int)))(int) 转换为文字描述：“declare signal as function (int, pointer to function (int) returning void) returning pointer to function (int) returning void” 程序运行原理 Online Compiler, Visual Debugger 独特的逐步可视化调试工具，强烈推荐！ 程序是怎样跑起来的 程序员的自我修养：链接、装载与库 如何从对象文件中导入和执行代码 part1 part2 part3 x86/x64 CPU architecture: the stack \u0026amp; stack frames x86/x64 CPU 架构中的栈（Stack）及其工作机制，包括栈的数据结构特性、CPU 中栈的管理、栈与堆的区别、栈帧的创建与销毁，以及栈的性能优势。 Driving Compilers 关于如何使用编译器创建可执行文件的深入知识，涵盖编译器驱动程序、预处理器 cpp、编译器 cc、链接器 ld 以及 Linux 加载器的概念。 Linux 使用 极客时间：Linux 实战技能 100 讲 Efficient Linux at the Command Line 像黑客一样使用命令行 Linux Foundation 的认证考试 LFCA 和 LFCS Learning Modern Linux Linux From Scratch step-by-step instructions for building your own customized Linux system entirely from source. Linux 内核 Linux 是怎么工作的 Linux 技术内幕 Linux 内核设计与实现 Linux Kernel Development 深入理解Linux进程与内存 极客时间：Linux 内核技术实战课 极客时间：编程高手必学的内存知识 极客时间：容器实战高手课 深入理解 Linux 网络 交互式的 Linux 内核地图 Linux 系统编程 Linux/UNIX系统编程手册 The Linux Programming Interface: A Linux and UNIX System Programming Handbook UNIX 环境高级编程 Advanced Programming in the UNIX Environment CS 341: System Programming 伊利诺伊大学香槟分校 CS 341 课程使用，介绍 C 语言和 Linux 系统编程知识。 网络 趣谈网络协议 极客时间：Web 协议详解与抓包实战 图解 TCP/IP 图解 HTTP 网络是怎样连接的 数据结构和算法 极客时间：数据结构与算法之美 极客时间：算法面试通关 40 讲 极客时间：常用算法 25 讲 极客时间：算法训练营 Hello 算法 动画图解、一键运行的数据结构与算法教程 通过动画可视化数据结构和算法 算法刷题 Leetcode 一个广受欢迎的在线编程题库 Neetcode 另一个在线编程练习平台 代码随想录 LeetCode 刷题攻略 算法通关手册 850+ 道「LeetCode 题目」详细解析 综合 计算机自学指南 (GitHub 仓库) YouTube 视频课：Crash Course Computer Science Preview 计算机教育中缺失的一课 Developer Roadmaps 为开发者提供学习路线图和指南 Online Coding Classes – For Beginners 3000 小时的免费课程，涵盖了编程涉及到的方方面面 交互式教程 Grep by example 如何使用命令行工具 grep 进行文本搜索的交互式指南 Learn Git Branching 一个交互式的在线教程，帮助用户学习并练习 Git 的基本使用方法 在线课程 educative 为开发者提供交互式在线课程，重点关注技术领域的知识与技能 edX 由麻省理工学院（MIT）和哈佛大学共同创立的在线教育平台 exercism 专注于通过有趣且具有挑战性的练习问题、支持建设性同行评审机制来促进积极参与和技能提升，从而培养对各种现代计算范式的熟练掌握。 技术面试 Cracking the coding interview book 一本深受程序员喜爱的面试指南书 编程面试大学 涵盖了算法、数据结构、面试准备和工作机会等主题，帮助你准备大公司的技术面试 interviewing.io 一个提供模拟技术面试的平台 Pramp 一个模拟面试平台 Meetapro 一个可以找到专业人士进行模拟面试的网站 PPResume 一个基于 LaTeX 的简历生成器，目标是帮助人们在几分钟内创建一份精美的简历，并提供极高质量的排版和 PDF 输出。 大语言模型 Learn Prompting 一个开源的、多元化社区构建的课程，旨在提供完整、公正的提示工程知识。 提示工程指南 介绍大语言模型（LLM）相关的论文研究、学习指南、模型、讲座、参考资料、大语言模型能力及其与其他工具的对接。 面向开发者的大模型手册 基于吴恩达大模型系列课程的翻译和复现项目，涵盖了从 Prompt Engineering 到 RAG 开发的全部流程，为国内开发者提供了学习和入门 LLM 相关项目的方式。 LLM 应用开发实践笔记 作者在学习基于大语言模型的应用开发过程中总结出来的经验和方法，包括理论学习和代码实践两部分。 动手学大模型应用开发 面向小白开发者的大模型应用开发教程，基于阿里云服务器，结合个人知识库助手项目，通过一个课程完成大模型开发的重点入门。 iOS 开发 iOS \u0026amp; Swift - The Complete iOS App Development Bootcamp The 100 Days of SwiftUI Stanford CS193p - Developing Apps for iOS iOS and SwiftUI for Beginners Meta iOS Developer Develop in Swift Tutorials 苹果官方教程 SwiftUI Tutorials 苹果官方教程 计算机科学史 信息简史 ","date":"2024-08-24T15:51:30+08:00","permalink":"https://mahaoliang.tech/p/%E5%A4%A7%E5%AD%A6%E7%94%9F%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%93%E4%B8%9A%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%BA%90%E4%B8%8D%E5%AE%8C%E5%85%A8%E5%88%97%E8%A1%A8/","title":"大学生计算机专业学习资源不完全列表"},{"content":"文本准备 要创建一个以 .py 扩展名结尾的文本文件，你可以按照以下步骤进行操作：\n打开文本编辑器。\n你可以使用操作系统自带的文本编辑器（如记事本、TextEdit等），或者使用专业的代码编辑器（如Visual Studio Code、Sublime Text、Atom等）。\n在文本编辑器中创建一个新文件。\n将你的Python代码复制粘贴到新文件中。 保存文件时，指定文件名并确保使用 .py 作为文件的扩展名。 例如，你可以将文件命名为 plot_example.py。\n代码示例（画的是一个y=x^2的图）：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import numpy as np # 准备数据 x = np.linspace(-10, 10, 100) # 在 -10 到 10 之间生成 100 个均匀分布的点 # 计算对应的 y 值 y = x ** 2 # 创建图形并设置标题 plt.figure() plt.title(\u0026#34;Plot Example\u0026#34;) # 绘制折线图 plt.plot(x, y) # 显示图形 plt.show() repr 运行 我在Mac上用的是visual studio code， 点击文件，用VS code打开。 打开后，假如没装python的话，会显示要install python 编译器，下载就可以运行了了 ","date":"2023-09-15T15:07:58+08:00","permalink":"https://mahaoliang.tech/p/%E5%A6%82%E4%BD%95%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%98%E5%88%B6%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/","title":"如何用命令行绘制数学函数"},{"content":"视频逐帧提取 运用脚本来完成手动工作，即n秒一次截屏 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 tell application \u0026#34;IINA\u0026#34; reopen activate delay 0.5 tell application \u0026#34;System Events\u0026#34; keystroke (ASCII character 32) delay 0.1 end tell repeat tell application \u0026#34;System Events\u0026#34; keystroke \u0026#34;s\u0026#34; using {command down} end tell delay 0.5 end repeat end tell 这里的第三个delay是来控制截屏间隙的，delay 0.5就是0.5秒截一次屏。\n这个脚本只试用于Mac电脑，因为command+s是Mac上的快捷键。\npng转svg，再转png svg就是字符矢量图，但是它不能导入视频软件来制作视频，所以还要再转回png。 copy pics to tencent server 1 scp $HOME/Pictures/Screenshots/*.png mahaoliang:/home/ubuntu/works/pics/ 这里我是上传到服务器上搞的， install app 1 2 3 sudo apt-get install caca-utils sudo apt-get install librsvg2-bin sudo apt install imagemagick run script 1 ./run.sh 因为有很多张图片，所以写了一个脚本run.sh，就是将png-\u0026gt;svg-\u0026gt;png的动作重复，命令如下： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 # clean mkdir -p \u0026#34;${svg}\u0026#34; mkdir -p \u0026#34;${output}\u0026#34; # 使用循环遍历目录中的每个文件 for file in \u0026#34;${pics}\u0026#34;/*.png; do # 检查文件是否是普通文件 if [[ -f $file ]]; then filename=$(basename \u0026#34;$file\u0026#34;) filename=\u0026#34;${filename%.*}\u0026#34; echo \u0026#34;processing $file\u0026#34; # 这里可以添加你的处理逻辑 img2txt -W 200 -f svg \u0026#34;$file\u0026#34; \u0026gt;${svg}/\u0026#34;${filename}\u0026#34;.svg fi done for file in \u0026#34;${svg}\u0026#34;/*.svg; do # 检查文件是否是普通文件 if [[ -f $file ]]; then filename=$(basename \u0026#34;$file\u0026#34;) filename=\u0026#34;${filename%.*}\u0026#34; echo \u0026#34;processing $file\u0026#34; # 这里可以添加你的处理逻辑 rsvg-convert \u0026#34;${file}\u0026#34; \u0026gt;${output}/\u0026#34;${filename}\u0026#34;.png fi done #convert ${output}/*.png output.gif tar -zcvf output-${timestamp}.tar.gz ${output} 这里面#convert ${output}/*.png output.gif,可以把#去掉，这样就可以直接制作字符动图了（gif）。 download 1 scp mahaoliang:/home/ubuntu/works/output.png . 动画制作 我用的是苹果的final cut pro，试用期是90天，假如到期了话就可以输入一下代码，重置时限： 1 2 3 4 cd ~ cd Library/Application\\ Support ll -a rm .ffuserdata 将所有图片依次导入软件，建立复合片段，再调整速度就好了。 结尾 最后送大家一个GIF\n视频 https://cdn.mahaoliang.tech/images/202309082303161.mp4\n","date":"2023-09-08T20:06:23+08:00","permalink":"https://mahaoliang.tech/p/%E5%AD%97%E7%AC%A6%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C/","title":"字符动画制作"},{"content":"网址 直接推网站：DeGraeve.com\n步骤 图片要准备URL的链接，例如图中的https://www.degraeve.com/images/lcsm.gif 可以看到下面一行有三个选项，ASCII art、color HTML和RTTY。以下分别是这三个的效果图 可以发现三者，有颜色的还原度最高，第一个还原度第二，第三个最差。 怎么选就看个人了。\n总结 这个网站还有很多其他的功能，因该是为数不多的优良的免费工具了。\n","date":"2023-09-04T12:57:56+08:00","permalink":"https://mahaoliang.tech/p/%E5%9B%BE%E7%89%87%E8%BD%AC%E5%AD%97%E7%AC%A6%E7%BD%91%E7%AB%99%E5%88%86%E4%BA%AB/","title":"图片转字符网站分享"},{"content":"0. 前言 北京时间晚上11:43，舍友，唯一一个舍友，上床睡觉去了。现在是琪亚娜时间！！！\n$MUSIC=I Really Want to Stay at Your House$\n1. 我的世界树 我这个人性格上跟村上春树很像，不折不扣的个人主义。用中国人的一个词来讲，就是天性凉薄的人。我之前写过，由于我这十八年从没有表达过自己，导致了我的情感淡化，麻木，成了无感之人。看医生的时候，问我在某个特定的情境下有什么感受，或是对我之前的经历有什么感受，我完全回答不上来，“我母鸡呀”。我写这篇文章呢，并不是要给谁看的，而是在练习自我表达，缓解病情，虽然这“天性凉薄”可能已经刻在了我的DNA里啦。\n我并不了解我的父母，在这十几年里，感觉像跟陌生人一样生活在一起，这一切大部分是我的问题，谁叫我天性凉薄呢。我妈每次都唠叨，假如我现在回家，她一定会先叫我洗手，但我一定不会洗。我爸好沉默的，以前我小学的时候，他辅导我数学经常发火，于是我家买了一个一米厚的木头长桌。别问发火与买桌子有啥关系，问就是一米厚拍不断。我呢，就基本上在打游戏啦。在学校里累成狗，回家最快，最容易上手的就是打游戏啊。初二时，我晚上两点偷偷爬起来打平板。平板就在客厅的长桌上，我每次都得摸着过去，因为要经过爸妈的房间，每次拿到iPad回到房间里心都得猛跳两下。高三时，高考前两个月，我白天在家里打游戏，晚上和爸妈出去吃饭，吃饭时打游戏，吃完饭后在Star Bark里打游戏。真就游戏人生咯。\n有人可能要发：逆天作者，天天打游戏。但这就要谈及价值观啦。前面跑题那么多哦，终于要谈我的世界树，也就是价值观了。直接上结论，一个人想怎么活就怎么活，不论是读一辈子书，还是打一辈子游戏。自己觉得值了，那便值了。人生嘛，哪里有什么高低贵贱。人死后，他生前做了什么都与他无关了。至于他人的评论嘛，那就当是放屁。一辈子就几十年，减去睡觉吃饭，有B站up算过，9795天，@元菜Yilia，还能有时间在意别人的看法吗？\n就用乔布斯的话来总结吧：JUST DO IT！！！\n$MUSIC=Golden Hour$\n2. 怎么看待人生：躺着看呀 我现在就想躺平。《20年读书，余生还房贷，死后给医院做贡献》，真实不？我想大多数人多是这样的人生吧，我假如不啃老也是。\n我高三的最后两个月，看了一些视频，彻底把我打醒了。\n一个大学生，好歹是211的，考了两年的研，考不上，也没工作，发视频自嘲。\n上海的一家药工厂，一个月三千，只招985的。\n学习是为了什么？就为了那三千块钱，或是压根找不到工作？人生是为了什么？就是为了卷一辈子？我好像一出生就走上了一条路：拼了命的考了一个好的高中，拼了命的考了一个好大学，拼了命的考研，工作后拼了命的加班是为了拼了命的还房贷。我为什么要走这条路？这条路真的非走不可吗？中国人真是“勤奋”啊，吃苦一辈子，劳累一辈子。我当然知道小镇做题家，这是他们唯一出路，但这绝不是我的唯一。\n是的，当时我觉望了，我躺了，我选择躺看人生。对了，这也不应该叫躺。我们这里，只要不加班了，只要一娱乐了，只要不上进了，就叫躺平，凭什么呀？吃苦吃的。别地的健康青年到我们这里就叫躺平了。我“躺”了两个月，即使是现在，我也是在躺平。\n《保安少走40年弯路，躺平少走60年弯路，人生何其短暂，走自己喜欢的路就行。》\n","date":"2023-09-03T20:55:25+08:00","permalink":"https://mahaoliang.tech/p/%E9%A9%AC%E7%9C%BC%E7%9C%8B%E4%B8%96%E7%95%8C/","title":"马眼看世界"},{"content":"1. 文本部分 1.1 斜体和粗体，删除线 使用 * 和 ** 表示斜体和粗体。\n示例：这是斜体，这是粗体。\n使用 ~~ 表示删除线。\n这是一段错误的文本。\n1.2 分级标题 使用 === 表示一级标题，使用 \u0026mdash; 表示二级标题。\n效果图 你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。\n效果图\n1.3 常用 Emoji \u0026amp; Font-Awesome 2.0 常用布局 2.1 无序列表 使用 *，+，- 表示无序列表。\n示例：\n无序列表项 一 无序列表项 二 无序列表项 三 2.2 有序列表 使用数字和点表示有序列表。 示例：\n有序列表项 一 有序列表项 二 有序列表项 三 2.3 行内代码块 使用 代码 表示行内代码块。(就是这个``)\n2.4 插入图像 使用:\n! [描述]\n$+$\n( 图片链接地址 )\n$+$\n插入图像。\n2.5 表格支持 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234 \u0026gt; ce ce 效果图\n2.6常用数学符号 ","date":"2023-09-03T19:58:18+08:00","permalink":"https://mahaoliang.tech/p/markdown%E8%AF%AD%E6%B3%95/","title":"Markdown语法"},{"content":"前言 本文借鉴了多位米游社大佬的文章，大佬名单：\n@为胡桃坐牢火本、@110000cc、@光坂镇守镇人、怎么能沉迷游戏QAQ、@枕香半縷夢。\n好了，正片开始。\n1:2的暴击与暴伤比最优的由来 为什么会常说暴击率：暴击伤害为1：2时最优？双暴很大一部分来源于圣遗物词条，而圣遗物每一个有效词条均有四个档位，如下图。\n可以发现，在同档位下，暴击与暴伤的比值正好为1:2。这个1:2与最优解的比值一样，并不是巧合，解释如下。\n就拿暴击率为3.9%加成每词条，暴击伤害7.8%每词条，同一档位的为例。（取不同档位比较是无意义的）\n假设双暴有效词条数共有 x 条，暴击率有 a 条，则暴击伤害有 (x - a) 条\nx：常数，是一个已知的固定值\na：变量，由圣遗物决定，也由玩家选取决定\nx - a：变量，由圣遗物决定，也由玩家选取决定\n即此时\n$ 暴击区间=1+3.9%\\times a\\times 7.9%\\times(x-a)=1+30.42%\\times a\\times(x-a)$\n初中知识，简单的抛物线函数， 当a为0.5x时，值最大，那么此时（x - a）同样为0.5x 即40个有效双暴词条，暴击率暴伤个20词条时（20个有效，则各有10个时），伤害值最大 故在其他条件不变下，暴击词条数：暴伤词条数 = 1：1最优 又由于每个暴伤有效词条是暴击率词条加成的2倍，故暴击率：暴击伤害 = 1：2时伤害最高\n精通与双爆的分配 不同武器的被动不同，所以即使是总面板一样，伤害还是有差异的。那么按照武器分类，不同武器的最终面板与伤害的图如下： 圣遗物的选择 圣遗物选择：\n4魔女（输出上限） 2件套：获得15％火元素伤害加成。 4件套：超载、燃烧、烈绽放反应造成的伤害提升40%，蒸发、融化反应的加成系数提高15%。施放元素战技后的10秒内，2件套的效果提高50%，该效果最多叠加3次。\n4追忆（输出相对稳定） 2件套：攻击力提高18%。 4件套：施放元素战技时，如果角色的元素能量高于或等于15点，则会流失15点元素能量，使接下来的10秒内，普通攻击、重击、下落攻击造成的伤害提高50%，持续期间内该效果不会再次触发。\n2魔女2乐团 乐团2件套：元素精通提高80点。（寄）\n配队 胡行钟夜yyds。\n分析：胡桃主C,夜兰副C加辅助增伤加挂水，行秋减15%水抗加高频挂水，钟离给盾加减抗。另外，双水加25%生命，提高了夜兰和胡桃的输出，钟离的盾量。完美！！！\n注：夜兰带终末不仅增加了充能，还给胡桃提供了额外的精通。钟离还可以尝试一下教官套，也可以加精通。\n","date":"2023-09-01T21:16:54+08:00","permalink":"https://mahaoliang.tech/p/%E8%83%A1%E6%A1%83%E7%9A%84%E6%9C%80%E4%BC%98%E9%9D%A2%E6%9D%BF/","title":"胡桃的最优面板"},{"content":"为啥有人称我们为水军呢？我们明明还是训练的，只是不多而已。以下是我们的军训时间表。\n8.29开始训练7天，10月份再训练7天。\n就我亲生经历来讲，整体上不太累。我在巡时每天早上6：40起床，7:30在食堂吃完早餐，7:50集合，8:00开训，练到9点多开始坐着唱军歌（休息），10：20结束早上训练。下午1:40集合，听讲座，又是睡觉时间，听到4:30结束下午的训练。要说累，就是晚上训练很累，6:00集合，到二期校园的体育场练习。走过去20分钟回来20分钟，期间要训练两个多小时，9点多回到一期校园，结束训练。\n训练时手机要上交，训练完了就会拿回来。训练过程中的休息时间的长短要看教官。我的教官就挺好的，休息训练五五开\n重点来了，军训累不累还要看老天爷的心情。停训的时间是不会补回来的！！！\n最后，在提一点注意要点。\n军训的穿的军鞋质量很烂，站久了脚会很疼，而且鞋底还会掉色，白袜子会被染黑的，我舍友就是例子。所以，为了您的脚和袜子，一定要买一双鞋垫，塞进去垫着。\n","date":"2023-09-01T19:23:19+08:00","permalink":"https://mahaoliang.tech/p/uic%E7%9A%84%E5%86%9B%E8%AE%AD%E6%97%A5%E8%AE%B0/","title":"UIC的军训日记"},{"content":"生成新的文章 进入到本机网站目录\n1 cd documents/works/mahaoliang/mahaoliang.stack.tech 在保存本机网站的目录下运行下面的命令，生成一篇文章\n1 hugo new post/kubernetes-overview.md 编辑文章 使用 Typora 打开新建的文章，首先编辑文章的元信息：\n1 2 3 4 5 title: \u0026#34;Kubernetes工作原理概述\u0026#34; date: 2022-07-22T17:30:11+08:00 draft: false tags: [docker,linux,kubernetes] categories: [tech] 然后编辑文章内容，图片使用 picGo 上传到图床。\n将文章发布到GitHub 在保存本机网站的目录下运行下面的命令，将文章发布到GitHub\n1 2 3 git add . git commit -m \u0026#34;kubernetes\u0026#34; git push 网站内容更新 登录到腾讯云主机，\n1 ssh guangzhou-tencent 进入 ~/works/mahaoliang.stack 目录，执行命令：\n1 git pull 完成\n","date":"2023-08-31T20:54:03+08:00","permalink":"https://mahaoliang.tech/p/%E6%96%87%E7%AB%A0%E5%8F%91%E8%A1%A8/","title":"文章发表"},{"content":"雅思学习｜心得 ∆口语 口语对于我来说是最难的部分，不仅仅有社恐的因素，还有 oral speaking 的语速问题（over 120 words per minute is standard）。\n特别要注意的是口音并不太重要，重要的是 例子！！栗子！！真实例子！！ 不管是part 1，part 2，还是part 3，都需要例子，只不过每个part 的例子各有区别罢了。区别后面讲。 不能有太多的停顿，一个问题最多两个停顿，多了就有可能扣分，再多些考官就会cut you out，然后你的心态就可能会崩，导致后面答题的状态，引发蝴蝶效应。 注意时间限制，part one和part three 一个问题回答一分钟左右，没有准备时间！！！part two 有一分钟的准备时间，给一张纸让考生写提示词，讲述时可以看。 Part 1 在part 1 时，举例子只用举自己的轻身例子，并用第一人称讲述。讲述时，时态讲错了不用管，因为不重要，重要的是要讲述具体细节\n例如，说出去吃饭时要说清楚和谁去（who），为什么去（why），什么时候去的（when），去哪里吃（where），吃的什么类型的餐厅的什么菜(what)，心情如何（how），即6W要素。\neg. I usually hang out with my best friend, Tom, to have a big meal on weekends in a shopping centre like the Coastal City in Nan Shan district in Shenzhen because the food in school\u0026rsquo;s canteen is tasteless. And we always go to the Green Tea restaurant there, a famous chinese restaurant, for having some crispy chicken, spicy tofu, or the boiled Fish with Sichuan pickles. That really makes me a happy mood to face the disgusting food next week in school.\n在上面的例子中，我每提出一个概念都给出了解释或是具体的事物。 例如，friend 是Tom，a shopping centre 是深圳南山区的海岸城the Coastal City，the Green Tea restaurant 是一家中餐厅 。以上就是我所说的具体细节，就是得分要点。没有细节口语就不可能上6分，只有5分。\nPart 2 在part 2 时，也要举亲身经历，题目怎么问就怎么答，讲出具体细节就可以了。准备时，最好四十秒写提示词，二十秒再在脑中过一遍，以免出现太多停顿。\n例如题目：Describe a daily routine that you enjoy\nYou should say, what you do, when it became your daily routine, whether you will change it in the future, and explain why you enjoy it\neg.\nThe daily routine I am going to tell you about is that I jog at around 6 pm nearly every afternoon. At that time, the sun has already started sinking, but the darkness has not fallen, creating a mild temperature. Right next to my community is a huge park stretching over 2 kilometers, which is a perfect place to run around. Sometimes, I would also go to the stadium several blocks away. It has a standard 400-meter track, enabling me to precisely calculate the distance and speed.\nI developed this habit several months ago when I accidentally caught Xiaoming doing some warm-up activities at the side of the street on my way back from the library. I pulled over my electric bicycle and asked what he was doing. He said he was going to start his daily jogging and invited me to jog together. I thought, why not. But what I did not expect was that I overestimated my stamina. After one kilometer, I felt I could not breathe and had to give up. But since then, I have jogged with him almost every day.\nI do not think I will change this daily routine in the near future because it has substantially improved my health. Before I jogged, I suffered from sub-health resulting from my sedentary lifestyle. I felt tightness in my chest now and then, my back and waist ached, and I could not help panting after climbing only two floors. But now, these problems rarely surface.\nApart from the health benefits I have mentioned, I enjoy jogging because it can soothe my tense nerves. You know, it helps me concentrate on my breaths and steps and thus temporarily escape from all the troubles.\n在上面的回答中，加粗的字是要写在纸上的，其他部分就只能自由发挥了\nPart 3 在part 3 时，回答的方式和part 1 差不多，只是第一人称要换成第三人称，如the people，they，them和their。讲述时按照OREO的方法就可以了，讲述时间不能超过1分钟，40秒就足够了。举例的时候，只用举一个就可以了，越详细越好。\n例如：Q do people\u0026rsquo;s routines differ on weekdays and weekends?\neg.\nThe routines on weekdays are regular but routines on weekends are not. (opinion) (reason) For example, people have to go to school or go to the workplace at 7 am every weekday and have lunch at 12 o’clock, and they had to stay at school or work place until at about 6 PM. But on the weekends, people can get up late at around 11am if they want, having a big meal in the restaurant like the green tea restaurant for the crispy chicken and spicy tofu. And they can go home at any time they want.(example) so the routines on weekends are flexible but on weekdays are stricted.(opinion) 如何讲好例子 背景（一句话）\n4、5个 actions ————\u0026gt;good example\n2、3个 actions————\u0026gt;small example\n结果，the end\n例如：Describe the word \u0026ldquo;patience\u0026rdquo; .\neg.\nIf a naughty kid is making noise, laughing and shouting, in a public place like the library named the Book City in Nan Shan district in Shenzhen and his parents are not there （background）, I will not get mad at him or punch on his face. I will first grab his hands to stop him from running around the whole place, and tell him to be quiet. （actions） Then, I will send him to his parents to tell about his bad behavour, to make sure that he will not make noise in the public any more. （the end） 注：加粗为 actions ∆阅读 题型 顺序题：\n填空题 （sentence completion 和 short answer question） 判断题 （T/F/NG 和 T/N/NG） 选择题 （multiple choice） 乱序题：\n人物匹配题 （matching features） 中心句匹配题 （matching headings） 信息匹配题 （matching information） 注意 做信息匹配题时，要先读题，思考题目中的关键词会替换成什么。 人物匹配题和信息匹配题出现NB时，代表有一个人会被选两次，或有一段会选两个信息。 ∆写作 类型 小作文\n流程图 数据图 大作文\n内容 小作文\n信息转述（Introduction） 总述（overview） 特点一（feature one） 特点二（feature two） 大作文\n信息转述（introduction） 一方面（1st side） 另一方面（2nd side） 总结（conclusion） ∆听力 题型 填空题 选择题（单/多） 地图题 注意 同义替换，一般与答案一起出现 ","date":"2023-08-29T21:59:36+08:00","permalink":"https://mahaoliang.tech/p/ielts-learning/","title":"IELTS Learning"},{"content":"SDKMAN！是用于管理多个软件开发工具包的并行版本的工具。\n可安装的软件列表\n列出当前可安装的软件列表 1 sdk list 列出当前可安装的Java版本列表 1 sdk list java 安装指定的版本 1 sdk install java 17.0.7-tem 查看当前使用的版本 1 2 sdk current sdk current java 设置缺失使用的版本 1 sdk default java 17.0.7-tem 设置当前shell session使用的版本 1 sdk use java 8.0.332-tem 更新软件仓库 1 sdk update sdk软件本身的更新 1 sdk selfupdate ","date":"2023-06-24T18:08:17+08:00","permalink":"https://mahaoliang.tech/p/sdkman%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"Sdkman的使用"},{"content":"1Password的最大优势是跨平台，不管是苹果系的iOS，macOS，还是Google的Android，微软的Windows，以及Linux，都能完美支持。让你在macOS上使用Safari，在Windows上使用Edge，Android上使用Chrome时，都能无缝得到密码管理的支持。这是苹果自带的密码管理所不能满足的。\n如何使用好1Password，官方文档Get started with 1Password是最好的学习素材，快速浏览一遍，基本会使用完全没有问题。\n这篇文档我只重点介绍在 macOS 和 iOS 上使用1Password时的一些注意事项。\n安装 macOS和iOS上的Safari，都需要打开1Password插件。\nmacOS的Safari插件直接在App Store安装。\niOS上插件的安装请参考：Get to know 1Password for Safari on your iPhone or iPad\nOpen Safari to any website and tap in the address bar.\nIf you\u0026rsquo;re using an iPad, tap in the address bar.\nTap Manage Extensions and turn on 1Password, then tap Done.\n关掉内置密码管理 由于Safari自带了密码管理，同时打开会和 1Password 有冲突，因此需要关闭内置的密码管理。\n具体操作参考官方文档Turn off the built-in password manager in your browser。\nmacOS 上Safari的设置 To stop Safari from asking to save your passwords:\nClick the Safari menu and choose Preferences. Click the AutoFill icon. Turn off all the AutoFill web forms settings: “Using info from my contacts”, “User names and passwords”, “Credit cards”, and “Other forms”. iOS 上Safari的设置 To stop Safari from asking to save your passwords:\nOpen Settings, then tap Passwords \u0026amp; Accounts. Tap AutoFill Passwords. Turn off iCloud Keychain. iOS上App的支持 iOS上app使用 1Password 的体验和 Safari 是一致的，只要app使用iOS系统标准键盘，在需要输入用户名和密码的地方，会自动出现钥匙图标，点击钥匙，会呼出1Password进行自动填充。\n然而很多国产银行类app，基本都不使用iOS内置键盘，所以没法呼出1Password。这时候只能自己进入1Password 进行拷贝密码或创建密码的操作。\nUniversal Autofill Universal Autofill 是 1Password 8的一个重大升级功能。Universal Autofill 实现了真正的「全局填充」。你只要记住一个快捷键 Command + \\ ，就可以在浏览器、应用程序、终端和系统提示等任何地方，让 1Password 帮你自动完成密码填充。\n两步认证 对于已经支持1Password 两步认证 的网站，都已经迁移到了1Password。\n如果1Password本身开启了两步认证，它就需要一个第三方的Authenticator，因为它不可能自己保存自己的one-time password，官方文档已经说明。我选择了微软的Authenticator。\n微软的Authenticator可以备份和恢复，在换手机时非常方便。另外使用 Authenticator 登录微软账号时体验很好，不需要输入密码，只用在手机上确认即可，体验类似扫码登录，但又不用扫码:)\n管理SSH Keys 1Password 可以保存你的 SSH keys，并作为 SSH agent ，无缝整合 SSH 和 Git工作流。同时，在GitHub等平台需要填写公钥的地方，自动帮你拷贝填充公钥。\n生成或导入SSH keys 我们可以使用 ssh-keygen 命令自己生成 SSH key，也可以在 1Password 中创建SSH key 项目时自动生成。 开启1Password SSH Agent 1Password SSH Agent 使用你保存在1Password中的 SSH Key，与你的Git和SSH工作流程无缝集成。它可以验证你的Git和SSH客户端，而这些客户端永远无法读取你的私钥。\n首先要打开 1Password SSH Agent ，让它在后台运行，为你的SSH客户端处理认证。打开 1Password \u0026gt; 偏好设置 \u0026gt; 开发者，勾选 “使用 SSH agent” 和 “授权连接时显示密钥名称”。 为了确保 SSH Agent 在后台持续运行，需要在 1Password \u0026gt; 偏好设置 \u0026gt; 通用 中，勾选 “在菜单栏中保留1Password”。\n配置 SSH 客户端 为了让 SSH 客户端能使用1Password SSH agent，需要将 IdentityAgent 配置添加到 ~/.ssh/config文件中：\n1 2 Host * IdentityAgent \u0026#34;~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\u0026#34; 你也可以在 Shell 中设置 SSH_AUTH_SOCK 环境变量：\n1 export SSH_AUTH_SOCK=~/Library/Group\\ Containers/2BUA8C4S2C.com.1password/t/agent.sock 如果觉得agent 路径过于复杂，可以先创建一个符号链接：\n1 mkdir -p ~/.1password \u0026amp;\u0026amp; ln -s ~/Library/Group\\ Containers/2BUA8C4S2C.com.1password/t/agent.sock ~/.1password/agent.sock 这样就可以在设置环境变量时直接引用符号链接：\n1 export SSH_AUTH_SOCK=${HOME}/.1password/agent.sock 现在 SSH 客户端就可以在登录远程主机时使用1Password SSH agent。\n可以使用下面的命令查看，1Password SSH agent 帮我们管理的SSH Keys：\n1 ssh-add -L 发布 SSH 公钥 我们需要使用某种方式，将 SSH 公钥发布到远程服务器，以便对方能利用公钥验证你的身份。\n一种方式是把公钥上传到服务提供者的网站，将公钥和你的账号绑定。例如你可以在GitHub SSH key settings页面上传公钥。 腾讯云的管理控制台也可以上传你的公钥，然后将公钥和你购买的服务器绑定。在页面填写公钥时，1Password会像填充密码一样进行自动填充。\n另一种方式就是使用 ssh-copy-id 命令，直接将公钥拷贝到远程服务器。\n不管使用哪种方式，一定要记住你发布的是公钥，千万不能不小心泄漏了私钥。\n管理 Github Signing Key Github 开始支持使用 SSH Key 来签名提交，也就是说，我们可以用 1Password 管理的 SSH key 来签名 git commit。\n设置过程可以参考Sign your Git commits with 1Password，主要包含两个步骤：\n在GitHub上生成Signing Key。访问https://github.com/settings/keys ，选择 “New SSH Key”，选择key的类型为 “Signing Key”，然后填入 1Password 管理的 SSH 公钥。 配置本地的 .gitconfig。在 1Password中，选择SSH Key，并在上面显示的横幅中选择 \u0026ldquo;配置 \u0026ldquo;选项： 按照提示，配置你的 .gitconfig文件。这些设置选择了你的 SSH key，并在 git commit 的时候使用 SSH Key 签名。\n“Sign in with” anything 1Password将记住用户使用的第三方登录服务（如 sign in with Google）。看官方消息，这个功能很快会上线。\n","date":"2022-09-29T22:06:18+08:00","permalink":"https://mahaoliang.tech/p/1password%E5%9C%A8macos%E5%92%8Cios%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","title":"1Password在macOS和iOS上的使用技巧"},{"content":"基本设置 打开终端的偏好设置，点击描述文件tab，将 Pro 设置为默认描述文件。\n然后对 Pro 进行配置。\nTab页 设置 文本 勾选“平滑文本”。可自定义背景透明度。 窗口 窗口大小：行 120 列30 窗口 选择 将行数限制为：10000 shell 当shell退出时，选择当shell完全退出后关闭 键盘 勾选 将option键当Meta键 高级 确认终端为 xterm-256 color 安装Xcode Command Line Tools Xcode Command Line Tools 包含了clang编译器，git客户端等命令行常用的工具。使用下面的命令安装：\n1 xcode-select --install 安装Oh My Zsh 参照 Oh My ZSH! 的官方文档进行安装。\n1 2 3 4 5 #确认zsh版本 zsh --version #执行安装 sh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 如出现连接问题，请在终端设置科学上网。\n1 export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890 安装和配置 Powerlevel10k powerlevel10k 是一个Zsh的主题，具体很强的灵活性，并且非常美观。\n首先安装 Powerlevel10k 所推荐的字体 Meslo Nerd Font，可以在命令行终端显示一些特殊符号。下载并安装下列字体：\nMesloLGS NF Regular.ttf MesloLGS NF Bold.ttf MesloLGS NF Italic.ttf MesloLGS NF Bold Italic.ttf 然后更改终端的字体，在终端的偏好设置的的描述文件中，选择我们使用的 Pro，设置字体为MesloLGS NF， 字体大小为 14。\n由于我们使用的是Oh My Zsh，可以把Powerlevel10k作为一个主题，安装到Oh My Zsh中：\n1 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k 如果遇到网络问题，可以参考上面，设置终端科学上网代理。\n编辑Oh My Zsh 的配置文件 ~/.zshrc，设置主题为Powerlevel10k\n1 ZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; 重新开启终端，按照提示进行Powerlevel10k的样式配置，完成后，我们漂亮的命令行终端配置就大功告成了。\n如果你在使用VSCode，需要在配置文件settings.json中设置下面两个配置，你就可以让VSCode的终端同样适配Powerlevel10k。\n1 2 \u0026#34;terminal.integrated.fontSize\u0026#34;: 14, \u0026#34;terminal.integrated.fontFamily\u0026#34;: \u0026#34;MesloLGS NF\u0026#34; 安装 zsh-autosuggestions 插件 Oh My Zsh在安装完成后，已经自动配置了git插件。为了在命令行终端更快捷的工作，还可以为Oh My Zsh安装zsh-autosuggestions 插件。\nzsh-autosuggestions 提供类似于Fish shell 自动建议功能，它会根据历史记录，在你键入命令的时候，提供非侵入式的自动建议。\n安装zsh-autosuggestions 的命令：\n1 git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions 在 ~/.zshrc 中配置插件：\n1 plugins=(git zsh-autosuggestions) 在键入命令时，会有灰色的提示信息，按 → 或 ctrl-f 自动完成。是不是非常方便，用过后就完全离不开了。\n命令别名配置 使用命令行操作非常快速便捷，但有时候你不知道命令具体干了什么，例如我输入的 rm *到底删除了哪些文件。\n其实这些命令都有参数，详细的输出该命令影响的文件。但每次都输入这些参数实在太麻烦，我们可以在 Zsh 的配置文件 ~/.zshrc 中为这些命令设置别名：\n1 2 3 4 5 alias mkdir=\u0026#39;mkdir -v\u0026#39; alias mv=\u0026#39;mv -v\u0026#39; alias cp=\u0026#39;cp -v\u0026#39; alias rm=\u0026#39;rm -v\u0026#39; alias ln=\u0026#39;ln -v\u0026#39; ","date":"2022-07-23T15:26:12+08:00","permalink":"https://mahaoliang.tech/p/%E6%89%93%E9%80%A0%E4%B8%80%E4%B8%AA%E6%BC%82%E4%BA%AE%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF/","title":"打造一个漂亮的命令行终端"},{"content":"拿到一台新的MacBook，总是要经过一些设置才能让它变得顺手好用。这些配置也许对你也有启发和帮助。\n触控板设置 单指轻点代表单击。拿到MacBook第一个要设置的，对它轻柔一些，单击毫不费力 四指左右轻扫，桌面间切换 四指向上，进入调度中心。“调度中心”提供了一个鸟瞰图，平铺了所有应用的窗口、桌面空间，可以轻松地在它们之间切换。 点击右上角“+”号可以创建新桌面。 四指向下，App Expose，查看正在使用的 App 的所有窗口。 设置三指拖移：苹果菜单  \u0026gt; “系统偏好设置” \u0026gt; “辅助功能” \u0026gt; “指针控制” \u0026gt; “触控板选项” \u0026gt; “启用拖移”，然后从菜单中选取“三指拖移”。 词典配置 在触控板设置中，勾选“三指轻点”触发查询与数据检查器。\n在词典应用的偏好设置中，除了缺省选择的词典，建议增加勾选一个英英词典。用英语解释英语单词，就想我们查汉语词典一样，是一种更地道的学习英语方式。\n在任何应用中，都可以通过“三指轻点”，触发词典。因为是系统原生支持，体验丝滑顺畅。\n原生词典方便好用，但是没有单词本功能。网上找到一种利用“自动操作”生成单词本的方法，可以尝试。\n系统偏好设置 滚动条设置\n始终显示滚动条 跳至点按的位置 触发脚设置\n右下角显示桌面 左上角屏幕保护。在安全和隐私中设置：进入屏幕保护后立即要求输入密码。这样既是屏保又可以锁屏 移除Dock上大部分可以用Spotlight唤出的应用。\n设置Dock自动隐藏，扩大桌面可用区域。\nF1~F12 保持缺省设置，作为特殊功能键。如果需要使用F1~F12的标准功能，需要配合fn\n关闭英文自动补全。系统偏好设置 \u0026gt; 键盘 \u0026gt; 文本 \u0026gt; 取消自动纠正拼写。\n控制中心设置 为了节省菜单栏的空间，可以让不用的控制项只在控制中心显示，不在占用菜单栏，如蓝牙，隔空投送等。\nSpotlight 可以用快捷键呼出，不用在菜单栏显示。\n时间可以用24小时制，缩短占用的菜单栏。\n按住 Cmd 键，可以用指针拖动菜单栏图标，按你喜欢的顺序排列。\nFinder 设置 Finder 中的“个人收藏”可以偏好设置中进行定制，可以把常用的文件夹拖到个人收藏 Finder 的四种显示模式，个人喜欢分栏模式 可自定义 Finder 工具栏 显示路径栏 网络设置 为系统设置DNS，选择可靠DNS服务：\n阿里云 DNS 223.5.5.5 和 223.5.5.5。 腾讯云DNS 119.29.29.29 ","date":"2022-07-23T14:51:18+08:00","permalink":"https://mahaoliang.tech/p/macos%E7%9A%84%E7%B3%BB%E7%BB%9F%E5%BB%BA%E8%AE%AE%E8%AE%BE%E7%BD%AE/","title":"macOS的系统建议设置"}]