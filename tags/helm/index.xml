<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Helm on mahaoliang.tech</title>
        <link>https://mahaoliang.tech/tags/helm/</link>
        <description>Recent content in Helm on mahaoliang.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 29 Jun 2024 10:44:41 +0800</lastBuildDate><atom:link href="https://mahaoliang.tech/tags/helm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Helm 和 Helm chart Test 在 ARM 和 RISV-V 上的自动化测试</title>
        <link>https://mahaoliang.tech/p/helm-%E5%92%8C-helm-chart-test-%E5%9C%A8-arm-%E5%92%8C-risv-v-%E4%B8%8A%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Sat, 29 Jun 2024 10:44:41 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/helm-%E5%92%8C-helm-chart-test-%E5%9C%A8-arm-%E5%92%8C-risv-v-%E4%B8%8A%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;p&gt;本文是我参加&lt;a class=&#34;link&#34; href=&#34;https://opencamp.cn/EulixOS/camp/202401&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《第一期傲来操作系统（EulixOS）训练营》&lt;/a&gt;的项目实习报告。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://eulixos.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;傲来操作系统（EulixOS）&lt;/a&gt;是由中科院软件所 / 中科南京软件技术研究院团队基于 openEuler 打造的操作系统发行版。&lt;/p&gt;
&lt;h2 id=&#34;任务目标&#34;&gt;任务目标&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/helm&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Helm&lt;/a&gt; 是一个 &lt;code&gt;Kubernetes&lt;/code&gt; 的包管理工具，它可以帮助用户定义、安装和升级运行在 &lt;code&gt;Kubernetes&lt;/code&gt; 上的应用程序。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/chart-testing&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Helm chart test&lt;/a&gt; 是一个用于测试 &lt;code&gt;Helm&lt;/code&gt; 图表的 CLI 工具，用于测试 &lt;code&gt;Helm chart&lt;/code&gt; 的拉取请求，能自动检测与目标分支相比已经更改的 chart。&lt;/p&gt;
&lt;p&gt;本任务计划在 ARM 和 RISC-V 架构上运行 &lt;code&gt;Helm&lt;/code&gt; 和 &lt;code&gt;Helm chart Test&lt;/code&gt; 的测试，以此来对比这两种平台上云原生软件的成熟度。&lt;/p&gt;
&lt;h2 id=&#34;helm-的单元测试&#34;&gt;Helm 的单元测试&lt;/h2&gt;
&lt;p&gt;分析 Helm 的 &lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/helm/blob/main/Makefile&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Makefile&lt;/a&gt; 文件，发现 &lt;code&gt;test-unit&lt;/code&gt; 目标是用来运行单元测试的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;.PHONY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt;-&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;test-unit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	@echo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	@echo &lt;span class=&#34;s2&#34;&gt;&amp;#34;==&amp;gt; Running unit tests &amp;lt;==&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;GO111MODULE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;on go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;GOFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -run &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TESTS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;PKG&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;TESTFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看出，helm 的单元测试可以直接通过 &lt;code&gt;go test&lt;/code&gt; 命令来执行。&lt;/p&gt;
&lt;p&gt;查看 &lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/helm/blob/main/go.mod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go.mod&lt;/a&gt; 文件，确定该项目使用的 Go 版本是 1.22.0：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;module helm.sh/helm/v3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;go 1.22.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;require (
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	github.com/BurntSushi/toml v1.3.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;helm-chart-test-的单元测试&#34;&gt;Helm chart test 的单元测试&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Helm chart test&lt;/code&gt; 项目使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/chart-testing/blob/main/build.sh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;build.sh&lt;/a&gt; 脚本进行构建发布。分析 &lt;code&gt;build.sh&lt;/code&gt; 发现，在每次构建前，会使用 &lt;code&gt;go test -race ./...&lt;/code&gt; 运行单元测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;go &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -race ./...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;goreleaser &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;goreleaser_args&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[@]&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看&lt;a class=&#34;link&#34; href=&#34;https://github.com/helm/chart-testing/blob/main/go.mod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;go.mod&lt;/a&gt;文件，确定该项目使用的 Go 版本是 1.22.0：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;helm&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testing&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;go&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;1.22&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;toolchain&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;go1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;22.4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;自动化执行测试&#34;&gt;自动化执行测试&lt;/h2&gt;
&lt;p&gt;helm 和 helm chart test 的单元测试都可以直接通过 &lt;code&gt;go test&lt;/code&gt; 命令来执行。我们可以使用 bash 编写脚本使测试过程自动化。&lt;/p&gt;
&lt;p&gt;这个脚本的主要流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自动识别和配置：脚本首先检测硬件平台，然后自动下载并在测试目录下安装 Go，不干扰系统中的其他设置或版本。&lt;/li&gt;
&lt;li&gt;环境设置：配置必要的环境变量，确保测试在适当的环境下执行。&lt;/li&gt;
&lt;li&gt;代码仓库管理：自动从配置的 Git 仓库地址克隆代码到本地指定目录。&lt;/li&gt;
&lt;li&gt;测试执行：运行单元测试，并将结果输出到报告文件中。&lt;/li&gt;
&lt;li&gt;性能数据收集：通过调用 &lt;code&gt;performance_counter_920.sh&lt;/code&gt; 收集和记录测试期间的性能指标。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;为了避免网络环境对测试影响，脚本可以自定义配置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;GO_BASE_URL&lt;/code&gt; 定义 go 安装包下载网址&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;REPO_URL&lt;/code&gt; 定义项目源码仓库的地址。可以提前将项目从 GitHub 同步到 Gitee。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;GOPROXY&lt;/code&gt; 定义 Go 镜像地址。缺省设置为 &lt;code&gt;GOPROXY=https://goproxy.cn&lt;/code&gt;，从国内镜像下载 moudle。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，helm 在测试插件功能时，会访问 &lt;a class=&#34;link&#34; href=&#34;https://github.com/adamreese/helm-env&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/adamreese/helm-env&lt;/a&gt; 。由于网络环境问题，涉及的测试经常会失败。所以我将 helm-env 项目同步到了 gitee，并修改了测试案例 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/mahaoliang/helm/blob/02417b31ab70be386bb0a18045cbbca8dd9b8a8b/pkg/plugin/installer/vcs_installer_test.go&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;vcs_installer_test.go&lt;/a&gt;，让它从 gitee 下载插件，保证了测试运行的稳定。&lt;/p&gt;
&lt;p&gt;两个项目的自动化测试脚本都已经提交到了 gitee，分别为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gitee.com/mahaoliang/helm-test&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitee.com/mahaoliang/helm-test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://gitee.com/mahaoliang/helm-chart-test&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://gitee.com/mahaoliang/helm-chart-test&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;测试结果&#34;&gt;测试结果&lt;/h2&gt;
&lt;p&gt;下面是在 ARM 上运行的 helm 的测试结果。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; duration time: &lt;span class=&#34;m&#34;&gt;24558698523&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; task clock: 130738.640
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; cpu-cycles:   &lt;span class=&#34;m&#34;&gt;290310169669&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; instructions: &lt;span class=&#34;m&#34;&gt;269526073395&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; cache references: &lt;span class=&#34;m&#34;&gt;95029267023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; cache misses: &lt;span class=&#34;m&#34;&gt;764800123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; branches: &amp;lt;not
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; branch misses: &lt;span class=&#34;m&#34;&gt;647318994&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; L1 dcache loads: &lt;span class=&#34;m&#34;&gt;95029267023&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; L1 dcache load misses: &lt;span class=&#34;m&#34;&gt;764800123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; LLC load misses: &lt;span class=&#34;m&#34;&gt;480961351&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; LLC load: &lt;span class=&#34;m&#34;&gt;1156309818&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; IPC: 0.928
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helmrequiresearchfil.txt has been deleted
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Number of packages: &lt;span class=&#34;m&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Analyzing &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; results in /home/cloud2/helm-test/reports/20240628135442/test_result
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Total tests: &lt;span class=&#34;m&#34;&gt;1327&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Passed tests: &lt;span class=&#34;m&#34;&gt;1327&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Failed tests: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一共运行了 1327 个测试用例，全部通过。&lt;/p&gt;
&lt;p&gt;在 ARM 上运行的 helm chart test 的测试结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; duration time: &lt;span class=&#34;m&#34;&gt;704309016&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; task clock: 5337.880
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; cpu-cycles:   &lt;span class=&#34;m&#34;&gt;10071410187&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; instructions: &lt;span class=&#34;m&#34;&gt;8342502186&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; cache references: &lt;span class=&#34;m&#34;&gt;3300195194&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; cache misses: &lt;span class=&#34;m&#34;&gt;34476953&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; branches: &amp;lt;not
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; branch misses: &lt;span class=&#34;m&#34;&gt;39065962&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; L1 dcache loads: &lt;span class=&#34;m&#34;&gt;3300195194&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; L1 dcache load misses: &lt;span class=&#34;m&#34;&gt;34476953&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; LLC load misses: &lt;span class=&#34;m&#34;&gt;15971288&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; LLC load: &lt;span class=&#34;m&#34;&gt;50427439&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Avg &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;times&lt;/span&gt; IPC: 0.828
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Number of packages: &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Analyzing &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; results in /home/cloud2/helm-chart-test/reports/20240628140012/test_result
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Total tests: &lt;span class=&#34;m&#34;&gt;92&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Passed tests: &lt;span class=&#34;m&#34;&gt;92&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Failed tests: &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;一共运行了 92 个测试用例，全部通过。&lt;/p&gt;
&lt;p&gt;测试过程详细输出的原始文件如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cdn.mahaoliang.tech/2024/202507261057451&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;helm 的 go test 输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cdn.mahaoliang.tech/2024/202507261058094&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;helm 测试过程的 perf 统计指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cdn.mahaoliang.tech/2024/202507261058288&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;helm chart test 的 go test 输出&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cdn.mahaoliang.tech/2024/202507261059355&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;helm chart test 测试过程的 perf 统计指标&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;到测试截止时间，RISC-V 机器还未准备好，因此没有运行 RISC-V 架构的测试。不过我们已经提供了自动化测试脚本，可以直接在 RISC-V 架构的机器上运行，为后面在 RISC-V 上的测试做好了准备。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
