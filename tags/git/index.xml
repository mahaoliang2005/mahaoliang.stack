<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Git on mahaoliang.tech</title>
        <link>https://mahaoliang.tech/tags/git/</link>
        <description>Recent content in Git on mahaoliang.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 24 Aug 2025 16:26:32 +0800</lastBuildDate><atom:link href="https://mahaoliang.tech/tags/git/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>一份给开源新手的 GitHub 贡献流程指南</title>
        <link>https://mahaoliang.tech/p/%E4%B8%80%E4%BB%BD%E7%BB%99%E5%BC%80%E6%BA%90%E6%96%B0%E6%89%8B%E7%9A%84-github-%E8%B4%A1%E7%8C%AE%E6%B5%81%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sun, 24 Aug 2025 16:26:32 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/%E4%B8%80%E4%BB%BD%E7%BB%99%E5%BC%80%E6%BA%90%E6%96%B0%E6%89%8B%E7%9A%84-github-%E8%B4%A1%E7%8C%AE%E6%B5%81%E7%A8%8B%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;p&gt;作为一名开发者，参与开源是提升技术、建立个人影响力的有效途径。但很多人，包括曾经的我，在刚接触时都会被 GitHub 的协作流程搞得一头雾水。&lt;/p&gt;
&lt;p&gt;比如，什么是 &lt;code&gt;Fork&lt;/code&gt;？&lt;code&gt;Upstream&lt;/code&gt; 和 &lt;code&gt;Origin&lt;/code&gt; 又有什么区别？标准的贡献流程是怎样的？网上虽然有资料，但很少有一篇文章能为新手清晰地讲明白整个过程。&lt;/p&gt;
&lt;p&gt;今年我参加了“&lt;a class=&#34;link&#34; href=&#34;https://summer-ospp.ac.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开源之夏&lt;/a&gt;”活动，在为 openEuler 社区的 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/openeuler/splitter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;splitter&lt;/a&gt; 项目提交 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/openeuler/splitter/pulls/19&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PR&lt;/a&gt; 的过程中，才算真正搞清楚完整的流程。因为自己经历过初期的困惑，所以决定把这个过程完整地记录下来，形成一篇能直接上手操作的指南。&lt;/p&gt;
&lt;p&gt;这篇文章的目的很明确：就是为那些想参与开源但对流程不熟悉的开发者，提供一份清晰、实用的操作手册。希望这篇总结能帮你扫清障碍，顺利迈出开源贡献的第一步。下面我们正式开始。&lt;/p&gt;
&lt;h2 id=&#34;核心概念解析&#34;&gt;核心概念解析&lt;/h2&gt;
&lt;p&gt;在动手操作之前，我们必须先理解几个关键的名词。搞清楚它们之间的关系，是顺利完成后续所有步骤的基础。&lt;/p&gt;
&lt;h3 id=&#34;git-基础概念回顾&#34;&gt;Git 基础概念回顾&lt;/h3&gt;
&lt;p&gt;首先，你需要对 Git 本身的工作流程有一个基本了解。下面这张图很经典地展示了 Git 的核心区域和操作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241656520.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;git&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;简单来说，你的日常工作就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;strong&gt;Workspace (工作区)&lt;/strong&gt; 修改代码。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;git add&lt;/code&gt; 将修改内容暂存到 &lt;strong&gt;Index (暂存区)&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;git commit&lt;/code&gt; 将暂存区的内容提交到本地 &lt;strong&gt;Repository (仓库)&lt;/strong&gt;，形成一个版本记录。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;git push&lt;/code&gt; 将本地仓库的提交推送到 &lt;strong&gt;Remote (远程仓库)&lt;/strong&gt;，比如 GitHub。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;git pull&lt;/code&gt; 或 &lt;code&gt;git fetch&lt;/code&gt; 从远程仓库拉取更新。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于这些基础命令的详细用法，阮一峰老师&lt;a class=&#34;link&#34; href=&#34;https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;《常用 Git 命令清单》&lt;/a&gt;已经总结得非常全面，是很好的速查手册，本文不再赘述。&lt;/p&gt;
&lt;h3 id=&#34;github-开源协作的概念&#34;&gt;GitHub 开源协作的概念&lt;/h3&gt;
&lt;p&gt;上面提到的模型只涉及一个本地仓库和一个远程仓库。但在开源协作中，通常会涉及&lt;strong&gt;三个仓库&lt;/strong&gt;。下面这张图清晰地展示了它们的关系，这也是本节的重点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241704135.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;github&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;让我们结合这张图，来理解几个最重要的概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Upstream (上游仓库)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;是什么&lt;/strong&gt;：图中左上角的 &amp;ldquo;GitHub - Original&amp;rdquo;，也就是你想要贡献代码的那个&lt;strong&gt;原始开源项目仓库&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;你的权限&lt;/strong&gt;：你通常没有直接往这里 &lt;code&gt;push&lt;/code&gt; 代码的权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fork (你的个人复刻)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;是什么&lt;/strong&gt;：图中右上角的 &amp;ldquo;GitHub - Fork&amp;rdquo;。这是你通过在原始项目页面上点击 &amp;ldquo;Fork&amp;rdquo; 按钮，在&lt;strong&gt;你自己的 GitHub 账号下创建的一个完整的项目副本&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;你的权限&lt;/strong&gt;：因为这个仓库在你的名下，所以你拥有全部的读写权限，可以随意 &lt;code&gt;push&lt;/code&gt; 代码。这是你为开源项目贡献代码的“大本营”和“实验区”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;origin (你的远程仓库)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;是什么&lt;/strong&gt;：简单来说，&lt;code&gt;origin&lt;/code&gt; 是 Git 为你克隆的那个远程仓库地址起的一个&lt;strong&gt;默认别名&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;如何创建&lt;/strong&gt;：当你从 GitHub 克隆你的 Fork 仓库时，通过执行 &lt;code&gt;git clone [URL of YOUR FORK]&lt;/code&gt; 这个命令，Git 会在你的本地仓库中&lt;strong&gt;自动创建&lt;/strong&gt;这个名为 &lt;code&gt;origin&lt;/code&gt; 的别名。你不需要任何手动设置。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指向哪里&lt;/strong&gt;：在我们的协作流程中，&lt;code&gt;origin&lt;/code&gt; 这个别名指向的就是&lt;strong&gt;你自己的 Fork 仓库&lt;/strong&gt; (也就是图右上角的 &amp;ldquo;GitHub - Fork&amp;rdquo;)。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：它是你 &lt;code&gt;push&lt;/code&gt; 本地代码时的默认目标。当你执行 &lt;code&gt;git push&lt;/code&gt; 时，你的代码变更就是通过 &lt;code&gt;origin&lt;/code&gt; 这个别名，被推送到你自己的 Fork 仓库中。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;upstream vs. origin 的关系&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;origin&lt;/code&gt;&lt;/strong&gt; 指向你自己的 Fork，是你&lt;strong&gt;推送 (push) 代码&lt;/strong&gt;的地方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;upstream&lt;/code&gt;&lt;/strong&gt; 指向原始项目仓库，是你 &lt;strong&gt;同步最新代码 (fetch)&lt;/strong&gt; 的地方。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键点&lt;/strong&gt;：&lt;code&gt;origin&lt;/code&gt; 是克隆时自动生成的，而 &lt;code&gt;upstream&lt;/code&gt; 是需要我们&lt;strong&gt;手动添加&lt;/strong&gt;的。这一步至关重要，它建立了你的本地仓库和原始项目之间的连接，让你能够随时获取项目的最新进展。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pull Request (PR - 合并请求)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;是什么&lt;/strong&gt;：当你觉得在自己 Fork 里的代码已经准备好，可以贡献给原始项目时，你就可以在 GitHub 上发起一个 Pull Request。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;作用&lt;/strong&gt;：这是一个正式的请求，请求 &lt;code&gt;Upstream&lt;/code&gt; (原始项目) 的维护者，把你 Fork 里的代码变更拉取 (Pull) 到他们的仓库中。这也是代码审查 (Code Review)、讨论和最终合并的地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;总结一下&lt;/strong&gt;，整个流程的数据流是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始化：从 &lt;code&gt;origin&lt;/code&gt; 到本地&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你首先 &lt;code&gt;clone&lt;/code&gt; 的是你自己的 Fork 仓库 (&lt;code&gt;origin&lt;/code&gt;)，把代码从你的 GitHub 仓库复制到本地电脑。这是你建立本地工作环境的第一步。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;开发与同步：&lt;code&gt;upstream&lt;/code&gt; -&amp;gt; 本地 -&amp;gt; &lt;code&gt;origin&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个阶段是循环往复的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;获取更新&lt;/strong&gt;：你需要定期从 &lt;code&gt;upstream&lt;/code&gt; (原始项目) &lt;code&gt;fetch&lt;/code&gt; 或 &lt;code&gt;rebase&lt;/code&gt; 最新的代码到本地，确保你的工作是基于最新版本。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;推送你的贡献&lt;/strong&gt;：在本地开发完成后，你把代码 &lt;code&gt;push&lt;/code&gt; 到 &lt;code&gt;origin&lt;/code&gt; (你自己的 Fork)。你的代码变更只会上传到你自己的远程仓库里。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提交贡献：从 &lt;code&gt;origin&lt;/code&gt; 到 &lt;code&gt;upstream&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后，你通过在 GitHub 上创建一个 Pull Request，请求 &lt;code&gt;upstream&lt;/code&gt; (原始项目) 的维护者，来审核并合并你 &lt;code&gt;origin&lt;/code&gt; (你的 Fork) 里的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个流程确保了你的所有修改都在自己的“地盘”上进行，既不会影响到原始项目，又能随时与原始项目保持同步，并最终通过 PR 的方式发起贡献。&lt;/p&gt;
&lt;p&gt;理解了这三个仓库和它们之间的关系，我们就已经扫清了最大的障碍。接下来，我们将进入实战环节。&lt;/p&gt;
&lt;h2 id=&#34;首次贡献实战演练&#34;&gt;首次贡献实战演练&lt;/h2&gt;
&lt;p&gt;理论知识已经储备完毕，现在让我们卷起袖子，完整地走一遍实际的贡献流程。我们会模拟为一个名为 &lt;code&gt;project-name&lt;/code&gt; 的开源项目贡献代码。&lt;/p&gt;
&lt;h3 id=&#34;step-1-fork---拥有你自己的副本&#34;&gt;Step 1: Fork - 拥有你自己的副本&lt;/h3&gt;
&lt;p&gt;首先，你需要进入 &lt;code&gt;project-name&lt;/code&gt; 的 GitHub 主页。在页面的右上角，你会看到一个 &amp;ldquo;Fork&amp;rdquo; 按钮。点击它，GitHub 就会在你的个人账号下创建一个该项目的完整副本。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241744175.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;fork&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;完成后，你的 GitHub 主页上就会出现一个 &lt;code&gt;your-username/project-name&lt;/code&gt; 的仓库。这就是你的个人复刻 (Fork)。&lt;/p&gt;
&lt;h3 id=&#34;step-2-clone---将代码克隆到本地&#34;&gt;Step 2: Clone - 将代码克隆到本地&lt;/h3&gt;
&lt;p&gt;现在，你需要把你 Fork 的仓库克隆到你的电脑上进行开发。&lt;/p&gt;
&lt;p&gt;进入你刚刚创建的 &lt;code&gt;your-username/project-name&lt;/code&gt; 仓库页面，点击绿色的 &amp;ldquo;Code&amp;rdquo; 按钮，复制 HTTPS 或 SSH 链接。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241745385.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;clone&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;然后，在你的电脑终端中执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 确保将 YOUR-USERNAME 替换为你的 GitHub 用户名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/YOUR-USERNAME/project-name.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：这里克隆的是&lt;strong&gt;你自己的 Fork 仓库地址&lt;/strong&gt;，而不是原始项目的地址。这是非常关键的一步。&lt;/p&gt;
&lt;h3 id=&#34;step-3-配置-upstream建立与上游的连接&#34;&gt;Step 3: 配置 upstream，建立与上游的连接&lt;/h3&gt;
&lt;p&gt;为了能够随时获取原始项目的更新，我们需要在本地配置一个指向上游仓库 (&lt;code&gt;upstream&lt;/code&gt;) 的远程地址。&lt;/p&gt;
&lt;p&gt;首先，进入项目目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; project-name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后，添加 &lt;code&gt;upstream&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将 URL 替换为原始开源项目的 URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add upstream https://github.com/original-owner/project-name.git
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们可以用 &lt;code&gt;git remote -v&lt;/code&gt; 命令来检查是否配置成功。你应该能看到类似下面的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin    https://github.com/YOUR-USERNAME/project-name.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;origin    https://github.com/YOUR-USERNAME/project-name.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;upstream  https://github.com/original-owner/project-name.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;fetch&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;upstream  https://github.com/original-owner/project-name.git &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;push&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;看到 &lt;code&gt;origin&lt;/code&gt; 和 &lt;code&gt;upstream&lt;/code&gt; 同时存在，就说明配置成功了。&lt;/p&gt;
&lt;h3 id=&#34;step-4-创建特性分支&#34;&gt;Step 4: 创建特性分支&lt;/h3&gt;
&lt;p&gt;在开始写代码之前，一个最佳实践是为你的新功能或修复创建一个独立的分支。这能确保你的 &lt;code&gt;master&lt;/code&gt; 分支保持干净，并与上游项目同步。&lt;/p&gt;
&lt;p&gt;首先，确保你的本地 &lt;code&gt;master&lt;/code&gt; 分支是最新的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后，从最新的 &lt;code&gt;master&lt;/code&gt; 分支上创建一个新分支：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 把 my-feature-branch 换成一个有意义的名字，比如 fix-login-bug&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b my-feature-branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在，你就可以在这个新分支上安全地进行开发了。&lt;/p&gt;
&lt;h3 id=&#34;step-5-开发与提交&#34;&gt;Step 5: 开发与提交&lt;/h3&gt;
&lt;p&gt;在这个分支上，你可以自由地修改代码、添加新文件、修复 Bug。完成一个阶段性的工作后，就进行一次 &lt;code&gt;commit&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 添加你的修改到暂存区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 提交你的修改，并写下清晰的提交信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;feat: Implement user profile page&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;step-6-保持同步与上游代码对齐-可选但重要&#34;&gt;Step 6: 保持同步，与上游代码对齐 (可选但重要)&lt;/h3&gt;
&lt;p&gt;如果你的开发周期比较长，在你开发期间，&lt;code&gt;upstream&lt;/code&gt; 可能已经合并了其他人的代码。为了避免提交 PR 时产生冲突，建议在推送前，先同步一次上游的最新代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;rebase&lt;/code&gt; 可以让你的提交历史保持一条直线，看起来更整洁。如果遇到冲突，你需要先解决冲突，然后继续 &lt;code&gt;rebase&lt;/code&gt; 过程。&lt;/p&gt;
&lt;h3 id=&#34;step-7-推送将变更推送到你的-fork&#34;&gt;Step 7: 推送，将变更推送到你的 Fork&lt;/h3&gt;
&lt;p&gt;当你在本地完成开发和提交后，就可以把你的特性分支推送到你自己的 Fork 仓库 (&lt;code&gt;origin&lt;/code&gt;) 了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push --set-upstream origin my-feature-branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;--set-upstream&lt;/code&gt; 参数只需要在第一次推送这个分支时使用，它会告诉 Git 你的本地分支 &lt;code&gt;my-feature-branch&lt;/code&gt; 对应远程仓库 &lt;code&gt;origin&lt;/code&gt; 的同名分支。&lt;/p&gt;
&lt;h3 id=&#34;step-8-创建-pull-request&#34;&gt;Step 8: 创建 Pull Request&lt;/h3&gt;
&lt;p&gt;推送成功后，现在回到你在 GitHub 上的 Fork 仓库页面。通常，GitHub 会自动检测到你推送了新的分支，并显示一个黄色的提示条，让你方便地创建 Pull Request。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241756895.webp&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;PR&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;点击 &amp;ldquo;Compare &amp;amp; Pull Request&amp;rdquo; 按钮，你会进入 PR 创建页面。在这里，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;填写一个清晰的标题&lt;/strong&gt;：简明扼要地说明这个 PR 的作用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;撰写详细的描述&lt;/strong&gt;：解释你为什么要进行这些修改，解决了什么问题，以及你是如何实现的。如果项目有 PR 模板，请务必按照模板填写。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;确认无误后，点击 &amp;ldquo;Create pull request&amp;rdquo;。恭喜你，你的第一个 PR 已经成功提交了！&lt;/p&gt;
&lt;h3 id=&#34;step-9-响应代码审查-code-review&#34;&gt;Step 9: 响应代码审查 (Code Review)&lt;/h3&gt;
&lt;p&gt;提交 PR 只是开始，接下来你需要和项目维护者进行互动。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;维护者留下评论&lt;/strong&gt;：项目维护者会审查你的代码，并在可能有问题的地方留下评论 (Comment)。你会在 GitHub PR 页面和邮件中收到通知。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241800186.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;comment&#34;
	
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;回复与讨论&lt;/strong&gt;：对于每一条评论，你都应该进行回复。如果同意修改，可以简单回复“好的，马上修改”；如果不理解或有不同意见，可以在评论区进行礼貌的讨论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改代码并再次提交&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;回到你的本地电脑，确保你还在之前的 &lt;code&gt;my-feature-branch&lt;/code&gt; 分支上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据讨论结果，直接修改代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改完成后，创建一个新的 &lt;code&gt;commit&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;fix: Address review comments from maintainer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重要&lt;/strong&gt;：修改完成后，直接将新的提交推送到你的分支：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin my-feature-branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你&lt;strong&gt;不需要&lt;/strong&gt;重新创建一个 PR。这次 &lt;code&gt;push&lt;/code&gt; 会自动更新你之前提交的那个 PR。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决对话 (Resolve Conversation)&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;当你认为你已经解决了某一条评论中的问题后，回到 PR 页面，找到对应的评论，点击 &amp;ldquo;&lt;strong&gt;Resolve conversation&lt;/strong&gt;&amp;rdquo; 按钮。这是一种礼貌的表示，告诉维护者这个问题你已经处理完毕，方便他们再次审查。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个修改 -&amp;gt; 推送 -&amp;gt; 解决对话的循环可能会进行多次，直到所有问题都得到解决。&lt;/p&gt;
&lt;h3 id=&#34;step-10-合并&#34;&gt;Step 10: 合并&lt;/h3&gt;
&lt;p&gt;当你的代码通过了所有审查，维护者就会点击 &amp;ldquo;Merge pull request&amp;rdquo; 按钮，将你的代码合并到主项目中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202508241810964.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;merged&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;至此，你的代码就正式成为了开源项目的一部分！你可以在项目的贡献者名单中看到自己的名字，这是对你辛勤付出的最好回报。&lt;/p&gt;
&lt;h2 id=&#34;保持更新如何为下一次贡献做准备&#34;&gt;保持更新，如何为下一次贡献做准备&lt;/h2&gt;
&lt;p&gt;恭喜你！在完成了一次 PR 合并后，你已经是一位正式的开源贡献者了。但工作还没结束。为了能方便地进行下一次贡献，你需要学会如何让你的 Fork 仓库与原始项目保持同步。&lt;/p&gt;
&lt;h3 id=&#34;为什么需要同步你的-fork&#34;&gt;为什么需要同步你的 Fork&lt;/h3&gt;
&lt;p&gt;在你完成一次贡献后，原始项目（&lt;code&gt;upstream&lt;/code&gt;）的 &lt;code&gt;master&lt;/code&gt; 分支因为合并了你的 PR 和其他人的代码，已经向前更新了。而你自己的 Fork 和本地仓库的 &lt;code&gt;master&lt;/code&gt; 分支，还停留在你开始工作时的旧位置。&lt;/p&gt;
&lt;p&gt;如果你不进行同步，直接从一个过时的 &lt;code&gt;master&lt;/code&gt; 分支上创建新分支进行开发，那么在提交下一次 PR 时，几乎必然会遇到大量的代码冲突，给自己和项目维护者都带来不必要的麻烦。&lt;/p&gt;
&lt;p&gt;因此，&lt;strong&gt;在开始下一次贡献前，保持你的 &lt;code&gt;master&lt;/code&gt; 分支与 &lt;code&gt;upstream&lt;/code&gt; 完全同步，是一个至关重要的好习惯。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;两步完成同步&#34;&gt;两步完成同步&lt;/h3&gt;
&lt;p&gt;整个同步过程非常简单，可以分为两步：先更新本地，再更新你的远程 Fork。&lt;/p&gt;
&lt;h4 id=&#34;第一步更新你的本地仓库&#34;&gt;第一步：更新你的本地仓库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;切换到主分支&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，确保你回到了 &lt;code&gt;master&lt;/code&gt; 分支。所有同步操作都应该在 &lt;code&gt;master&lt;/code&gt; 分支上进行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;从上游拉取最新变更&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个命令会从原始项目（&lt;code&gt;upstream&lt;/code&gt;）下载最新的代码历史，但&lt;strong&gt;不会&lt;/strong&gt;自动修改你本地的任何文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将本地 master 同步到上游 master&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这步是关键。它会以 &lt;code&gt;upstream/master&lt;/code&gt; 的最新版本为基础，来更新你本地的 &lt;code&gt;master&lt;/code&gt; 分支。执行后，你的本地 &lt;code&gt;master&lt;/code&gt; 分支就和原始项目的 &lt;code&gt;master&lt;/code&gt; 分支完全一致了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在，你的本地 &lt;code&gt;master&lt;/code&gt; 分支已经是最新版本了。&lt;/p&gt;
&lt;h4 id=&#34;第二步更新你在-github-上的-fork&#34;&gt;第二步：更新你在 GitHub 上的 Fork&lt;/h4&gt;
&lt;p&gt;你的本地 &lt;code&gt;master&lt;/code&gt; 是最新的了，但你 GitHub 上的 Fork (&lt;code&gt;origin&lt;/code&gt;) 还停留在旧版本。我们需要把本地的更新推送到 &lt;code&gt;origin&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行这个命令后，你 GitHub 上的 Fork 仓库的 &lt;code&gt;master&lt;/code&gt; 分支也会被更新到最新状态。&lt;/p&gt;
&lt;h3 id=&#34;小结&#34;&gt;小结&lt;/h3&gt;
&lt;p&gt;现在，你的&lt;strong&gt;本地仓库&lt;/strong&gt;和 &lt;strong&gt;GitHub 上的 Fork&lt;/strong&gt; 都和上游项目完全同步了。&lt;/p&gt;
&lt;p&gt;你可以安心地从这个干净、最新的 &lt;code&gt;master&lt;/code&gt; 分支上，通过 &lt;code&gt;git checkout -b new-feature&lt;/code&gt; 创建新的特性分支，开始你的下一次贡献了。&lt;/p&gt;
&lt;p&gt;记住这个流程：&lt;strong&gt;每次开始新工作前，先同步 &lt;code&gt;master&lt;/code&gt; 分支&lt;/strong&gt;。这将让你的开源贡献之路更加顺畅。&lt;/p&gt;
&lt;h2 id=&#34;常用命令速查清单-cheat-sheet&#34;&gt;常用命令速查清单 (Cheat Sheet)&lt;/h2&gt;
&lt;p&gt;在熟悉了整个流程后，你不需要每次都回头阅读长篇的文字。这份速查清单总结了在不同阶段最核心的命令，你可以把它当作日常贡献时的“小抄”。&lt;/p&gt;
&lt;h3 id=&#34;首次设置-为一个新项目贡献时仅需一次&#34;&gt;首次设置 (为一个新项目贡献时，仅需一次)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 克隆你自己的 Fork 仓库到本地&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;URL of YOUR FORK&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入项目目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;project-name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 添加原始项目仓库为 upstream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add upstream &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;URL of ORIGINAL REPO&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 验证远程仓库设置是否成功&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;一个完整的开发周期&#34;&gt;一个完整的开发周期&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# === 准备阶段 ===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 切换到主分支&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 与上游 master 分支保持同步&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 从最新的 master 分支创建你的特性分支&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -b &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;my-new-feature-branch&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# === 开发阶段 ===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ... 在这里进行代码的修改、添加、删除 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 添加变更到暂存区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 提交变更&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;feat: Add a new amazing feature&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# === 提交阶段 ===&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. (可选但推荐) 在推送前，再次与上游同步，避免冲突&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 将你的分支推送到你自己的 Fork 仓库 (origin)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 第一次推送时使用 --set-upstream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push --set-upstream origin &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;my-new-feature-branch&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;推送完成后，去 GitHub 页面创建 Pull Request。&lt;/p&gt;
&lt;h3 id=&#34;响应代码审查-review-后修改代码&#34;&gt;响应代码审查 (Review 后修改代码)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 确保你还在你的特性分支上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ... 直接修改代码 ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 提交你的修改&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;fix: Address review comments&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 再次推送到你的分支，PR会自动更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;my-new-feature-branch&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;贡献完成后保持-fork-更新-为下一次贡献做准备&#34;&gt;贡献完成后，保持 Fork 更新 (为下一次贡献做准备)&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 切换到主分支&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 拉取上游的最新代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch upstream
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 将本地 master 更新到最新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git rebase upstream/master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4. 将这个最新的 master 分支推送到你自己的 Fork，使其在 GitHub 上也保持最新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push origin master
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;结语&#34;&gt;结语&lt;/h2&gt;
&lt;p&gt;到这里，我们已经完整地走完了在 GitHub 上参与一个开源项目的全过程：从理解 Fork、Upstream 这些核心概念，到一步步创建分支、提交代码、发起 Pull Request，再到如何与维护者互动以及如何为下一次贡献保持仓库同步。&lt;/p&gt;
&lt;p&gt;其实，整个流程可以被总结为一条清晰的路径：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fork -&amp;gt; Clone -&amp;gt; Branch -&amp;gt; Develop -&amp;gt; Push -&amp;gt; PR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开源贡献的流程并不复杂，最重要的，是勇敢地迈出第一步。&lt;/p&gt;
&lt;p&gt;希望这篇文章能成为你开启开源之旅的得力助手。现在，就去寻找一个你感兴趣的项目，提交你的第一个 PR 吧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用 1Password 和 SSH Agent Forwarding 提升远程开发体验</title>
        <link>https://mahaoliang.tech/p/%E4%BD%BF%E7%94%A8-1password-%E5%92%8C-ssh-agent-forwarding-%E6%8F%90%E5%8D%87%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C/</link>
        <pubDate>Tue, 29 Jul 2025 21:05:21 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/%E4%BD%BF%E7%94%A8-1password-%E5%92%8C-ssh-agent-forwarding-%E6%8F%90%E5%8D%87%E8%BF%9C%E7%A8%8B%E5%BC%80%E5%8F%91%E4%BD%93%E9%AA%8C/</guid>
        <description>&lt;p&gt;作为开发者，我们经常需要通过 SSH 连接到远程 Linux 服务器进行开发。工具如 VS Code 的 Remote-SSH 插件，让我们几乎感觉不到自己是在一台远程机器上工作。但一个常见的痛点随之而来：&lt;strong&gt;SSH 密钥管理&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;我们希望：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用 SSH 密钥登录服务器，并向 Git 仓库（如 GitHub）推送代码。&lt;/li&gt;
&lt;li&gt;对每一次 Git 提交进行签名，以验证提交的来源。&lt;/li&gt;
&lt;li&gt;最重要的一点：&lt;strong&gt;不希望将包含私钥的任何文件拷贝到远程服务器上&lt;/strong&gt;，以防服务器被入侵导致私钥泄露。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;幸运的是，通过 1Password 内置的 SSH Agent 和 SSH Agent Forwarding 技术，我们可以完美地解决这个问题。本文将带你一步步配置，实现安全、无缝的远程开发流程。&lt;/p&gt;
&lt;h2 id=&#34;核心概念简介&#34;&gt;核心概念简介&lt;/h2&gt;
&lt;p&gt;在开始之前，我们先简单了解几个关键概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH Agent (SSH 代理)&lt;/strong&gt;：它就像一个临时的密钥管理员。你可以在会话开始时，将解密的私钥（decrypted private key）加载到 Agent 中。之后，任何需要使用该密钥的 SSH 操作都会向 Agent 请求，而无需你反复输入密码。当你关闭终端会话时，Agent 也会随之关闭，密钥被安全地清除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1Password SSH Agent&lt;/strong&gt;：1Password 8 及以上版本内置了一个功能强大的 SSH Agent。它将你的 SSH 私钥安全地存储在 1Password 保管库中，并通过一个安全的套接字文件（socket file）与你的系统交互。这意味着你的私钥永远不会以明文形式存在于磁盘上，所有使用请求都需要经过 1Password 的授权（例如 Touch ID 或主密码）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SSH Agent Forwarding (SSH 代理转发)&lt;/strong&gt;：这是一个非常强大的 SSH 功能。当你从本地电脑 SSH 到远程服务器时，它可以建立一个安全通道，将远程服务器上需要密钥认证的操作请求，“转发”回你的&lt;strong&gt;本地电脑&lt;/strong&gt;，交由你本地的 SSH Agent 来处理。这样一来，远程服务器本身完全不需要存储任何私钥。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;我们的目标流程&#34;&gt;我们的目标流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;在本地电脑上，1Password 管理着我们的 SSH 私钥。&lt;/li&gt;
&lt;li&gt;通过 VS Code Remote-SSH 或终端连接到远程服务器，并启用 Agent Forwarding。&lt;/li&gt;
&lt;li&gt;在远程服务器上，执行 &lt;code&gt;git push&lt;/code&gt; 时，认证请求被转发回本地，由 1Password 处理。&lt;/li&gt;
&lt;li&gt;在远程服务器上，执行 &lt;code&gt;git commit&lt;/code&gt; 时，签名请求也被转发回本地，由 1Password 处理和授权。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;配置流程&#34;&gt;配置流程&lt;/h2&gt;
&lt;h3 id=&#34;前提条件&#34;&gt;前提条件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;你已经安装了 1Password 8 或更高版本的桌面客户端。&lt;/li&gt;
&lt;li&gt;你的 SSH 密钥已经创建并保存在 1Password 的 &lt;code&gt;SSH 密钥&lt;/code&gt; 分类中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;第一步配置本地电脑让-ssh-使用-1password&#34;&gt;第一步：配置本地电脑，让 SSH 使用 1Password&lt;/h3&gt;
&lt;p&gt;首先，我们需要告诉本地的 SSH 客户端，让它把所有密钥相关的请求都交给 1Password 处理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在 1Password 中启用 SSH Agent&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开 1Password 桌面应用。&lt;/li&gt;
&lt;li&gt;进入 &lt;code&gt;设置&lt;/code&gt; -&amp;gt; &lt;code&gt;开发者&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;勾选 &lt;code&gt;使用 SSH 代理&lt;/code&gt;。
&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202507292109013.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ssh agent&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置本地 SSH 配置文件 (&lt;code&gt;~/.ssh/config&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;参考 1password 的&lt;a class=&#34;link&#34; href=&#34;https://developer.1password.com/docs/ssh/get-started/#step-4-configure-your-ssh-or-git-client&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方文档&lt;/a&gt;，我们有两种方式告诉 SSH 客户端 Agent 在哪里：&lt;code&gt;IdentityAgent&lt;/code&gt; 指令和 &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; 环境变量。推荐使用 &lt;code&gt;IdentityAgent&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;编辑你&lt;strong&gt;本地电脑&lt;/strong&gt;上的 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件（如果不存在，请创建它）。在文件顶部添加以下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 告诉所有 SSH 连接 (*) 都使用 1Password 的 Agent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  IdentityAgent &lt;span class=&#34;s2&#34;&gt;&amp;#34;~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;验证配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;本地电脑&lt;/strong&gt;的终端里运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-add -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果配置成功，它会列出你在 1Password 中存储的所有 SSH 密钥的公钥指纹。这证明你的本地 SSH 客户端已经成功与 1Password 对接。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;第二步配置连接启用-agent-forwarding&#34;&gt;第二步：配置连接，启用 Agent Forwarding&lt;/h3&gt;
&lt;p&gt;现在，我们需要在连接到特定远程服务器时，启用 Agent Forwarding 功能。最佳实践依然是修改 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件。&lt;/p&gt;
&lt;p&gt;继续编辑你&lt;strong&gt;本地电脑&lt;/strong&gt;上的 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件，为你的服务器添加一个专有配置块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 给你的远程服务器起一个别名，方便连接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Host my-dev-server
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    HostName &amp;lt;your_server_ip_or_domain&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    User mahaoliang
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ForwardAgent yes   &lt;span class=&#34;c1&#34;&gt;# &amp;lt;-- 关键！启用 Agent Forwarding&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Host my-dev-server&lt;/code&gt;: 这是你连接时使用的快捷别名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HostName&lt;/code&gt;: 服务器的实际 IP 或域名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;User&lt;/code&gt;: 你在服务器上的用户名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ForwardAgent yes&lt;/code&gt;: 这就是开启 Agent Forwarding 的开关。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在，你可以通过 &lt;code&gt;ssh my-dev-server&lt;/code&gt; 或在 VS Code Remote-SSH 中直接连接到 &lt;code&gt;my-dev-server&lt;/code&gt;，转发功能会自动启用。&lt;/p&gt;
&lt;h3 id=&#34;第三步配置远程服务器上的-git&#34;&gt;第三步：配置远程服务器上的 Git&lt;/h3&gt;
&lt;p&gt;这是最后一步，也是最关键的一步。我们需要告诉远程服务器上的 Git，如何使用我们转发过来的 SSH Agent 进行提交签名。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;连接并验证转发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，连接到你的远程服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh my-dev-server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;连接成功后，在&lt;strong&gt;远程服务器&lt;/strong&gt;的终端上，再次运行验证命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-add -l
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果 Agent Forwarding 正常工作，这里显示的输出应该和你&lt;strong&gt;本地电脑&lt;/strong&gt;的输出&lt;strong&gt;完全一样&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;如果提示“Could not open a connection to your authentication agent.”，请检查 SSH 服务配置，确保 &lt;code&gt;AllowAgentForwarding yes&lt;/code&gt; 已启用。&lt;/p&gt;
&lt;p&gt;使用 vim 打开 &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; 文件，找到 &lt;code&gt;AllowAgentForwarding&lt;/code&gt; 配置项，设置为 &lt;code&gt;yes&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AllowAgentForwarding yes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;保存后重启 SSH 服务使配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;systemctl restart sshd
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再次连接你的远程服务器，执行 &lt;code&gt;ssh-add -l&lt;/code&gt;，确认 Agent Forwarding 正常工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;获取用于签名的公钥&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Git 需要知道用哪个具体的密钥来签名。我们需要提供完整的公钥字符串作为标识。在&lt;strong&gt;远程服务器&lt;/strong&gt;上运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-add -L
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会列出 Agent 中所有密钥的完整公钥。复制你想要用来签名的那一行，它看起来像这样：
&lt;code&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICxxxxxxxxxxxxxxxxxxxx your-key-comment&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置远程服务器的 &lt;code&gt;.gitconfig&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在，编辑你&lt;strong&gt;远程服务器&lt;/strong&gt;上的 &lt;code&gt;~/.gitconfig&lt;/code&gt; 文件。将你原来的配置更新如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[user]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;mahaoliang@gmail.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    name = mahaoliang
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    # 将 signingkey 的值设置为你上一步复制的完整公钥字符串
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s&#34;&gt;    signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICxxxxxxxxxxxxxxxxxxxx your-key-comment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[gpg]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 告诉 Git 使用 ssh 程序进行签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;format&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssh&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;[commit]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 让所有提交都默认进行签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;na&#34;&gt;gpgsign&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最重要的改动在于 &lt;code&gt;signingkey&lt;/code&gt;。我们不再使用一个文件路径，而是直接提供了公钥本身。这让 Git 可以直接向转发过来的 Agent 请求使用这个特定的密钥进行签名。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;大功告成来测试一下吧&#34;&gt;大功告成！来测试一下吧&lt;/h3&gt;
&lt;p&gt;一切准备就绪！在远程服务器上，进入你的任意一个 git 项目，尝试创建一个新提交：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit --allow-empty -m &lt;span class=&#34;s2&#34;&gt;&amp;#34;Test: Signed commit with 1Password Agent Forwarding&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此时，奇妙的事情发生了：你的&lt;strong&gt;本地电脑&lt;/strong&gt;上会弹出 1Password 的授权请求，提示你应用正在请求使用你的 SSH 密钥。通过 Touch ID 或输入主密码授权后，远程服务器上的 &lt;code&gt;git commit&lt;/code&gt; 命令瞬间完成。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202507292112652.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;ssh key&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;最后，检查一下你的提交日志：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log --show-signature -1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;你将会看到类似下面的输出，&lt;code&gt;Good signature&lt;/code&gt; 明确告诉你，这次提交已经由你的密钥成功签名！&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;commit &amp;lt;commit_hash&amp;gt; (HEAD -&amp;gt; main)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Good &amp;#34;git&amp;#34; signature for mahaoliang@gmail.com with ED25519 key SHA256:GKaU0ZCgehQ73X...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Author: mahaoliang &amp;lt;mahaoliang@gmail.com&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date:   ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    Test: Signed commit with 1Password Agent Forwarding
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;下图展示了使用 1Password 和 SSH Agent Forwarding 进行远程 Git 提交签名的核心流程。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202507301201877.svg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;flow&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图中组件&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;本地电脑 (Local)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发者&lt;/strong&gt;：操作的发起者。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1Password SSH Agent&lt;/strong&gt;：安全存储私钥，并处理所有签名请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH Client&lt;/strong&gt;：本地的 SSH 程序，配置为使用 1Password Agent 并启用转发。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;远程服务器 (Remote)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;远程终端&lt;/strong&gt;：开发者在服务器上的工作界面。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;：版本控制工具，配置为使用 SSH 进行签名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SSH Daemon&lt;/strong&gt;：服务器上的 SSH 服务，负责建立安全连接和转发请求。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;交互流程详解&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;发起提交&lt;/strong&gt;：开发者在&lt;strong&gt;远程终端&lt;/strong&gt;中执行 &lt;code&gt;git commit&lt;/code&gt; 命令。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求签名&lt;/strong&gt;：&lt;strong&gt;Git&lt;/strong&gt; 根据配置，向 SSH 服务请求使用密钥进行签名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;转发请求&lt;/strong&gt;：远程服务器的 &lt;strong&gt;SSH Daemon&lt;/strong&gt; 将签名请求通过加密的 SSH 隧道&lt;strong&gt;转发回&lt;/strong&gt;本地电脑的 &lt;strong&gt;SSH Client&lt;/strong&gt;。这是 Agent Forwarding 的核心。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求 1Password&lt;/strong&gt;：本地的 &lt;strong&gt;SSH Client&lt;/strong&gt; 将请求交给 &lt;strong&gt;1Password SSH Agent&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;请求用户授权&lt;/strong&gt;：&lt;strong&gt;1Password&lt;/strong&gt; 在本地电脑上弹出提示，向&lt;strong&gt;开发者&lt;/strong&gt;请求授权。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户授权&lt;/strong&gt;：&lt;strong&gt;开发者&lt;/strong&gt;在本地进行身份验证（如 Touch ID 或主密码）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回签名&lt;/strong&gt;：授权成功后，&lt;strong&gt;1Password&lt;/strong&gt; 生成签名并返回给本地 &lt;strong&gt;SSH Client&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回签名至远程&lt;/strong&gt;：签名通过 SSH 隧道被安全地&lt;strong&gt;传回&lt;/strong&gt;远程服务器的 &lt;strong&gt;SSH Daemon&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完成提交&lt;/strong&gt;：远程的 &lt;strong&gt;Git&lt;/strong&gt; 进程收到有效的签名，成功创建提交，并在&lt;strong&gt;远程终端&lt;/strong&gt;中显示成功信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过以上配置，我们构建了一个既安全又便捷的远程开发工作流。你的私钥始终安全地躺在本地的 1Password 保管库中，而远程服务器上的所有 Git 操作（认证和签名）都能够无缝、安全地使用它。这不仅提升了安全性，也大大简化了多服务器环境下的密钥管理，让你能更专注于编码本身。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
