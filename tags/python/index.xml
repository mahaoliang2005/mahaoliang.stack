<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Python on mahaoliang.tech</title>
        <link>https://mahaoliang.tech/tags/python/</link>
        <description>Recent content in Python on mahaoliang.tech</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 20 Jul 2025 18:39:02 +0800</lastBuildDate><atom:link href="https://mahaoliang.tech/tags/python/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>现代 Python 项目管理指南</title>
        <link>https://mahaoliang.tech/p/%E7%8E%B0%E4%BB%A3-python-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sun, 20 Jul 2025 18:39:02 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/%E7%8E%B0%E4%BB%A3-python-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;p&gt;在很长一段时间里，我管理 Python 项目的方式堪称“原始”。每当项目需要新的依赖，我便会在 &lt;code&gt;README.md&lt;/code&gt; 文件里手动记上一笔，提醒自己需要 &lt;code&gt;pip install&lt;/code&gt; 哪些库。这种“刀耕火种”的模式，对于个人写的一些小脚本尚可应付，但当项目变得复杂，或是需要与他人协作时，其脆弱和低效便暴露无遗。&lt;/p&gt;
&lt;p&gt;真正的转折点发生在今年夏天。我有幸参与了&lt;a class=&#34;link&#34; href=&#34;https://summer-ospp.ac.cn/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开源之夏&lt;/a&gt;，并成功中选了 openEuler 社区的 &lt;a class=&#34;link&#34; href=&#34;https://summer-ospp.ac.cn/org/prodetail/25b970448&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;面向 openEuler distroless 镜像的 SDF 自动生成工具开发&lt;/a&gt; 项目，为 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/openeuler/splitter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;splitter&lt;/a&gt; 这个工具贡献代码。当我满怀激情地克隆代码库，准备大展拳脚时，一个文件赫然出现在我的眼前：&lt;code&gt;pyproject.toml&lt;/code&gt;。这个我以往只是模糊听闻过的文件，在这里却是项目配置的核心。&lt;/p&gt;
&lt;p&gt;这次经历像一扇窗，让我窥见了现代 Python 项目管理的全新世界。于是，我将这段学习和探索的经历整理成文。&lt;/p&gt;
&lt;h2 id=&#34;传统方式venv--requirementstxt&#34;&gt;传统方式：&lt;code&gt;venv&lt;/code&gt; + &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;以 &lt;code&gt;venv&lt;/code&gt; 和 &lt;code&gt;requirements.txt&lt;/code&gt; 为核心的工作流，是 Python 社区在告别全局安装、走向规范化管理过程中迈出的重要一步。&lt;/p&gt;
&lt;h3 id=&#34;环境隔离与依赖列表&#34;&gt;环境隔离与依赖列表&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;虚拟环境 (&lt;code&gt;venv&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你经历过在系统全局 Python 环境中安装各种包的混乱时期，你一定对 &lt;strong&gt;“依赖地狱” (dependency hell)&lt;/strong&gt; 这个词深有体会。项目 A 需要 &lt;code&gt;requests==2.20.0&lt;/code&gt;，而项目 B 依赖的另一个库却需要 &lt;code&gt;requests==2.28.0&lt;/code&gt;，它们在全局环境中相互冲突，让开发者头痛不已。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; 的出现正是为了解决这个问题。它允许我们为每个项目创建一个独立的、与全局环境隔离的 Python 工作空间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在项目根目录下，创建一个名为 .venv 的虚拟环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 -m venv .venv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会创建一个 &lt;code&gt;.venv&lt;/code&gt; 文件夹，里面包含了项目所需的一个迷你的 Python 运行环境。要使用它，我们需要先“激活”：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;激活后，你会发现命令行提示符前面多了 &lt;code&gt;(.venv)&lt;/code&gt; 的标识。此时，所有 &lt;code&gt;pip&lt;/code&gt; 的安装、卸载操作都将被限制在这个独立的虚拟环境中，再也不会污染全局环境了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;依赖文件 (&lt;code&gt;requirements.txt&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;环境隔离了，但如何与他人协作呢？我们总不能把整个 &lt;code&gt;.venv&lt;/code&gt; 文件夹都发给别人吧。这时，&lt;code&gt;requirements.txt&lt;/code&gt; 就登上了历史舞台。它的作用，就是一份项目的“依赖清单”。&lt;/p&gt;
&lt;p&gt;最常见的生成方式是使用 &lt;code&gt;pip freeze&lt;/code&gt; 命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将当前虚拟环境中所有已安装的包及其精确版本号导出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样，你的项目协作者或者部署服务器，只需要拿到你的代码和这个 &lt;code&gt;requirements.txt&lt;/code&gt; 文件，然后执行一条简单的命令，就可以复现出一个一模一样的运行环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从 requirements.txt 文件中安装所有指定的依赖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这套组合拳极大地提升了 Python 项目的规范性和可复现性，至今仍有大量项目在使用。&lt;/p&gt;
&lt;h3 id=&#34;传统方式的隐患&#34;&gt;传统方式的隐患&lt;/h3&gt;
&lt;p&gt;尽管 &lt;code&gt;venv&lt;/code&gt; + &lt;code&gt;requirements.txt&lt;/code&gt; 解决了大问题，但随着项目复杂度的提升，其内在的缺陷也逐渐暴露出来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;依赖混淆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最大的问题在于 &lt;code&gt;pip freeze&lt;/code&gt; 的工作方式。它像一个不加分辨的记录员，会把你环境中&lt;strong&gt;所有&lt;/strong&gt;的包都记录下来。这其中既包含了你为了实现功能而主动安装的&lt;strong&gt;直接依赖&lt;/strong&gt;（比如 Web 框架 &lt;code&gt;Flask&lt;/code&gt;），也包含了 &lt;code&gt;Flask&lt;/code&gt; 运行所必需的&lt;strong&gt;间接依赖&lt;/strong&gt;（比如 &lt;code&gt;Werkzeug&lt;/code&gt;, &lt;code&gt;Jinja2&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt; 等）。&lt;/p&gt;
&lt;p&gt;最终生成的 &lt;code&gt;requirements.txt&lt;/code&gt; 文件看起来会是这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;blinker==1.7.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;click==8.1.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Flask==3.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;itsdangerous==2.1.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Jinja2==3.1.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MarkupSafe==2.1.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Werkzeug==3.0.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在这个文件里，你已经分不清谁是谁的依赖了。项目的核心依赖关系被模糊掉了，给后续的维护，比如升级某个特定的核心库，带来了不小的麻烦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;孤儿依赖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;另一个令人头疼的问题是“孤儿依赖”。假设你的项目后续不再需要 &lt;code&gt;Flask&lt;/code&gt; 了，于是你执行了 &lt;code&gt;pip uninstall flask&lt;/code&gt;。&lt;code&gt;pip&lt;/code&gt; 很听话地卸载了 &lt;code&gt;Flask&lt;/code&gt; 本身，但它当初为了 &lt;code&gt;Flask&lt;/code&gt; 而自动安装的 &lt;code&gt;blinker&lt;/code&gt;、&lt;code&gt;click&lt;/code&gt; 等间接依赖，却被遗留在了环境中，变成了无人认领的“孤儿”。&lt;/p&gt;
&lt;p&gt;日积月累，你的虚拟环境会因为这些残留的孤儿依赖而变得越来越臃肿，还可能在未来引发难以预料的依赖冲突。&lt;/p&gt;
&lt;p&gt;正是因为这些的缺陷，Python 社区开始探索一种更清晰、更智能的管理方案。这便引出了我们下一章的主角——&lt;code&gt;pyproject.toml&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;现代篇章pyprojecttoml&#34;&gt;现代篇章：&lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;面对 &lt;code&gt;requirements.txt&lt;/code&gt; 带来的依赖混淆问题，Python 社区需要一个更强大、更规范的解决方案，答案就是 &lt;code&gt;pyproject.toml&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&#34;标准的诞生-pep-518--621&#34;&gt;标准的诞生 (PEP 518 &amp;amp; 621)&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;pyproject.toml&lt;/code&gt; 成为标准之前，一个 Python 项目的配置信息可谓“四分五裂”。项目元数据可能在 &lt;code&gt;setup.py&lt;/code&gt; 或 &lt;code&gt;setup.cfg&lt;/code&gt; 里，运行依赖在 &lt;code&gt;requirements.txt&lt;/code&gt; 中，测试配置在 &lt;code&gt;tox.ini&lt;/code&gt; 或 &lt;code&gt;.coveragerc&lt;/code&gt; 里，代码格式化工具 &lt;code&gt;black&lt;/code&gt; 和静态检查工具 &lt;code&gt;mypy&lt;/code&gt; 又有它们各自的配置文件。这种碎片化的状态让项目维护变得异常繁琐。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://peps.python.org/pep-0518/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PEP 518&lt;/a&gt; 的提出正是为了终结这种乱象。它定义了一个名为 &lt;code&gt;pyproject.toml&lt;/code&gt; 的文件格式，旨在成为&lt;strong&gt;所有构建工具的统一配置入口&lt;/strong&gt;。随后，&lt;a class=&#34;link&#34; href=&#34;https://peps.python.org/pep-0621/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PEP 621&lt;/a&gt; 进一步规范了如何在这个文件中声明项目的核心元数据（如名称、版本、作者和依赖项），使其彻底摆脱了对 &lt;code&gt;setup.py&lt;/code&gt; 的依赖。&lt;/p&gt;
&lt;p&gt;简单来说，&lt;code&gt;pyproject.toml&lt;/code&gt; 的使命就是将所有与项目相关的配置，集中到一个官方认可的、格式统一的文件中。&lt;/p&gt;
&lt;h3 id=&#34;声明式依赖管理&#34;&gt;声明式依赖管理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt; 最重要的改进，在于它引入了&lt;strong&gt;声明式依赖管理&lt;/strong&gt;。与 &lt;code&gt;pip freeze&lt;/code&gt; 那种不加区分的全量记录不同，我们现在只需要在 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件中清晰地声明项目的&lt;strong&gt;直接依赖&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;让我们回到上一章的 &lt;code&gt;Flask&lt;/code&gt; 项目，它的 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件现在会是这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# pyproject.toml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my-flask-app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dependencies&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;Flask==3.0.0&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;看，多么清爽！&lt;code&gt;dependencies&lt;/code&gt; 列表里只有 &lt;code&gt;Flask&lt;/code&gt;。我们在这里表达的是&lt;strong&gt;意图&lt;/strong&gt;：“我的项目需要 Flask 3.0.0 版本”，而不是 &lt;code&gt;Flask&lt;/code&gt; 运行所需要的所有包的冗长列表。至于 &lt;code&gt;Flask&lt;/code&gt; 自身依赖的 &lt;code&gt;Werkzeug&lt;/code&gt;、&lt;code&gt;Jinja2&lt;/code&gt; 等，将由工具在安装时自动去解析和处理。&lt;/p&gt;
&lt;p&gt;这种方式将项目的直接依赖与间接依赖彻底分离，让依赖关系一目了然，极大地提升了项目的可读性和可维护性。&lt;/p&gt;
&lt;h3 id=&#34;pip-install--的背后原理&#34;&gt;&lt;code&gt;pip install .&lt;/code&gt; 的背后原理&lt;/h3&gt;
&lt;p&gt;现在我们有了 &lt;code&gt;pyproject.toml&lt;/code&gt;，那么 &lt;code&gt;pip&lt;/code&gt; 是如何利用它来安装项目的呢？&lt;/p&gt;
&lt;p&gt;当你进入项目根目录，在激活的虚拟环境中执行 &lt;code&gt;pip install .&lt;/code&gt; 背后其实发生了两个关键步骤：构建和安装。这个过程不仅仅是复制文件，而是将你的项目变成一个标准的、可分发的 Python 软件包。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一步：构建 (Build)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; 首先会扮演一个“构建前端”的角色。它会读取 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件中的 &lt;code&gt;[build-system]&lt;/code&gt; 表，找到指定的“构建后端”（通常是 &lt;code&gt;setuptools&lt;/code&gt;）。然后，&lt;code&gt;pip&lt;/code&gt; 会指示构建后端，依据当前项目的源代码和 &lt;code&gt;pyproject.toml&lt;/code&gt; 中的元数据，构建出一个标准的 Python 软件包，通常是一个 &lt;code&gt;.whl&lt;/code&gt; (wheel) 文件。这个 wheel 文件是一个包含了所有代码和元数据的 zip 压缩包，是现代 Python 的标准分发格式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二步：安装 (Install)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构建完成后，&lt;code&gt;pip&lt;/code&gt; 会接手这个新鲜出炉的 wheel 文件，并将其内容“解压”并安装到你的虚拟环境中。这个过程会产生以下三类核心产物：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;项目代码与元数据 (Project Code and Metadata)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;你的项目代码（即所有的 &lt;code&gt;.py&lt;/code&gt; 文件和包）会被复制到虚拟环境的 &lt;code&gt;site-packages&lt;/code&gt; 目录下（例如 &lt;code&gt;.venv/lib/python3.11/site-packages/my_flask_app&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;同时，一个名为 &lt;code&gt;my_flask_app-0.1.0.dist-info&lt;/code&gt; 的元数据目录也会被创建。你可以把它看作是这个软件包的“身份证”，里面包含了从 &lt;code&gt;pyproject.toml&lt;/code&gt; 中提取的所有信息，比如项目名、版本、作者以及最重要的——依赖列表。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;项目依赖 (Project Dependencies)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;pip&lt;/code&gt; 会读取上述元数据文件，找到其中声明的 &lt;code&gt;dependencies&lt;/code&gt; 列表（例如 &lt;code&gt;&amp;quot;Flask==3.0.0&amp;quot;&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;然后，它会自动下载并安装所有这些直接依赖，以及这些依赖所需要的间接依赖（如 &lt;code&gt;Werkzeug&lt;/code&gt;, &lt;code&gt;Jinja2&lt;/code&gt; 等），并将它们全部安装到 &lt;code&gt;site-packages&lt;/code&gt; 目录中。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;可执行的命令行脚本 (Executable Command-line Scripts)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你在文件中定义了 &lt;code&gt;[project.scripts]&lt;/code&gt; 部分，像这样：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scripts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;my-app&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;my_flask_app.cli:main&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;那么 &lt;code&gt;pip&lt;/code&gt; 在安装时，会在虚拟环境的 &lt;code&gt;bin&lt;/code&gt; 目录（Windows 上是 &lt;code&gt;Scripts&lt;/code&gt;）下创建一个名为 &lt;code&gt;my-app&lt;/code&gt; 的可执行文件。&lt;/p&gt;
&lt;p&gt;这个文件是一个小小的“启动器”脚本，它的作用是调用当前虚拟环境中的 Python 解释器，并执行你指定的函数 (&lt;code&gt;my_flask_app.cli:main&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;正因为如此，一旦安装完成并激活了虚拟环境，你就可以在任何路径下直接通过命令行运行 &lt;code&gt;my-app&lt;/code&gt; 来启动你的应用程序了。&lt;/p&gt;
&lt;p&gt;通过这套标准化的流程，&lt;code&gt;pip install .&lt;/code&gt; 不仅安装了代码和依赖，还完成了命令行工具的创建，将一个项目从一堆源代码变成了一个功能完整、随时可用的工具。&lt;/p&gt;
&lt;h3 id=&#34;可编辑模式-pip-install--e-&#34;&gt;可编辑模式 (&lt;code&gt;pip install -e .&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pip install .&lt;/code&gt; 非常适合用于最终的安装和部署，但在日常开发中，每次修改代码后都重新构建和安装一遍，显然效率太低。为此，&lt;code&gt;pip&lt;/code&gt; 提供了一种强大的&lt;strong&gt;可编辑模式 (editable mode)&lt;/strong&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -e .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;-e&lt;/code&gt; 参数是这个模式的关键。执行这条命令后，&lt;code&gt;pip&lt;/code&gt; 不会再把你的项目文件复制到 &lt;code&gt;site-packages&lt;/code&gt; 目录中，而它会在 &lt;code&gt;site-packages&lt;/code&gt; 里创建一个特殊的链接文件（&lt;code&gt;.pth&lt;/code&gt; 文件），这个链接直接指向你当前项目的源代码目录。&lt;/p&gt;
&lt;p&gt;这样做的好处是显而易见的：你的项目源代码和虚拟环境中的“已安装版本”实现了实时同步。你在编辑器里对任何 &lt;code&gt;.py&lt;/code&gt; 文件做的修改，保存后会&lt;strong&gt;立即生效&lt;/strong&gt;，无需任何重新安装的步骤。这极大地简化了“修改 - 运行 - 调试”的开发循环，是现代 Python 开发的必备技巧。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;pyproject.toml&lt;/code&gt; 和可编辑模式，我们不仅拥有了清晰的依赖管理，还获得了高效的开发体验。接下来，让我们通过一个真实的项目，来看看 &lt;code&gt;pyproject.toml&lt;/code&gt; 在实战中是如何发挥作用的。&lt;/p&gt;
&lt;h2 id=&#34;解析splitter-项目的-pyprojecttoml&#34;&gt;解析&lt;code&gt;splitter&lt;/code&gt; 项目的 &lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;以我参与的 &lt;a class=&#34;link&#34; href=&#34;https://gitee.com/openeuler/splitter&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;splitter&lt;/a&gt; 项目为例，解析它的 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件，看看它是如何将项目的所有配置信息尽收囊中的。&lt;/p&gt;
&lt;p&gt;以下是 &lt;code&gt;splitter&lt;/code&gt; 项目中 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件的核心内容，为便于说明，已做适当简化：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# pyproject.toml of splitter project&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;build-system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;requires&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;setuptools&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wheel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;build-backend&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;setuptools.build_meta&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;splitter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Assuming a version for clarity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;A tool for splitting software packages into smaller components.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;authors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;openEuler Cloudnative SIG&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;README.md&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;requires-python&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;=3.7&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;license&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MulanPSL-2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dependencies&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;PyYAML&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;packaging&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;jinja2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;urls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Homepage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://gitee.com/openeuler/splitter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scripts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;splitter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tools.main:main&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setuptools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;exclude&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;docs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在，让我们逐段来剖析这个文件。&lt;/p&gt;
&lt;h3 id=&#34;build-system&#34;&gt;&lt;code&gt;[build-system]&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;build-system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;requires&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;setuptools&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wheel&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;build-backend&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;setuptools.build_meta&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这是 &lt;code&gt;pyproject.toml&lt;/code&gt; 的“入口”，也是遵循 PEP 518 规范的体现。它告诉 &lt;code&gt;pip&lt;/code&gt; 这样的构建工具：在构建本项目之前，请确保你的环境中安装了 &lt;code&gt;setuptools&lt;/code&gt; 和 &lt;code&gt;wheel&lt;/code&gt; 这两个包，因为它们是我需要的构建工具。然后，请使用 &lt;code&gt;setuptools.build_meta&lt;/code&gt; 这个入口点来执行实际的构建操作。&lt;/p&gt;
&lt;p&gt;这一段配置，实现了项目构建依赖与项目本身运行依赖的解耦。&lt;/p&gt;
&lt;h3 id=&#34;project&#34;&gt;&lt;code&gt;[project]&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;splitter&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;authors&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[...]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;readme&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;README.md&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;requires-python&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;gt;=3.7&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;license&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;MulanPSL-2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dependencies&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;PyYAML&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;packaging&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;jinja2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这部分是项目的核心元数据，遵循 PEP 621 规范。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;authors&lt;/code&gt;：这些都是项目的基本信息，会被打包到软件中，并在 PyPI 等包索引网站上展示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;requires-python&lt;/code&gt;：这是一个非常重要的字段，它声明了项目运行所需的最低 Python 版本。如果用户尝试在一个不兼容的 Python 版本（如 Python 3.6）上安装，&lt;code&gt;pip&lt;/code&gt; 会直接报错并终止安装，避免了后续可能出现的各种运行时错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dependencies&lt;/code&gt;：这里是项目的依赖。它清晰地列出了 &lt;code&gt;splitter&lt;/code&gt; 运行所必需的&lt;strong&gt;直接依赖项&lt;/strong&gt;。当执行 &lt;code&gt;pip install .&lt;/code&gt; 时，&lt;code&gt;pip&lt;/code&gt; 会负责安装 &lt;code&gt;PyYAML&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;packaging&lt;/code&gt;, &lt;code&gt;jinja2&lt;/code&gt; 以及它们各自的所有子依赖，而我们无需关心这些复杂的依赖链。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;projectscripts&#34;&gt;&lt;code&gt;[project.scripts]&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;project&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scripts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;splitter&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;tools.main:main&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这一行配置，定义了一个名为 &lt;code&gt;splitter&lt;/code&gt; 的命令行入口。&lt;/p&gt;
&lt;p&gt;当项目被安装后，&lt;code&gt;pip&lt;/code&gt; 会在虚拟环境的 &lt;code&gt;bin/&lt;/code&gt; 目录下创建一个名为 &lt;code&gt;splitter&lt;/code&gt; 的可执行文件。当我们运行这个命令时，系统会自动调用 &lt;code&gt;tools/main.py&lt;/code&gt; 文件中的 &lt;code&gt;main()&lt;/code&gt; 函数。这使得一个复杂的 Python 项目可以像一个普通的系统命令一样被调用，极大地提升了用户体验。&lt;/p&gt;
&lt;h3 id=&#34;toolsetuptoolspackagesfind&#34;&gt;&lt;code&gt;[tool.setuptools.packages.find]&lt;/code&gt;&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;tool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setuptools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;packages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;exclude&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tests&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;docs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;前缀为 &lt;code&gt;[tool.*]&lt;/code&gt; 的表是为各种第三方工具预留的配置空间。这里，我们为构建后端 &lt;code&gt;setuptools&lt;/code&gt; 提供了配置。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;packages.find&lt;/code&gt; 指示 &lt;code&gt;setuptools&lt;/code&gt; 自动发现项目中的所有 Python 包。&lt;code&gt;where = [&amp;quot;.&amp;quot;]&lt;/code&gt; 告诉它从当前根目录开始查找，而 &lt;code&gt;exclude = [&amp;quot;tests&amp;quot;, &amp;quot;docs&amp;quot;]&lt;/code&gt; 则明确排除了测试代码和文档目录，确保它们不会被打包到最终发布的应用中。&lt;/p&gt;
&lt;p&gt;通过这个真实的例子，我们可以看到 &lt;code&gt;pyproject.toml&lt;/code&gt; 如何将项目的构建信息、元数据、运行依赖、命令行入口和工具配置，全部地组织在了一起，让 Python 项目的结构变得清晰和标准化。&lt;/p&gt;
&lt;h2 id=&#34;poetry-uv-pdm-等高级管理工具&#34;&gt;Poetry, UV, PDM 等高级管理工具&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; + &lt;code&gt;pyproject.toml&lt;/code&gt; + &lt;code&gt;pip&lt;/code&gt; 的组合，已经构建起了一个相当稳固和规范的项目管理框架，它解决了依赖隔离和声明的核心问题。然而，这个工作流依然存在一些需要开发者手动操作的环节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;手动管理虚拟环境&lt;/strong&gt;：你需要记得先创建，再激活。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;手动编辑依赖文件&lt;/strong&gt;：添加或移除依赖时，你需要手动去编辑 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有没有一种工具，能将这些步骤完全自动化呢？当然有。这便是 &lt;code&gt;Poetry&lt;/code&gt;, &lt;code&gt;PDM&lt;/code&gt; 以及新秀 &lt;code&gt;uv&lt;/code&gt; 这类高级项目管理工具的使命所在。&lt;/p&gt;
&lt;h3 id=&#34;新一代高级管理工具&#34;&gt;新一代高级管理工具&lt;/h3&gt;
&lt;p&gt;这些工具并非要推翻 &lt;code&gt;venv&lt;/code&gt; 和 &lt;code&gt;pyproject.toml&lt;/code&gt;，恰恰相反，它们是建立在这些官方标准之上的&lt;strong&gt;高级封装&lt;/strong&gt;和&lt;strong&gt;工作流引擎&lt;/strong&gt;。它们的核心理念可以概括为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自动化环境管理&lt;/strong&gt;：你不再需要关心 &lt;code&gt;venv&lt;/code&gt; 的创建和激活，工具会自动为你处理好一切。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;命令式依赖操作&lt;/strong&gt;：通过简单的命令（如 &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;）来管理依赖，工具会自动更新 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;确定性构建&lt;/strong&gt;：通过生成一个精确的 &lt;code&gt;lock&lt;/code&gt; 文件（如 &lt;code&gt;poetry.lock&lt;/code&gt;, &lt;code&gt;pdm.lock&lt;/code&gt;, &lt;code&gt;uv.lock&lt;/code&gt;），锁定项目中&lt;strong&gt;所有&lt;/strong&gt;依赖（包括直接和间接依赖）的精确版本。这确保了任何人在任何时间、任何机器上都能构建出完全一致的运行环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集成化体验&lt;/strong&gt;：将依赖管理、环境管理、打包、发布等功能集成到一套统一的命令行接口中，提供“一站式”的解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;以-uv-为例的现代化工作流&#34;&gt;以 &lt;code&gt;uv&lt;/code&gt; 为例的现代化工作流&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;uv&lt;/code&gt; 是由 &lt;code&gt;ruff&lt;/code&gt; 的作者开发的最新一代 Python 打包工具，它用 Rust 编写。让我们以 &lt;code&gt;uv&lt;/code&gt; 为例，体验一下现代化的工作流是多么流畅。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;假设你已经通过 &lt;code&gt;pip install uv&lt;/code&gt; 安装了它。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;开发者 A (项目创建者)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始化项目&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在一个空目录中，我们不再需要手动创建任何文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# uv 会引导你创建 pyproject.toml 文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;uv init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;添加依赖&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在，想给项目添加 &lt;code&gt;flask&lt;/code&gt; 依赖？告别手动编辑，一条命令即可：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;uv add flask
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这条命令，&lt;code&gt;uv&lt;/code&gt; 在背后为你完成了一系列操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;检查并创建虚拟环境&lt;/strong&gt;：它会自动检测当前目录下是否存在 &lt;code&gt;.venv&lt;/code&gt;，如果没有，就为你创建一个。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;修改 &lt;code&gt;pyproject.toml&lt;/code&gt;&lt;/strong&gt;：自动将 &lt;code&gt;flask&lt;/code&gt; 添加到 &lt;code&gt;[project.dependencies]&lt;/code&gt; 列表中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解析依赖并安装&lt;/strong&gt;：解析 &lt;code&gt;flask&lt;/code&gt; 的所有依赖树，并将它们全部安装到虚拟环境中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成锁文件&lt;/strong&gt;：创建一个 &lt;code&gt;uv.lock&lt;/code&gt; 文件，里面精确记录了本次安装的所有包（包括间接依赖）的版本号和哈希值，锁定了当前环境的状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开发者 B (协作者)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;同步环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当开发者 B 从 GitHub 克隆了项目后，他不需要再去研究 &lt;code&gt;pyproject.toml&lt;/code&gt; 或执行复杂的安装命令。他只需要：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;uv sync
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;uv&lt;/code&gt; 会读取 &lt;code&gt;uv.lock&lt;/code&gt; 文件，然后下载并安装所有被锁定的包，为他创建一个与开发者 A &lt;strong&gt;完全一致&lt;/strong&gt;的虚拟环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;日常开发与执行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在开发过程中，你甚至不需要手动 &lt;code&gt;source .venv/bin/activate&lt;/code&gt; 来激活环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# uv 会自动在项目的虚拟环境中执行 python main.py&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;uv run python main.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;uv run&lt;/code&gt; 命令会自动寻找并使用当前项目的虚拟环境来执行后续的命令，让你的操作更加简洁。&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;uv&lt;/code&gt; 的演示，我们可以看到，现代化的项目管理工具将开发者从繁琐的、易出错的手动操作中彻底解放出来。它们通过自动化和确定性的机制，让依赖和环境管理变得简单、可靠且高效。&lt;/p&gt;
&lt;p&gt;好的，这是最后一章的总结部分。它将对全文进行回顾，并提炼出具体、可操作的最佳实践，为读者画上一个圆满的句号。&lt;/p&gt;
&lt;h2 id=&#34;构建你的现代化-python-工作流&#34;&gt;构建你的现代化 Python 工作流&lt;/h2&gt;
&lt;p&gt;无论你正在开始一个新项目，还是打算重构一个旧项目，请遵循以下三个原则。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 隔离是基础：始终为你的项目创建虚拟环境&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是现代化项目管理的基石，也是最不应该被忽略的一步。为每个项目创建一个独立的虚拟环境，可以从根源上杜绝依赖冲突和全局环境污染。像 &lt;code&gt;uv&lt;/code&gt;, &lt;code&gt;Poetry&lt;/code&gt;, &lt;code&gt;PDM&lt;/code&gt; 这类工具已经将这一步完全自动化，你甚至无需再手动操作。如果你仍在使用原生工具，请务必将 &lt;code&gt;python -m venv .venv&lt;/code&gt; 作为你开启任何新项目的第一条命令。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 声明是核心：拥抱 &lt;code&gt;pyproject.toml&lt;/code&gt;，告别 &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyproject.toml&lt;/code&gt; 是 Python 项目的未来。请将它作为你项目配置的唯一真实来源。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;只声明直接依赖&lt;/strong&gt;：在 &lt;code&gt;[project.dependencies]&lt;/code&gt; 中，只列出你的项目代码直接 &lt;code&gt;import&lt;/code&gt; 的那些库。这能让你的项目依赖关系保持最大程度的清晰和可维护性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;统一所有配置&lt;/strong&gt;：将代码检查工具 (linter)、格式化工具 (formatter)、测试框架等所有工具的配置，都迁移到 &lt;code&gt;pyproject.toml&lt;/code&gt; 的 &lt;code&gt;[tool.*]&lt;/code&gt; 表中，让项目根目录保持整洁。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. 工具是利器：选择一个现代化的管理工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然你可以手动维护 &lt;code&gt;pyproject.toml&lt;/code&gt; 并结合 &lt;code&gt;pip&lt;/code&gt; 使用，但一个现代化的项目管理工具能极大地提升你的生产力。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对于新项目&lt;/strong&gt;：强烈推荐直接使用 &lt;code&gt;uv&lt;/code&gt; 或 &lt;code&gt;Poetry&lt;/code&gt;。它们提供的 &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;sync&lt;/code&gt;, &lt;code&gt;run&lt;/code&gt; 等命令，将依赖管理和环境操作的体验提升到了一个全新的高度。它们带来的&lt;strong&gt;确定性构建&lt;/strong&gt;（通过 lock 文件）对于团队协作和持续集成（CI/CD）至关重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对于现有项目&lt;/strong&gt;：迁移到这些工具也比你想象的要简单。大多数工具都提供了从 &lt;code&gt;requirements.txt&lt;/code&gt; 导入依赖的功能，可以帮助你平滑过渡。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;希望这篇指南能够帮助你理清 Python 项目管理的脉络，并为你提供一套清晰、可行的实践方案。现在就动手，为你的下一个 Python 项目开启一个现代化的新起点吧！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>揭秘 Python 环境管理的底层实现</title>
        <link>https://mahaoliang.tech/p/%E6%8F%AD%E7%A7%98-python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</link>
        <pubDate>Sat, 19 Jul 2025 12:15:07 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/%E6%8F%AD%E7%A7%98-python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</guid>
        <description>&lt;p&gt;对于许多 Python 开发者而言，&lt;code&gt;venv&lt;/code&gt;、&lt;code&gt;pyenv&lt;/code&gt; 与 &lt;code&gt;conda&lt;/code&gt; 如同三位熟悉的“魔术师”。我们熟练地使用它们的命令来隔离项目、切换版本，却常常对其背后的运作一知半解。&lt;/p&gt;
&lt;p&gt;本文的目标，正是要揭开这些工具的魔法外衣。我们不罗列命令，而是直击核心：深入 &lt;code&gt;PATH&lt;/code&gt; 环境变量、Shim 机制和文件系统布局，揭示它们各自的实现原理。理解了底层，你才能真正驾驭它们，告别环境管理的混乱。&lt;/p&gt;
&lt;h2 id=&#34;争夺-path-环境变量&#34;&gt;争夺 &lt;code&gt;PATH&lt;/code&gt; 环境变量&lt;/h2&gt;
&lt;p&gt;Python 环境管理工具的核心机制，都围绕着对 &lt;code&gt;PATH&lt;/code&gt; 环境变量的控制。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH&lt;/code&gt; 是一个由目录路径组成的有序列表。当你执行一个命令时，操作系统会按照这份列表的顺序，从左到右依次在这些目录中查找对应的可执行文件。一旦找到，便立即执行并停止搜索。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt;、&lt;code&gt;conda&lt;/code&gt; 和 &lt;code&gt;pyenv&lt;/code&gt; 都通过修改 &lt;code&gt;PATH&lt;/code&gt; 来确保其管理的 Python 解释器被优先调用，但它们实现这一目标的具体策略存在不同。&lt;/p&gt;
&lt;h3 id=&#34;直接修改-pathvenv-与-conda-的策略&#34;&gt;直接修改 &lt;code&gt;PATH&lt;/code&gt;：&lt;code&gt;venv&lt;/code&gt; 与 &lt;code&gt;conda&lt;/code&gt; 的策略&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; 和 &lt;code&gt;conda&lt;/code&gt; 采用的是一种直接修改 &lt;code&gt;PATH&lt;/code&gt; 变量的策略。当一个环境被激活时，该环境的 &lt;code&gt;bin&lt;/code&gt; 目录（在 Windows 上是 &lt;code&gt;Scripts&lt;/code&gt; 目录）会被插入到 &lt;code&gt;PATH&lt;/code&gt; 列表的最前端。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;venv&lt;/code&gt; 的实现&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行 &lt;code&gt;source .venv/bin/activate&lt;/code&gt; 命令后，该脚本会获取当前 &lt;code&gt;PATH&lt;/code&gt; 变量的值，并将 &lt;code&gt;/path/to/project/.venv/bin&lt;/code&gt; 这个路径字符串添加到其最左侧。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看当前的 PATH 变量（为清晰起见，已简化）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/local/bin:/usr/bin:/bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查找 python 命令的位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ which python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/usr/bin/python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 激活虚拟环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 再次查看 PATH 变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/path/to/project/.venv/bin:/usr/local/bin:/usr/bin:/bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 再次查找 python 命令的位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ which python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/path/to/project/.venv/bin/python3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;conda&lt;/code&gt; 的实现：&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;conda activate my-env&lt;/code&gt; 命令执行的逻辑与 &lt;code&gt;venv&lt;/code&gt; 相同。它会将 &lt;code&gt;/path/to/miniconda3/envs/my-env/bin&lt;/code&gt; 目录路径插入到 &lt;code&gt;PATH&lt;/code&gt; 变量的最前端。&lt;/p&gt;
&lt;p&gt;这种策略的共同点是：&lt;strong&gt;激活操作直接将包含目标 Python 解释器的目录置于最高查找优先级&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;通过-shim-间接控制pyenv-的策略&#34;&gt;通过 Shim 间接控制：&lt;code&gt;pyenv&lt;/code&gt; 的策略&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 采用了一种更为间接的控制策略。它不直接将任何特定版本的 Python &lt;code&gt;bin&lt;/code&gt; 目录添加到 &lt;code&gt;PATH&lt;/code&gt;，而是在 &lt;code&gt;pyenv&lt;/code&gt; 初始化时，要求用户将一个名为 &lt;code&gt;shims&lt;/code&gt; 的特殊目录添加到 &lt;code&gt;PATH&lt;/code&gt; 的最前端。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 初始化后的 &lt;code&gt;PATH&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/Users/haoliangma/.pyenv/shims:/opt/homebrew/bin:...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;shims&lt;/code&gt; 目录是 &lt;code&gt;pyenv&lt;/code&gt; 实现版本动态切换的关键。该目录中包含了一系列与常用命令（如 &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;）同名的可执行文件，这些文件被称为 &lt;strong&gt;Shim&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当用户执行 &lt;code&gt;python&lt;/code&gt; 命令时，实际运行的是 &lt;code&gt;~/.pyenv/shims/python&lt;/code&gt; 这个 Shim 文件。该文件的核心任务是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行 &lt;code&gt;pyenv&lt;/code&gt; 的内部逻辑。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv&lt;/code&gt; 根据当前配置（如 &lt;code&gt;.python-version&lt;/code&gt; 文件、全局设置或环境变量）确定需要使用的真实 Python 版本（例如 &lt;code&gt;3.10.9&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyenv&lt;/code&gt; 随后将命令的执行权转发给该版本的真实解释器，其路径为 &lt;code&gt;~/.pyenv/versions/3.10.9/bin/python&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这种策略的特点是：&lt;strong&gt;&lt;code&gt;PATH&lt;/code&gt; 的最高优先级被一个固定的 Shim 目录占据，由该目录中的程序根据上下文动态地决定并调用真正的目标可执行文件&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;本章小结&#34;&gt;本章小结&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; 和 &lt;code&gt;conda&lt;/code&gt; 通过&lt;strong&gt;直接修改 &lt;code&gt;PATH&lt;/code&gt;&lt;/strong&gt; 将特定环境的 &lt;code&gt;bin&lt;/code&gt; 目录置于首位，是一种&lt;strong&gt;静态的状态切换&lt;/strong&gt;。而 &lt;code&gt;pyenv&lt;/code&gt; 则是通过一个&lt;strong&gt;固定的 &lt;code&gt;shims&lt;/code&gt; 目录&lt;/strong&gt;来拦截命令，并进行&lt;strong&gt;动态的命令转发&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;为什么-pyenv--venv-可以合作&#34;&gt;为什么 &lt;code&gt;pyenv&lt;/code&gt; + &lt;code&gt;venv&lt;/code&gt; 可以合作&lt;/h2&gt;
&lt;p&gt;既然 &lt;code&gt;pyenv&lt;/code&gt; 和 &lt;code&gt;venv&lt;/code&gt; 都会争夺 &lt;code&gt;PATH&lt;/code&gt; 环境变量的最高优先级，为什么它们的组合不会产生冲突呢？&lt;/p&gt;
&lt;p&gt;答案在于，它们对 &lt;code&gt;PATH&lt;/code&gt; 的控制服务于一个&lt;strong&gt;有序的、分阶段的执行流程&lt;/strong&gt;，并通过 &lt;strong&gt;符号链接（Symbolic Link）&lt;/strong&gt; 这一关键技术，确保了执行权的无缝交接。&lt;/p&gt;
&lt;h3 id=&#34;阶段一环境构建-pyenv-shim-机制主导&#34;&gt;阶段一：环境构建 (&lt;code&gt;pyenv&lt;/code&gt; Shim 机制主导)&lt;/h3&gt;
&lt;p&gt;在创建虚拟环境的阶段，&lt;code&gt;pyenv&lt;/code&gt; 的 Shim 机制起着决定性作用，它确保了 &lt;code&gt;venv&lt;/code&gt; 模块由正确版本的 Python 解释器执行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始状态&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 已初始化，&lt;code&gt;~/.pyenv/shims&lt;/code&gt; 目录位于 &lt;code&gt;PATH&lt;/code&gt; 的最前端。用户已通过 &lt;code&gt;pyenv shell 3.10.9&lt;/code&gt; 等命令指定了 Python 版本。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;执行创建虚拟环境的命令&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ python -m venv .venv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;命令的执行解析&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shell 依据 &lt;code&gt;PATH&lt;/code&gt; 顺序，首先执行 &lt;code&gt;~/.pyenv/shims/python&lt;/code&gt; 这个代理脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 的 Shim 逻辑被触发，它检测到版本配置 (&lt;code&gt;.python-version&lt;/code&gt;)，确定目标为 &lt;code&gt;3.10.9&lt;/code&gt; 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 随即将执行权转发给真实的解释器：&lt;code&gt;~/.pyenv/versions/3.10.9/bin/python&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终，由 &lt;code&gt;3.10.9&lt;/code&gt; 版本的解释器来执行 &lt;code&gt;-m venv .venv&lt;/code&gt; 任务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;venv&lt;/code&gt; 的核心产出&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;.venv/bin/&lt;/code&gt; 目录下，&lt;code&gt;venv&lt;/code&gt; 模块创建了一个名为 &lt;code&gt;python&lt;/code&gt; 的&lt;strong&gt;符号链接&lt;/strong&gt;。此链接的目标地址，被精确地设置为用于创建它的那个解释器的绝对路径。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ls -l .venv/bin/python3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lrwxr-xr-x  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; haoliangma  staff    52B  &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt; 13:21 .venv/bin/python3 -&amp;gt; /Users/haoliangma/.pyenv/versions/3.10.9/bin/python3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个符号链接的存在至关重要，它以文件系统级别的指针形式，&lt;strong&gt;永久性地记录了该虚拟环境所绑定的 Python 解释器版本&lt;/strong&gt;。至此，&lt;code&gt;pyenv&lt;/code&gt; 在构建阶段的任务已经完成。&lt;/p&gt;
&lt;h3 id=&#34;阶段二环境激活-venv-接管-path-优先级&#34;&gt;阶段二：环境激活 (&lt;code&gt;venv&lt;/code&gt; 接管 &lt;code&gt;PATH&lt;/code&gt; 优先级)&lt;/h3&gt;
&lt;p&gt;在环境被激活后，&lt;code&gt;venv&lt;/code&gt; 虽然在 &lt;code&gt;PATH&lt;/code&gt; 层面取得了最高优先级，但符号链接机制确保了最终的执行流依然正确。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;激活虚拟环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; .venv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;PATH&lt;/code&gt; 的变更&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;activate&lt;/code&gt; 脚本将 &lt;code&gt;.venv/bin&lt;/code&gt; 目录插入到 &lt;code&gt;PATH&lt;/code&gt; 的最前端，此时 &lt;code&gt;PATH&lt;/code&gt; 变为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/path/to/project/.venv/bin: /Users/haoliangma/.pyenv/shims:...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;从 &lt;code&gt;PATH&lt;/code&gt; 的顺序上看，&lt;code&gt;.venv/bin&lt;/code&gt; 的优先级已经高于 &lt;code&gt;pyenv&lt;/code&gt; 的 &lt;code&gt;shims&lt;/code&gt; 目录。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;最终命令的执行解析&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当用户再次输入 &lt;code&gt;python3&lt;/code&gt; 命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Shell 首先在 &lt;code&gt;PATH&lt;/code&gt; 的第一站 &lt;code&gt;/path/to/project/.venv/bin&lt;/code&gt; 中找到了 &lt;code&gt;python3&lt;/code&gt; 文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统识别出这是一个符号链接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;操作系统自动解引用（dereference）该链接，即跟随指针找到了它的真实目标：&lt;code&gt;/Users/haoliangma/.pyenv/versions/3.10.9/bin/python3&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终，由 &lt;code&gt;pyenv&lt;/code&gt; 管理的 &lt;code&gt;3.10.9&lt;/code&gt; 解释器被执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;本章小结-1&#34;&gt;&lt;strong&gt;本章小结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 和 &lt;code&gt;venv&lt;/code&gt; 的 &lt;code&gt;PATH&lt;/code&gt; 争夺之所以没有导致冲突，是因为它们的交互是一个&lt;strong&gt;非竞争性的时序过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在环境&lt;strong&gt;创建时&lt;/strong&gt;，&lt;code&gt;pyenv&lt;/code&gt; 的 Shim 机制处于活动状态，用于&lt;strong&gt;选择&lt;/strong&gt;正确的 Python 解释器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; 将这个选择结果通过&lt;strong&gt;符号链接&lt;/strong&gt;的形式&lt;strong&gt;固化&lt;/strong&gt;下来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在环境&lt;strong&gt;激活后&lt;/strong&gt;，&lt;code&gt;venv&lt;/code&gt; 接管 &lt;code&gt;PATH&lt;/code&gt; 的最高优先级。此时 &lt;code&gt;pyenv&lt;/code&gt; 的 Shim 机制虽然被绕过，但这无关紧要，因为符号链接已经确保了任何对 &lt;code&gt;python&lt;/code&gt; 的调用都会被直接路由到 &lt;code&gt;pyenv&lt;/code&gt; 事先选定的那个解释器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;为什么-pyenv-与-conda-会冲突&#34;&gt;为什么 &lt;code&gt;pyenv&lt;/code&gt; 与 &lt;code&gt;conda&lt;/code&gt; 会冲突&lt;/h2&gt;
&lt;h3 id=&#34;两套并行的版本管理体系&#34;&gt;两套并行的版本管理体系&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 与 &lt;code&gt;conda&lt;/code&gt; 之间的冲突，首要根源在于，两者都试图控制 Python 解释器的版本管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pyenv&lt;/code&gt; 的功能&lt;/strong&gt;：其核心功能是安装和管理多个不同版本的 Python 解释器（例如 &lt;code&gt;3.9.13&lt;/code&gt;, &lt;code&gt;3.10.9&lt;/code&gt;），并将它们存储在 &lt;code&gt;~/.pyenv/versions/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;conda&lt;/code&gt; 的功能&lt;/strong&gt;：&lt;code&gt;conda&lt;/code&gt; 将 Python 解释器本身也视为一个普通的软件包。执行 &lt;code&gt;conda create -n myenv python=3.9&lt;/code&gt; 时，&lt;code&gt;conda&lt;/code&gt; 会从其官方渠道下载一个预编译的 Python 3.9，并将其安装在 &lt;code&gt;~/miniconda3/envs/myenv/&lt;/code&gt; 目录内。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这就造成了一个直接的矛盾：一个系统内存在两套独立的、用于获取和管理 Python 版本的机制。它们各自维护着不同的 Python 安装路径。&lt;/p&gt;
&lt;h3 id=&#34;path-控制权的互斥冲突&#34;&gt;&lt;code&gt;PATH&lt;/code&gt; 控制权的互斥冲突&lt;/h3&gt;
&lt;p&gt;这是导致两者无法共存的最直接的技术原因。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 有效的前提是，&lt;code&gt;~/.pyenv/shims&lt;/code&gt; 目录必须位于 &lt;code&gt;PATH&lt;/code&gt; 环境变量的最前端。只有这样，&lt;code&gt;pyenv&lt;/code&gt; 的代理脚本才能生效。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;conda&lt;/code&gt; 的激活操作，恰恰会破坏了这个前提。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始状态&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;假设 &lt;code&gt;pyenv&lt;/code&gt; 和 &lt;code&gt;conda&lt;/code&gt; 均已在 Shell 配置文件中初始化。&lt;code&gt;PATH&lt;/code&gt; 的起始部分可能如下（取决于初始化顺序）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/home/user/.pyenv/shims:/path/to/miniconda3/condabin:...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;激活虚拟环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ conda activate my-env
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;conda&lt;/code&gt; 的 &lt;code&gt;PATH&lt;/code&gt; 修改&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;conda activate&lt;/code&gt; 命令会强制将 &lt;code&gt;my-env&lt;/code&gt; 环境的 &lt;code&gt;bin&lt;/code&gt; 目录插入到 &lt;code&gt;PATH&lt;/code&gt; 的最前端。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;冲突后的 &lt;code&gt;PATH&lt;/code&gt; 状态&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;PATH&lt;/code&gt; 变量变为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/path/to/miniconda3/envs/my-env/bin:/home/user/.pyenv/shims:...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在，&lt;code&gt;conda&lt;/code&gt; 环境的 &lt;code&gt;bin&lt;/code&gt; 目录取代了 &lt;code&gt;pyenv&lt;/code&gt; 的 &lt;code&gt;shims&lt;/code&gt; 目录，成为了 &lt;code&gt;PATH&lt;/code&gt; 的最高优先级。&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;strong&gt;最终的执行解析&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当用户再次输入 &lt;code&gt;python&lt;/code&gt; 命令时，Shell 首先在 &lt;code&gt;/path/to/miniconda3/envs/my-env/bin&lt;/code&gt; 目录中找到了 &lt;code&gt;python&lt;/code&gt; 可执行文件。这个文件是 &lt;code&gt;conda&lt;/code&gt; 自己安装的，与 &lt;code&gt;pyenv&lt;/code&gt; 毫无关系。&lt;code&gt;pyenv&lt;/code&gt; 的 &lt;code&gt;shims&lt;/code&gt; 目录因为排在后面，其中的代理脚本根本没有机会被执行。&lt;/p&gt;
&lt;p&gt;与 &lt;code&gt;pyenv&lt;/code&gt;+&lt;code&gt;venv&lt;/code&gt; 的组合不同，这里不存在任何“交接”机制。&lt;code&gt;conda&lt;/code&gt; 环境中的 &lt;code&gt;python&lt;/code&gt; 不是一个指向 &lt;code&gt;pyenv&lt;/code&gt; 所管理版本的符号链接；它是一个由 &lt;code&gt;conda&lt;/code&gt; 独立安装的、完全自洽的二进制文件。&lt;/p&gt;
&lt;h3 id=&#34;本章小结-2&#34;&gt;本章小结&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;PATH&lt;/code&gt; 控制上，&lt;code&gt;pyenv&lt;/code&gt; 要求其 &lt;code&gt;shims&lt;/code&gt; 目录&lt;strong&gt;占据最高优先级&lt;/strong&gt;以实现动态代理，而 &lt;code&gt;conda activate&lt;/code&gt; 则要求其环境 &lt;code&gt;bin&lt;/code&gt; 目录&lt;strong&gt;在激活期间占据最高优先级&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这两个要求是&lt;strong&gt;互斥&lt;/strong&gt;的，因此，两者无法稳定共存。&lt;/p&gt;
&lt;h2 id=&#34;隔离空间本地分散-vs-全局集中&#34;&gt;隔离空间，本地分散 vs. 全局集中&lt;/h2&gt;
&lt;p&gt;在解决了“如何激活”的问题后，我们下一个要探究的是：这些隔离的环境和它们所依赖的包，究竟被存放在了哪里？&lt;/p&gt;
&lt;p&gt;尽管 &lt;code&gt;venv&lt;/code&gt; 和 &lt;code&gt;conda&lt;/code&gt; 都为项目提供了独立的包安装空间，但它们在物理存储上采用了截然不同的策略。&lt;/p&gt;
&lt;h3 id=&#34;venv环境与项目同在&#34;&gt;&lt;code&gt;venv&lt;/code&gt;：环境与项目同在&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; 遵循的是一种本地化、分散式的管理哲学。当你站在一个项目目录下，执行 &lt;code&gt;python -m venv .venv&lt;/code&gt; 时，它会在当前目录下创建一个名为 &lt;code&gt;.venv&lt;/code&gt; 的文件夹。这个文件夹就是你的整个虚拟环境。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.venv&lt;/code&gt; 是一个自包含的目录，里面有独立的 &lt;code&gt;bin&lt;/code&gt;（或 &lt;code&gt;Scripts&lt;/code&gt;）和 &lt;code&gt;lib&lt;/code&gt; 文件夹。当你在这个环境中 &lt;code&gt;pip install requests&lt;/code&gt; 时，&lt;code&gt;requests&lt;/code&gt; 库的所有文件都会被原封不动地放进 &lt;code&gt;.venv/lib/pythonX.X/site-packages/&lt;/code&gt; 目录下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种范式的优缺点十分鲜明。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概念清晰&lt;/strong&gt;：环境与项目代码紧密绑定，一目了然。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;管理简单&lt;/strong&gt;：当项目结束时，只需将整个项目文件夹删除，与之关联的虚拟环境也被一并彻底清理，不留任何痕迹。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空间冗余&lt;/strong&gt;：这是它最大的弊端。如果你有十个 Web 项目都依赖于 &lt;code&gt;Django&lt;/code&gt; 和 &lt;code&gt;requests&lt;/code&gt;，那么你的硬盘上就会躺着十份几乎完全相同的库文件拷贝，造成了不小的磁盘空间浪费。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; 的设计就像是为每个项目都配备了一个独立的“随身工具箱”，方便携带，但如果每个工具箱里的工具都大同小异，那无疑是种累赘。&lt;/p&gt;
&lt;h3 id=&#34;conda统一管理与高效复用&#34;&gt;&lt;code&gt;conda&lt;/code&gt;：统一管理与高效复用&lt;/h3&gt;
&lt;p&gt;与 &lt;code&gt;venv&lt;/code&gt; 不同，&lt;code&gt;conda&lt;/code&gt; 采用的是一种高度集中、统一管理的模式。它的存储体系主要由两个核心目录构成，通常位于你的用户主目录下（如 &lt;code&gt;~/miniconda3&lt;/code&gt;）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;envs&lt;/code&gt; 目录&lt;/strong&gt;：所有通过 &lt;code&gt;conda create&lt;/code&gt; 创建的环境，都以子目录的形式集中存放在这里。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pkgs&lt;/code&gt; 目录&lt;/strong&gt;：这是 Conda 的“中央包仓库缓存”。所有下载过的包（包括不同版本的 Python 解释器本身）都会在这里存放一份。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你在 &lt;code&gt;myenv&lt;/code&gt; 环境中安装 &lt;code&gt;numpy&lt;/code&gt; 时，Conda 并不会将 &lt;code&gt;numpy&lt;/code&gt; 的文件从 &lt;code&gt;pkgs&lt;/code&gt; 目录完整地&lt;strong&gt;复制&lt;/strong&gt;到 &lt;code&gt;envs/myenv&lt;/code&gt; 目录下。相反，它会使用一种名为“硬链接”的文件系统特性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这种“中央集权”范式的优缺点也同样突出。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;空间优化&lt;/strong&gt;：得益于硬链接，即使一百个环境都使用 &lt;code&gt;numpy&lt;/code&gt;，它在物理磁盘上也只占用一份空间，极大地节省了资源。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全局管理便利&lt;/strong&gt;：只需一个 &lt;code&gt;conda env list&lt;/code&gt; 命令，就能清晰地列出并管理本机上所有的 Conda 环境。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;物理分离&lt;/strong&gt;：环境与项目代码在文件系统上是分离的。这要求开发者需要自行维护“哪个项目对应哪个环境”的映射关系，有时可能会造成混淆。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;conda&lt;/code&gt; 的设计更像一个大型的“中央仓库”，所有项目都按需从中领取工具的使用权，而不是复制一份。这种模式在处理拥有大量共同依赖的多个项目时，效率和优势尽显。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;走过这趟深入 Python 环境管理底层的旅程，我们拨开了 &lt;code&gt;venv&lt;/code&gt;、&lt;code&gt;pyenv&lt;/code&gt; 与 &lt;code&gt;conda&lt;/code&gt; 这三位“魔术师”的神秘面纱。理解了这些原理，可以让我们更好地管理 Python 环境，并更高效地使用 Python。&lt;/p&gt;
&lt;p&gt;我们花费精力去理解工具的内在，是为了在日常工作中能彻底忘掉它们的存在，将所有心力都投入到代码和创造本身。希望本文能帮助你找到那把最称手的钥匙，去打开更广阔的开发世界。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python 虚拟环境管理工具选择建议</title>
        <link>https://mahaoliang.tech/p/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9%E5%BB%BA%E8%AE%AE/</link>
        <pubDate>Thu, 17 Jul 2025 10:37:55 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9%E5%BB%BA%E8%AE%AE/</guid>
        <description>&lt;p&gt;前面我写文章分别介绍了 Python 的两个虚拟环境管理工具 &lt;a class=&#34;link&#34; href=&#34;https://mahaoliang.tech/p/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86venv-%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;venv&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://mahaoliang.tech/p/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82-python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8-conda/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Conda&lt;/a&gt; ，并进行过适用场景对比。但具体应该如何选择呢，我想分享我个人的选择策略，希望能给你提供一个更具体的参考。&lt;/p&gt;
&lt;h2 id=&#34;macos&#34;&gt;macOS&lt;/h2&gt;
&lt;p&gt;在 &lt;strong&gt;MacBook Pro&lt;/strong&gt; 上，我一般进行纯 Python 开发，倾向于使用 &lt;code&gt;pyenv&lt;/code&gt; + &lt;code&gt;venv&lt;/code&gt; 的组合。&lt;code&gt;pyenv&lt;/code&gt; 负责管理和切换全局的 Python 版本，&lt;code&gt;venv&lt;/code&gt; 则为每个项目创建极致轻量的虚拟环境。&lt;/p&gt;
&lt;p&gt;这套组合非常优雅，工具链清晰解耦，完全符合这类项目的需求。&lt;/p&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;p&gt;Windows 上的情况要复杂一些。&lt;/p&gt;
&lt;p&gt;在我的 &lt;strong&gt;Windows 笔记本&lt;/strong&gt; 上，由于配备了 NVIDIA 显卡，可以用于 AI 和机器学习开发，所以会安装 &lt;code&gt;miniconda&lt;/code&gt;，但一定要注意：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不要“Add Miniconda3 to my PATH environment variable”&lt;/strong&gt;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;也&lt;strong&gt;不要“Register Miniconda3 as my default Python”&lt;/strong&gt;，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;避免干扰系统。如果想使用 &lt;code&gt;Conda&lt;/code&gt;，通过“开始菜单”找到并打开 &lt;strong&gt;Anaconda Prompt (Miniconda3)&lt;/strong&gt; 来使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至于使用哪种虚拟环境管理工具，需要根据场景选择。&lt;/p&gt;
&lt;h3 id=&#34;纯-python-开发&#34;&gt;纯 Python 开发&lt;/h3&gt;
&lt;p&gt;纯 Python 开发，仍然使用 &lt;code&gt;venv&lt;/code&gt; 创建虚拟环境。&lt;/p&gt;
&lt;h3 id=&#34;ai-开发&#34;&gt;AI 开发&lt;/h3&gt;
&lt;p&gt;AI 开发，需要依赖复杂的 &lt;a class=&#34;link&#34; href=&#34;https://developer.nvidia.com/cuda-downloads&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CUDA Toolkit&lt;/a&gt; 和 &lt;a class=&#34;link&#34; href=&#34;https://developer.nvidia.com/rdp/cudnn-archive&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cuDNN&lt;/a&gt;。按道理应该使用 &lt;code&gt;Conda&lt;/code&gt;，可以一键在虚拟环境中安装 CUDA Toolkit 和 cuDNN 本地依赖。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install &lt;span class=&#34;nv&#34;&gt;pytorch&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2.5.1 &lt;span class=&#34;nv&#34;&gt;torchvision&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;0.20.1 &lt;span class=&#34;nv&#34;&gt;torchaudio&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2.5.1 pytorch-cuda&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;12.4 -c pytorch -c nvidia
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但最新的 pytorch 安装向导 &lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Start Locally&lt;/a&gt;，已经取消了 &lt;code&gt;Conda&lt;/code&gt; 选项，只能在 &lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/previous-versions/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Previous PyTorch Versions&lt;/a&gt; 中找到 &lt;code&gt;Conda&lt;/code&gt; 的安装命令。&lt;/p&gt;
&lt;p&gt;PyTorch 官方在 2024 年 10 月 22 日通过 GitHub &lt;a class=&#34;link&#34; href=&#34;https://github.com/pytorch/pytorch/issues/138506&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Issue&lt;/a&gt; 正式宣布了这一重要决定：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;2.5 will be the last release of PyTorch that will be published to the pytorch channel on Anaconda.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;至于原因，官方声明中提到，将维护资源集中在用户最常用的平台上，可以提供更好的支持和更优质的用户体验。&lt;/p&gt;
&lt;p&gt;那么如果想使用最新版的 pytorch，就不能使用 Conda 了。还是老老实实&lt;a class=&#34;link&#34; href=&#34;https://www.gpu-mart.com/blog/install-cudnn-on-windows&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考文档&lt;/a&gt;，&lt;strong&gt;在全局环境中安装并设置 CUDA Toolkit 和 cuDNN，然后使用 &lt;code&gt;venv&lt;/code&gt; 创建虚拟环境，拷贝执行 &lt;a class=&#34;link&#34; href=&#34;https://pytorch.org/get-started/locally/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Start Locally&lt;/a&gt; 提供命令，在虚拟环境中安装 PyTorch。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;多版本需求&#34;&gt;多版本需求&lt;/h3&gt;
&lt;p&gt;如果你的项目依赖特定的 Python 版本，那么建议使用 Conda，为项目创建指定 Python 版本的虚拟环境。&lt;/p&gt;
&lt;h3 id=&#34;复杂的本地依赖&#34;&gt;复杂的本地依赖&lt;/h3&gt;
&lt;p&gt;Conda 能够轻松处理那些依赖复杂底层库，它不仅仅管理 Python 包，它管理的是一个完整的、包含所有底层二进制依赖的软件栈。对于依赖复杂非 Python 组件的项目，Conda 很适合。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>一文彻底搞懂 Python 环境管理神器 Conda</title>
        <link>https://mahaoliang.tech/p/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82-python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8-conda/</link>
        <pubDate>Tue, 15 Jul 2025 17:24:32 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/%E4%B8%80%E6%96%87%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82-python-%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86%E7%A5%9E%E5%99%A8-conda/</guid>
        <description>&lt;h2 id=&#34;为什么需要环境管理&#34;&gt;为什么需要环境管理？&lt;/h2&gt;
&lt;p&gt;“在我电脑上明明能跑啊！”&lt;/p&gt;
&lt;p&gt;这句经典的抱怨背后，是无数开发者都曾遭遇的“依赖地狱”：项目 A 需要 &lt;code&gt;TensorFlow 1.x&lt;/code&gt;，新项目 B 却要 &lt;code&gt;TensorFlow 2.x&lt;/code&gt;；团队成员间的环境难以统一；系统自带的 Python 环境被各种库弄得一团糟。&lt;/p&gt;
&lt;p&gt;解决这一切的关键在于&lt;strong&gt;环境隔离&lt;/strong&gt;：为每个项目创建一个独立的、干净的“沙盒”。而 &lt;strong&gt;Conda&lt;/strong&gt;，正是实现这一目标的利器。&lt;/p&gt;
&lt;p&gt;本文将是一份全面的 Conda 指南，带你从核心用法、工作原理到最佳实践，让你彻底告别环境管理的混乱，拥抱一个更专业、高效的开发工作流。&lt;/p&gt;
&lt;h2 id=&#34;conda-是什么&#34;&gt;Conda 是什么？&lt;/h2&gt;
&lt;p&gt;很多初学者会将 Conda 简单地等同于一个虚拟环境工具，就像 Python 自带的 &lt;code&gt;venv&lt;/code&gt;。这其实只说对了一半。要真正理解 Conda，你需要认识它的三重身份：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;环境管理器 (Environment Manager)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是 Conda 最广为人知的功能。它允许你创建相互隔离的独立环境。每个环境都可以拥有自己专属的 Python 版本和一套独立的软件包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你可以为项目 A 创建一个搭载 Python 3.7 和旧版库的环境。&lt;/li&gt;
&lt;li&gt;同时为项目 B 创建另一个搭载 Python 3.10 和最新库的环境。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两个环境井水不犯河水，你可以通过一条简单的命令在它们之间自由切换。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;包管理器 (Package Manager)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这是 Conda 与 &lt;code&gt;venv&lt;/code&gt; + &lt;code&gt;pip&lt;/code&gt; 组合的一个区别：&lt;code&gt;pip&lt;/code&gt; 是 Python 官方的包管理器，它主要从 PyPI (Python Package Index) 下载软件包；而 Conda 拥有自己独立的包管理系统和软件源（Channels）。&lt;/p&gt;
&lt;p&gt;它的关键优势在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;跨语言支持：&lt;/strong&gt; Conda 不仅仅能安装 Python 包！它可以安装和管理任何语言的软件包，比如 C/C++ 库、R 语言包、CUDA 工具链、MKL 数学库等。这对于数据科学和机器学习领域至关重要，因为许多高性能计算库（如 NumPy, TensorFlow）的底层都依赖于这些非 Python 组件。Conda 会一并帮你处理好这些复杂的依赖关系。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二进制分发：&lt;/strong&gt; &lt;code&gt;pip&lt;/code&gt; 有时会下载源码包，需要在你的本地机器上进行编译，这个过程可能因为缺少编译器或依赖库而失败。而 Conda 官方渠道中的包绝大多数都是预先编译好的二进制文件，针对你的操作系统（Windows, macOS, Linux）量身打造。这意味着 &lt;code&gt;conda install&lt;/code&gt; 通常比 &lt;code&gt;pip install&lt;/code&gt; 更快、更稳定，极大地避免了烦人的编译错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;发行版管理器 (Distribution Manager)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一点常常被忽视。Conda 能够将 &lt;strong&gt;Python 解释器本身&lt;/strong&gt;也视作一个普通的软件包来管理。当你执行 &lt;code&gt;conda create -n myenv python=3.9&lt;/code&gt; 时，Conda 不会去寻找你系统上已有的 Python，而是会从自己的软件源中下载一个纯净、独立的 Python 3.9 解释器，并安装到 &lt;code&gt;myenv&lt;/code&gt; 这个环境中。&lt;/p&gt;
&lt;p&gt;这意味着，你无需借助 &lt;code&gt;pyenv&lt;/code&gt; 这类工具，只用 Conda 就能在同一台机器上轻松拥有和管理 Python 3.7, 3.8, 3.9&amp;hellip; 等任意多个版本，并将它们分配给不同的项目环境。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结一下：&lt;/strong&gt; &lt;code&gt;venv&lt;/code&gt; 只负责创建隔离的环境“空壳”，包的安装和管理仍由 &lt;code&gt;pip&lt;/code&gt; 负责，且它无法管理 Python 版本。而 Conda 则是一个&lt;strong&gt;集环境隔离、包安装、依赖处理、Python 版本管理于一身的“全能瑞士军刀”&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;下载和安装&#34;&gt;下载和安装&lt;/h2&gt;
&lt;h3 id=&#34;anaconda-vs-miniconda&#34;&gt;Anaconda vs. Miniconda&lt;/h3&gt;
&lt;p&gt;在安装 Conda 时，你通常会遇到两个选项：Anaconda 和 Miniconda。这常常让新手感到困惑。&lt;/p&gt;
&lt;p&gt;可以这样理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Anaconda：&lt;/strong&gt; 这是一个“精装修豪华套餐”。它不仅包含了核心的 Conda 工具，还预装了一个特定版本的 Python 和超过 150 个常用的科学计算、数据分析包，如 NumPy, Pandas, Scipy, Jupyter Notebook 等。它的安装包体积较大（通常几百 MB 到数 GB），旨在提供“开箱即用”的体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Miniconda：&lt;/strong&gt; 这是一个“毛坯房”。它只包含了最核心的 Conda 工具和一个基础的 Python 解释器。整个安装包非常小巧（几十 MB）。安装完成后，你的环境是几乎纯净的，里面没有任何多余的包。你需要什么，就通过 &lt;code&gt;conda install&lt;/code&gt; 自己动手安装什么。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;我的建议是：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对于所有开发者，尤其是追求环境纯净和良好习惯的开发者，我们强烈推荐从 Miniconda 开始。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装 Miniconda 后，你就拥有了完整的 Conda 功能。需要用到 Anaconda 里的那些包？没问题，只需创建一个新环境，然后用 &lt;code&gt;conda install numpy pandas jupyter&lt;/code&gt; 一行命令就能搞定，效果完全一样。&lt;/p&gt;
&lt;h3 id=&#34;下载-miniconda&#34;&gt;下载 Miniconda&lt;/h3&gt;
&lt;p&gt;准备好开始了吗？让我们一起动手安装 Miniconda。&lt;/p&gt;
&lt;p&gt;访问 anaconda 的官方下载页面&lt;a class=&#34;link&#34; href=&#34;https://www.anaconda.com/download&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.anaconda.com/download&lt;/a&gt;，点击跳过注册，进入正式下载页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202507191817954.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;anaconda&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;在页面右侧“Miniconda Installers”的下方，根据你的操作系统和芯片架构，选择最新的安装包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.mahaoliang.tech/2024/202507191822829.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Miniconda&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;安装-miniconda&#34;&gt;安装 Miniconda&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Windows 用户&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;双击下载的 &lt;code&gt;.exe&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;在 &amp;ldquo;Installation Type&amp;rdquo; 步骤，推荐选择 &lt;strong&gt;“Just Me”&lt;/strong&gt;，这可以避免很多权限问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤：&lt;/strong&gt; 安装程序会提供两个高级选项，请按照推荐设置：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不勾选&lt;/strong&gt; &amp;ldquo;Add Miniconda3 to my PATH environment variable&amp;rdquo; (将 Miniconda 添加到系统 PATH)。官方不推荐这样做，因为它可能干扰系统上其他的软件。我们应当使用 Conda 自己的方式来激活环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不勾选&lt;/strong&gt; &amp;ldquo;Register Miniconda3 as my default Python&amp;rdquo; (将 Miniconda 注册为默认 Python)。如果你希望系统默认的 Python 就是 Conda 的，可以勾选，&lt;strong&gt;但对于初学者，不勾选也无妨，保持系统纯净&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完成安装后，通过“开始菜单”找到并打开 &lt;strong&gt;Anaconda Prompt (Miniconda3)&lt;/strong&gt; 来使用 Conda。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;macOS / Linux 用户&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;打开你的终端 (Terminal)。&lt;/li&gt;
&lt;li&gt;进入到你下载 &lt;code&gt;.sh&lt;/code&gt; 文件的目录（通常是 &lt;code&gt;Downloads&lt;/code&gt; 目录）。&lt;/li&gt;
&lt;li&gt;运行安装脚本，命令如下（请将文件名替换为你下载的实际文件名）：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bash Miniconda3-latest-MacOSX-arm64.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;安装过程中，按 &lt;code&gt;Enter&lt;/code&gt; 查看许可协议，然后输入 &lt;code&gt;yes&lt;/code&gt; 同意。&lt;/li&gt;
&lt;li&gt;当询问安装位置时，直接按 &lt;code&gt;Enter&lt;/code&gt; 接受默认路径即可（通常是 &lt;code&gt;~/miniconda3&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;关键步骤：&lt;/strong&gt; 安装的最后，它会询问 &lt;code&gt;Do you wish to update your shell profile to automatically initialize conda?&lt;/code&gt;。&lt;strong&gt;务必输入 &lt;code&gt;yes&lt;/code&gt;&lt;/strong&gt;。这一步会自动修改你的 shell 配置文件（如 &lt;code&gt;.bashrc&lt;/code&gt; 或 &lt;code&gt;.zshrc&lt;/code&gt;），让 &lt;code&gt;conda&lt;/code&gt; 命令在你的命令行终端中可用。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完成安装后，&lt;strong&gt;请务必关闭并重新打开你的终端窗口&lt;/strong&gt;（或 Anaconda Prompt）。这是为了让刚才的 &lt;code&gt;conda init&lt;/code&gt; 配置生效。&lt;/p&gt;
&lt;p&gt;然后，输入以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果安装成功，它会显示出 Conda 的版本号，例如 &lt;code&gt;conda 25.5.1&lt;/code&gt;。你可能还会注意到，命令行提示符的前面多了一个 &lt;code&gt;(base)&lt;/code&gt; 的字样。这表示你当前正处于 Conda 的 &lt;code&gt;base&lt;/code&gt; 环境中。&lt;/p&gt;
&lt;p&gt;恭喜你，Conda 已经成功安装并准备就绪！接下来，我们将学习如何驾驭它。&lt;/p&gt;
&lt;h2 id=&#34;conda-核心命令实战&#34;&gt;Conda 核心命令实战&lt;/h2&gt;
&lt;p&gt;Conda 的强大之处在于其简洁而强大的命令行接口。掌握下面这些核心命令，你就足以应对 95% 以上的日常开发需求。&lt;/p&gt;
&lt;p&gt;打开你的终端（macOS/Linux）或 Anaconda Prompt (Windows)，让我们开始施展魔法。&lt;/p&gt;
&lt;h3 id=&#34;环境管理-environment-management&#34;&gt;环境管理 (Environment Management)&lt;/h3&gt;
&lt;p&gt;环境管理是 Conda 的基石。请记住：&lt;strong&gt;不要在 &lt;code&gt;base&lt;/code&gt; 环境中工作，为每个项目创建新环境。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建新环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设我们要启动一个名为 &lt;code&gt;data_analysis&lt;/code&gt; 的新项目，并且希望使用 &lt;code&gt;Python 3.10.18&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 语法: conda create --name &amp;lt;环境名&amp;gt; python=&amp;lt;python版本&amp;gt; [其他包...]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create --name data_analysis &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.10.18
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Conda 会解析依赖，下载一个独立的 Python 3.10.18 和一些基础包，然后为你创建一个名为 &lt;code&gt;data_analysis&lt;/code&gt; 的环境。你还可以在创建时就指定要安装的包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 创建环境的同时安装 pandas 和 matplotlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda create -n data_analysis &lt;span class=&#34;nv&#34;&gt;python&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;3.10.18 pandas matplotlib
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意，参数 &lt;code&gt;--name&lt;/code&gt; 可以缩写为 &lt;code&gt;-n&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看可安装的 Python 版本&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在创建环境时，你可能会问：“我怎么知道哪些 Python 版本是可用的呢？”Conda 把 Python 也当作一个包来管理，所以我们可以用 &lt;code&gt;search&lt;/code&gt; 命令来查找：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda search python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会列出 Conda 软件源中所有可供安装的 Python 版本。这样，在执行 &lt;code&gt;conda create&lt;/code&gt; 之前，你就可以清楚地知道有哪些版本可以选择。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;激活（进入）环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;环境创建好后，它就像一个独立的房间，使用 &lt;code&gt;activate&lt;/code&gt; 命令进入它：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate data_analysis
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行后，你会发现命令行提示符的前缀从 &lt;code&gt;(base)&lt;/code&gt; 变成了 &lt;code&gt;(data_analysis)&lt;/code&gt;。这明确地告诉你：&lt;strong&gt;你现在就在 &lt;code&gt;data_analysis&lt;/code&gt; 这个沙盒里了！&lt;/strong&gt; 在此之后，你所有关于 &lt;code&gt;python&lt;/code&gt;、&lt;code&gt;pip&lt;/code&gt;、&lt;code&gt;conda install&lt;/code&gt; 的操作，都将只影响这个环境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;停用（退出）环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;项目工作完成后，或者需要切换到其他项目时，使用 &lt;code&gt;deactivate&lt;/code&gt; 命令退出当前环境，返回到 &lt;code&gt;base&lt;/code&gt; 环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda deactivate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;执行后，提示符前面的 &lt;code&gt;(data_analysis)&lt;/code&gt; 就会消失，变回 &lt;code&gt;(base)&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;列出所有环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想看看自己都创建了哪些独立环境？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda env list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 或者 conda info --envs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会列出所有已创建的环境，并在当前激活的环境旁边用星号 &lt;code&gt;*&lt;/code&gt; 标记。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;删除环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个项目彻底结束，不再需要对应的环境时，可以将其彻底删除以释放磁盘空间。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 确保你已退出该环境 (conda deactivate)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 语法：conda remove --name &amp;lt;环境名&amp;gt; --all&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda remove -n data_analysis --all
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;--all&lt;/code&gt; 参数至关重要，它会删除环境下的所有包以及环境本身。&lt;/p&gt;
&lt;h3 id=&#34;包管理-package-management&#34;&gt;包管理 (Package Management)&lt;/h3&gt;
&lt;p&gt;进入了指定的环境后，接下来就是为项目“添砖加瓦”——安装所需要的各种库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装包&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;strong&gt;已激活&lt;/strong&gt;的环境中，使用 &lt;code&gt;conda install&lt;/code&gt; 命令。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 激活环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate data_analysis
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 安装单个包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install scikit-learn
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 同时安装多个包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install beautifulsoup4 requests
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 安装指定版本的包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda install &lt;span class=&#34;nv&#34;&gt;tensorflow&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;2.10.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看已安装的包&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 必须在激活的环境中执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda list
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上面的命令会列出当前环境中所有的包及其版本号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;搜索可用的包&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不确定某个包是否存在，或者想看看有哪些可用的版本？&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda search numpy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个命令会搜索所有名为 numpy 的包及其可用版本。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;更新包&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 更新单个包到最新兼容版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda update pandas
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 更新环境中的所有包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda update --all 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;删除包&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从当前环境中删除一个包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda remove beautifulsoup4
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;环境复现&#34;&gt;&lt;strong&gt;环境复现&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;这是 Conda 最强大的功能之一，也是保证团队协作一致性的关键。我们可以将一个环境的所有配置导出到一个文件中，其他人拿到这个文件就能一键复制出完全相同的环境。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;导出环境配置&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，激活你想要导出的环境，然后执行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda activate data_analysis
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda env &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &amp;gt; environment.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会生成一个名为 &lt;code&gt;environment.yml&lt;/code&gt; 的文件。打开它看看，里面精确记录了环境名称、所有包的版本号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;从文件创建环境&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你的同事拿到这个 &lt;code&gt;environment.yml&lt;/code&gt; 文件后，只需一行命令，就能在自己的机器上克隆出一个一模一样的环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 无需先创建环境，Conda 会根据文件中的名字自动创建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;conda env create -f environment.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;核心命令总结&#34;&gt;核心命令总结&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;功能分类&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;常用命令&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;环境管理&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda create -n myenv python=3.10.18&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;创建一个名为 myenv 的新环境，并指定 Python 版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda activate myenv&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;激活（进入）指定的环境。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda deactivate&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;停用（退出）当前环境，返回 base 环境。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda env list&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;列出所有已创建的环境。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda remove -n myenv --all&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;彻底删除一个环境及其所有内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;包管理&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda install &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在当前激活的环境中安装一个或多个包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda list&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查看当前激活环境中已安装的所有包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda update &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;更新指定的包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda remove &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;从当前激活的环境中移除一个包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;环境复现&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda env export &amp;gt; environment.yml&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将当前激活环境的配置导出到 &lt;code&gt;environment.yml&lt;/code&gt; 文件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda env create -f environment.yml&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;根据 &lt;code&gt;environment.yml&lt;/code&gt; 文件创建或复现一个完整的环境。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;信息查询&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda --version&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;查看 Conda 的版本号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda search python&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;列出 Conda 源中所有可供安装的 Python 版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;conda search &amp;lt;package_name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在软件源中搜索一个包的所有可用版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;深入原理conda-是如何工作的&#34;&gt;深入原理：Conda 是如何工作的？&lt;/h2&gt;
&lt;p&gt;我们已经学会了 Conda 的核心命令，能够熟练地创建、切换和管理环境。但是，你是否好奇过：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当执行 &lt;code&gt;conda install numpy&lt;/code&gt; 时，这个包到底被安装到哪儿去了？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;conda activate myenv&lt;/code&gt; 这条命令，是如何让 &lt;code&gt;python&lt;/code&gt; 指向一个全新的解释器？&lt;/li&gt;
&lt;li&gt;Conda 会不会搞乱系统自带的 Python 环境呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;让我们一起深入 Conda 的“后台”，一探究竟。&lt;/p&gt;
&lt;h3 id=&#34;依赖安装到哪里了&#34;&gt;&lt;strong&gt;依赖安装到哪里了？&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;当安装 Miniconda 后，它会在你的用户主目录下创建一个文件夹：macOS 上默认是&lt;code&gt;~/miniconda3&lt;/code&gt;，Windows 上默认是 &lt;code&gt;C:\Users\&amp;lt;用户名&amp;gt;\miniconda3&lt;/code&gt;。这个文件夹就是 Conda 的大本营，其中有两个子目录至关重要：&lt;code&gt;envs&lt;/code&gt; 和 &lt;code&gt;pkgs&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;envs&lt;/code&gt; 目录：环境的独立“公寓”&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;envs&lt;/code&gt; 目录是所有虚拟环境的家。当你执行 &lt;code&gt;conda create -n data_analysis&lt;/code&gt; 时，Conda 会在 &lt;code&gt;envs&lt;/code&gt; 目录下创建一个名为 &lt;code&gt;data_analysis&lt;/code&gt; 的子文件夹。&lt;/p&gt;
&lt;p&gt;这个 &lt;code&gt;data_analysis&lt;/code&gt; 文件夹&lt;strong&gt;不是一个空壳，而是一个几近完整的、独立的 Python 环境&lt;/strong&gt;。它里面包含了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个独立的 Python 解释器 (&lt;code&gt;envs/data_analysis/bin/python&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;独立的包安装目录 (&lt;code&gt;envs/data_analysis/lib/pythonX.X/site-packages&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;所有安装到这个环境的包的二进制文件和脚本 (&lt;code&gt;envs/data_analysis/bin/&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ tree -L &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; ~/miniconda3/envs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/Users/haoliangma/miniconda3/envs
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── data_analysis
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── python -&amp;gt; python3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── python3 -&amp;gt; python3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── python3.1 -&amp;gt; python3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── python3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   └── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ├── lib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   ├── python3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │   ├── site-packages
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │   │── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   │   └── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    │   └── ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;每个环境都是一个独立的目录，这就是 Conda 实现文件级别隔离的基础。删除环境时，只需删掉 &lt;code&gt;envs&lt;/code&gt; 下对应的文件夹即可，干净利落。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;pkgs&lt;/code&gt; 目录：包的中央仓库&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个目录存储所有下载的包文件缓存。Conda 会将下载的包保存在这里，以便在创建或更新环境时可以快速访问，而无需重新下载。&lt;/p&gt;
&lt;h3 id=&#34;如何做到隔离的&#34;&gt;如何做到隔离的？&lt;/h3&gt;
&lt;p&gt;文件隔离解决了存储问题，但运行时隔离又是如何实现的呢？为什么在激活 &lt;code&gt;data_analysis&lt;/code&gt; 后，我在终端里输入 &lt;code&gt;python&lt;/code&gt;，系统就知道要运行 &lt;code&gt;~/miniconda3/envs/data_analysis/bin/python&lt;/code&gt;，而不是系统自带的 &lt;code&gt;/usr/bin/python&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;答案在于一个至关重要的环境变量：&lt;code&gt;PATH&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PATH&lt;/code&gt; 变量是一系列由冒号（在 Windows 上是分号）隔开的目录路径。当你在终端输入一个命令（如 &lt;code&gt;python&lt;/code&gt;、&lt;code&gt;pip&lt;/code&gt;）时，操作系统会&lt;strong&gt;按照 &lt;code&gt;PATH&lt;/code&gt; 变量中列出的顺序&lt;/strong&gt;，从左到右依次在这些目录里查找是否存在同名的可执行文件。一旦找到，就立即执行，并停止向后搜索。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda activate data_analysis&lt;/code&gt; 命令的核心魔法就在于：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;它会暂时性地修改当前终端会话的 &lt;code&gt;PATH&lt;/code&gt; 变量，将当前激活环境的 &lt;code&gt;bin&lt;/code&gt; 目录路径（例如 &lt;code&gt;~/miniconda3/envs/data_analysis/bin&lt;/code&gt;）添加到 &lt;code&gt;PATH&lt;/code&gt; 变量的最前面。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们看一个例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;激活前&lt;/strong&gt;，查看 &lt;code&gt;PATH&lt;/code&gt; 环境变量：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/Users/haoliangma/miniconda3/bin:...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;执行 &lt;code&gt;conda activate data_analysis&lt;/code&gt; &lt;strong&gt;之后&lt;/strong&gt;，查看 &lt;code&gt;PATH&lt;/code&gt; 环境变量：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ conda activate data_analysis
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/Users/haoliangma/miniconda3/envs/data_analysis/bin:...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;现在，当你输入 &lt;code&gt;python&lt;/code&gt;，操作系统会首先在 &lt;code&gt;~/miniconda3/envs/data_analysis/bin&lt;/code&gt; 目录里查找。找到了，它立刻执行这个文件，搜索结束。&lt;/p&gt;
&lt;p&gt;系统自带的 &lt;code&gt;/usr/bin/python&lt;/code&gt; 因为排在后面，根本没有机会被找到。这就实现了运行时的完美隔离。&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;conda deactivate&lt;/code&gt; 命令则执行相反的操作：它会从 &lt;code&gt;PATH&lt;/code&gt; 变量中移除之前添加的路径，将其恢复到激活前的状态。&lt;/p&gt;
&lt;h3 id=&#34;conda-会影响系统环境吗&#34;&gt;Conda 会影响系统环境吗？&lt;/h3&gt;
&lt;p&gt;设计上，Conda 不会“污染”你的系统环境。&lt;/p&gt;
&lt;p&gt;Conda 所有的环境和包都严格限制在 Miniconda 的安装目录内。&lt;code&gt;conda activate&lt;/code&gt; 对 &lt;code&gt;PATH&lt;/code&gt; 的修改也仅限于当前的终端会话，一旦关闭窗口，一切都会复原。它不会去修改或覆盖你系统目录（如 &lt;code&gt;/usr/bin&lt;/code&gt;）下的任何文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;唯一的“例外”是 &lt;code&gt;conda init&lt;/code&gt; 命令。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在你安装 Miniconda 的最后一步，或者手动执行 &lt;code&gt;conda init zsh&lt;/code&gt; 时，它会在你的 Shell 配置文件（&lt;code&gt;~/.zshrc&lt;/code&gt;）的末尾添加一小段脚本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这一步是必要且安全的。&lt;/strong&gt; 这段脚本的作用是让 &lt;code&gt;conda activate&lt;/code&gt; 等命令能够正确地修改你当前 Shell 的环境变量。如果没有它，&lt;code&gt;conda&lt;/code&gt; 命令本身可能可用，但 &lt;code&gt;activate&lt;/code&gt; 这种需要与 Shell 交互的功能将无法工作。&lt;/p&gt;
&lt;p&gt;你可以随时打开你的 &lt;code&gt;.bashrc&lt;/code&gt; 或 &lt;code&gt;.zshrc&lt;/code&gt; 文件查看 Conda 添加的内容，它有清晰的注释 &lt;code&gt;# &amp;gt;&amp;gt;&amp;gt; conda initialize &amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;。如果你想彻底移除 Conda，除了删除 Miniconda 的安装目录，只需将这段脚本从配置文件中删除即可。&lt;/p&gt;
&lt;h2 id=&#34;横向对比选择适合的工具&#34;&gt;横向对比，选择适合的工具&lt;/h2&gt;
&lt;p&gt;Conda 功能强大，但它并非唯一的环境管理工具。在 Python 的世界里，还有 &lt;code&gt;venv&lt;/code&gt; 和 &lt;code&gt;pyenv&lt;/code&gt; 等广受欢迎的工具，它们有各自不同的适用场景。&lt;/p&gt;
&lt;p&gt;理解它们之间的区别，能帮助你根据自己的项目需求，选择最合适的工具。&lt;/p&gt;
&lt;h3 id=&#34;conda-vs-venv&#34;&gt;Conda vs. venv&lt;/h3&gt;
&lt;p&gt;这是最常见的比较。&lt;code&gt;venv&lt;/code&gt; 是 Python 3.3+ 版本中内置的虚拟环境创建工具，它通常与 &lt;code&gt;pip&lt;/code&gt;（Python 官方包安装器）配合使用，形成了一套轻量级的环境管理方案。&lt;/p&gt;
&lt;p&gt;让我们用一个表格来清晰地对比它们：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;特性 / 对比项&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Conda&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;venv + Pip&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;核心定位&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;一体化解决方案&lt;/strong&gt;：环境、包、Python 版本全包&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;轻量级组合拳&lt;/strong&gt;：venv 管环境，pip 管包&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;管理范围&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;语言无关&lt;/strong&gt;：能管理 Python, R, C++, CUDA 等任何软件包。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;专注 Python&lt;/strong&gt;：只能管理 Python 包。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Python 版本管理&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;内置功能&lt;/strong&gt;：可自行下载和管理任意版本的 Python 解释器。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;不具备&lt;/strong&gt;：使用创建环境时系统当前激活的 Python 版本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;包来源&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Conda Channels (如 anaconda, conda-forge)，主要是&lt;strong&gt;预编译二进制包&lt;/strong&gt;。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;PyPI (Python Package Index)，包含源码包和 Wheels (二进制包)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;依赖解析能力&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;非常强大&lt;/strong&gt;。Conda 在安装前会进行严格的依赖关系检查，能解决复杂的非 Python 依赖（如 MKL, cuDNN）。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;相对较弱&lt;/strong&gt;。Pip 的依赖解析器近年来有改进，但处理复杂或冲突的依赖时仍可能遇到困难。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;跨平台一致性&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;极高&lt;/strong&gt;。通过 &lt;code&gt;environment.yml&lt;/code&gt; 文件，可以保证在 Windows, macOS, Linux 上复现几乎完全一致的环境。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;较好，但有风险&lt;/strong&gt;。&lt;code&gt;requirements.txt&lt;/code&gt; 文件在不同操作系统间可能因系统级依赖不同而表现不一。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;适用场景&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;数据科学、机器学习、生物信息学&lt;/strong&gt;等需要复杂&lt;strong&gt;非 Python 依赖&lt;/strong&gt;的项目；需要管理多 Python 版本的场景。&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;strong&gt;Web 开发 (Django, Flask)、纯 Python 库开发、简单脚本&lt;/strong&gt;等依赖相对纯净的场景。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;简单总结：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择 &lt;code&gt;venv + pip&lt;/code&gt;&lt;/strong&gt;，如果你：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在做纯粹的 Python 项目，如 Web 开发。&lt;/li&gt;
&lt;li&gt;项目的依赖项简单，不涉及复杂的 C/C++ 库。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;选择 &lt;code&gt;Conda&lt;/code&gt;&lt;/strong&gt;，如果你：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据科学或科学计算领域，需要处理 NumPy, SciPy, TensorFlow 等依赖复杂底层库的包。&lt;/li&gt;
&lt;li&gt;需要在一个项目中混合使用 Python 和其他语言的工具（如 R）。&lt;/li&gt;
&lt;li&gt;希望一个工具就能搞定环境和 Python 版本的所有问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conda-vs-pyenv&#34;&gt;Conda vs. pyenv&lt;/h3&gt;
&lt;p&gt;另一个让初学者困惑的组合是 &lt;code&gt;Conda&lt;/code&gt; 和 &lt;code&gt;pyenv&lt;/code&gt;。两者似乎都能管理 Python 版本，它们有什么不同？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 是一个&lt;strong&gt;纯粹的 Python 版本管理器&lt;/strong&gt;。它的目标只有一个：让你在系统上轻松安装、切换多个 Python 版本（例如，全局用 3.10，某个项目用 3.8）。它本身&lt;strong&gt;不管理虚拟环境&lt;/strong&gt;。&lt;code&gt;pyenv&lt;/code&gt; 需要和 &lt;code&gt;venv&lt;/code&gt; 配合使用：用 &lt;code&gt;pyenv&lt;/code&gt; 切换到项目的目标 Python 版本，然后用该版本下的 &lt;code&gt;venv&lt;/code&gt; 模块创建项目专属的虚拟环境。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyenv&lt;/code&gt; 通过一种名为 &amp;ldquo;shims&amp;rdquo; 的机制工作。它会在你的 &lt;code&gt;PATH&lt;/code&gt; 路径最前面插入一个 &lt;code&gt;~/.pyenv/shims&lt;/code&gt; 目录。当你执行 &lt;code&gt;python&lt;/code&gt; 命令时，实际运行的是 &lt;code&gt;shims&lt;/code&gt; 里的一个脚本，这个脚本会根据你当前的配置（全局、项目局部等）决定启动哪个版本的真实 Python 解释器。&lt;/p&gt;
&lt;p&gt;如前所述，Conda 将 Python 解释器本身也视为一个普通的“包”。&lt;code&gt;conda create -n data_analysis python=3.8&lt;/code&gt; 会为你下载并安装一个独立的 Python 3.8，它与系统中的其他 Python 绝缘。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键区别：&lt;/strong&gt; &lt;code&gt;pyenv&lt;/code&gt; 管理的是“裸露”的 Python 解释器，而 &lt;code&gt;Conda&lt;/code&gt; 管理的是包含 Python 解释器的“环境”。&lt;/p&gt;
&lt;h4 id=&#34;强烈建议不要同时使用-conda-和-pyenv&#34;&gt;强烈建议不要同时使用 Conda 和 pyenv&lt;/h4&gt;
&lt;p&gt;混用 Conda 和 pyenv 就像让两个不同的交通指挥员，在同一个十字路口同时指挥交通，结果必然是&lt;strong&gt;混乱和冲突&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;冲突的根源在于 &lt;code&gt;PATH&lt;/code&gt; 的控制权之争：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyenv&lt;/code&gt; 通过 shims 机制，劫持了 &lt;code&gt;python&lt;/code&gt; 命令的调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Conda&lt;/code&gt; 通过 &lt;code&gt;conda activate&lt;/code&gt;，修改 &lt;code&gt;PATH&lt;/code&gt; 变量，也想控制 &lt;code&gt;python&lt;/code&gt; 命令的指向。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当你同时安装并初始化了两者，执行 &lt;code&gt;python&lt;/code&gt; 命令时，到底听谁的？这取决于你的 Shell 配置中，谁的初始化脚本排在后面，谁就可能覆盖前者的设置。这会导致一些极其诡异且难以排查的问题。&lt;/p&gt;
&lt;p&gt;如果你的工作流&lt;strong&gt;以数据科学为中心&lt;/strong&gt;，或者你喜欢 Conda 的一体化便利性，&lt;strong&gt;那就只用 Conda&lt;/strong&gt;。让它来管理你所有的环境和 Python 版本。&lt;/p&gt;
&lt;p&gt;如果你是一名 &lt;strong&gt;Python Web 开发者&lt;/strong&gt;或库开发者，偏爱 &lt;strong&gt;UNIX-like 的小工具组合哲学&lt;/strong&gt;，那么 &lt;strong&gt;&lt;code&gt;pyenv + venv&lt;/code&gt;&lt;/strong&gt; 是一个非常优雅和强大的组合。&lt;/p&gt;
&lt;p&gt;避免将两者混合，可以为你节省大量调试环境问题的时间，让你可以专注于代码本身。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;回顾一下我们的收获，Conda 的核心价值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不仅仅是虚拟环境：&lt;/strong&gt; 我们了解到，Conda 是一个集&lt;strong&gt;环境管理、包管理、Python 版本管理&lt;/strong&gt;于一身的“三合一”强大工具。它通过在 &lt;code&gt;envs&lt;/code&gt; 目录中创建隔离的文件系统，并在 &lt;code&gt;pkgs&lt;/code&gt; 目录中共享缓存，实现了高效、节省空间的隔离。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;强大的依赖处理：&lt;/strong&gt; 凭借其跨语言的包管理能力和预编译的二进制包，Conda 能够轻松处理那些依赖复杂底层库（如 C++, FORTRAN, CUDA）的科学计算包，这是它在数据科学领域封神的关键。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们对比了 Conda 与 venv/pip 和 pyenv 的区别，结论是：没有最好的工具，只有最适合你当前场景的工具。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Python 虚拟环境管理：venv 实用指南</title>
        <link>https://mahaoliang.tech/p/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86venv-%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</link>
        <pubDate>Tue, 01 Jul 2025 16:21:43 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/python-%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86venv-%E5%AE%9E%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h2 id=&#34;python-虚拟环境概述&#34;&gt;Python 虚拟环境概述&lt;/h2&gt;
&lt;h3 id=&#34;为什么需要虚拟环境&#34;&gt;为什么需要虚拟环境&lt;/h3&gt;
&lt;p&gt;在 Python 开发中，不同的项目往往需要不同版本的 Python 解释器和第三方库。如果所有项目都共享同一套全局 Python 环境，很容易导致版本冲突和依赖混乱。虚拟环境通过创建隔离的 Python 运行环境，解决了这一问题，确保每个项目都能独立管理自己的依赖关系。&lt;/p&gt;
&lt;p&gt;虚拟环境的核心优势包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;环境隔离&lt;/strong&gt;：不同项目的依赖相互隔离，避免版本冲突&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;系统保护&lt;/strong&gt;：保持系统全局 Python 环境干净整洁，防止不必要的包污染&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;项目可移植性&lt;/strong&gt;：通过&lt;code&gt;requirements.txt&lt;/code&gt;文件记录依赖，方便在不同环境中重建相同的运行环境&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;版本控制&lt;/strong&gt;：可以为每个项目指定特定的 Python 版本和库版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;venv-目录结构&#34;&gt;venv 目录结构&lt;/h3&gt;
&lt;p&gt;venv 是 Python 3.3 及以上版本内置的虚拟环境创建工具，它的工作原理是通过创建一个独立的目录结构，其中包含 Python 解释器的符号链接和独立的&lt;code&gt;site-packages&lt;/code&gt;目录。当你使用&lt;code&gt;python -m venv myenv&lt;/code&gt;命令创建虚拟环境时，会生成以下关键文件和目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;myenv/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── bin/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── python -&amp;gt; # 指向系统Python解释器的符号链接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── pip
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── lib/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── python3.13/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       └── site-packages/  # 第三方包安装目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── pyvenv.cfg  # 环境配置文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;venv-基础操作指南&#34;&gt;venv 基础操作指南&lt;/h2&gt;
&lt;h3 id=&#34;创建虚拟环境&#34;&gt;创建虚拟环境&lt;/h3&gt;
&lt;p&gt;要创建一个新的虚拟环境，使用以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# macOS/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m venv myenv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python -m venv myenv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;myenv&lt;/code&gt;是虚拟环境的名称，你可以根据需要修改。执行上述命令后，会在当前目录下创建一个名为&lt;code&gt;myenv&lt;/code&gt;的文件夹，其中包含虚拟环境的所有文件和目录。&lt;/p&gt;
&lt;h3 id=&#34;激活虚拟环境&#34;&gt;激活虚拟环境&lt;/h3&gt;
&lt;p&gt;创建虚拟环境后，需要激活它才能使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# macOS/Linux
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;source myenv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Windows (命令提示符)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;myenv\Scripts\activate.bat
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# Windows (PowerShell)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;myenv\Scripts\Activate.ps1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;激活成功后，你会注意到命令提示符前出现了虚拟环境的名称，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;myenv&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; $
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这表示你现在正在&lt;code&gt;myenv&lt;/code&gt;虚拟环境中工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;激活虚拟环境的本质&lt;/strong&gt;，实际上是执行了一个脚本，该脚本会：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置&lt;code&gt;VIRTUAL_ENV&lt;/code&gt;环境变量指向虚拟环境的根目录&lt;/li&gt;
&lt;li&gt;修改系统 &lt;code&gt;PATH&lt;/code&gt; 环境变量，将虚拟环境的&lt;code&gt;bin&lt;/code&gt;或&lt;code&gt;Scripts&lt;/code&gt;目录添加到最前面&lt;/li&gt;
&lt;li&gt;确保后续执行的&lt;code&gt;python&lt;/code&gt;和&lt;code&gt;pip&lt;/code&gt;命令都指向虚拟环境中的版本&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;停用虚拟环境&#34;&gt;停用虚拟环境&lt;/h3&gt;
&lt;p&gt;当你完成工作后，可以通过以下命令退出虚拟环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ deactivate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;退出后，你将返回到系统的全局 Python 环境，虚拟环境的相关设置将不再生效。&lt;/p&gt;
&lt;h3 id=&#34;验证虚拟环境&#34;&gt;验证虚拟环境&lt;/h3&gt;
&lt;p&gt;在激活虚拟环境后，你可以通过以下方式验证环境是否正确设置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;检查 Python 版本&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ python --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这将显示虚拟环境中使用的 Python 版本。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;检查 Python 解释器路径&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# macOS/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;which python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;where python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出应该是虚拟环境中 Python 解释器的路径，例如&lt;code&gt;/path/to/your/project/myenv/bin/python&lt;/code&gt;（macOS/Linux）或&lt;code&gt;C:\path\to\your\project\myenv\Scripts\python.exe&lt;/code&gt;（Windows）。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;检查 pip 版本&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这将显示虚拟环境中使用的 pip 版本。&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;检查环境变量&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# macOS/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$VIRTUAL_ENV&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; %VIRTUAL_ENV%
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;输出应该是虚拟环境的根目录路径。&lt;/p&gt;
&lt;h2 id=&#34;依赖管理与包操作&#34;&gt;依赖管理与包操作&lt;/h2&gt;
&lt;h3 id=&#34;安装包&#34;&gt;安装包&lt;/h3&gt;
&lt;p&gt;在激活的虚拟环境中，你可以使用&lt;code&gt;pip&lt;/code&gt;命令安装项目所需的 Python 包。安装包的基本语法如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install package_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，要安装&lt;code&gt;requests&lt;/code&gt;库，可以执行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install requests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果需要安装特定版本的包，可以使用以下语法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install &lt;span class=&#34;nv&#34;&gt;package_name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;version_number
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，要安装&lt;code&gt;requests&lt;/code&gt;库的 2.26.0 版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install &lt;span class=&#34;nv&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2.26.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当你在虚拟环境中安装包时，这些包会被安装到虚拟环境的&lt;code&gt;site-packages&lt;/code&gt;目录中。具体路径如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# macOS/Linux&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;myenv/lib/python3.x/site-packages/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Windows&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;myenv/Lib/site-packages/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个目录是虚拟环境隔离的关键，确保包不会被安装到系统全局环境中。&lt;/p&gt;
&lt;h3 id=&#34;更新包&#34;&gt;更新包&lt;/h3&gt;
&lt;p&gt;当需要更新虚拟环境中的包时，可以使用以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install --upgrade package_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，要更新&lt;code&gt;requests&lt;/code&gt;库到最新版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install --upgrade requests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;卸载包&#34;&gt;卸载包&lt;/h3&gt;
&lt;p&gt;当某个包不再需要时，可以使用以下命令卸载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip uninstall package_name
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，要卸载&lt;code&gt;requests&lt;/code&gt;库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip uninstall requests
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;卸载时，pip 会提示你确认是否卸载该包，输入&lt;code&gt;y&lt;/code&gt;确认即可。&lt;/p&gt;
&lt;h3 id=&#34;管理依赖列表&#34;&gt;管理依赖列表&lt;/h3&gt;
&lt;p&gt;对于较大的项目，管理所有依赖和它们的版本可能会变得复杂。&lt;code&gt;pip&lt;/code&gt;允许你使用&lt;code&gt;requirements.txt&lt;/code&gt;文件来跟踪这些依赖。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;生成依赖列表&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这将在当前目录下创建一个&lt;code&gt;requirements.txt&lt;/code&gt;文件，其中包含所有已安装包及其版本号&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;安装依赖列表&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip install -r requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这将安装&lt;code&gt;requirements.txt&lt;/code&gt;文件中列出的所有包及其指定版本。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;更新依赖列表&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你安装或更新包后，需要重新生成&lt;code&gt;requirements.txt&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pip freeze &amp;gt; requirements.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;requirements.txt&lt;/code&gt;文件的格式通常如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;certifi&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2025.7.14
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;charset-normalizer&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;3.4.2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;idna&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;3.10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2.32.4
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;urllib3&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;2.5.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;vs-code-集成&#34;&gt;VS Code 集成&lt;/h2&gt;
&lt;p&gt;VS Code 对 Python 虚拟环境提供了良好的支持，以下是在 VS Code 中使用 venv 的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;安装 Python 扩展&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;打开 VS Code，按下&lt;code&gt;Ctrl+Shift+X&lt;/code&gt;（Windows/Linux）或&lt;code&gt;Cmd+Shift+X&lt;/code&gt;（macOS）打开扩展市场，搜索并安装 &amp;ldquo;Python&amp;rdquo; 扩展。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;打开项目目录&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用&lt;code&gt;File &amp;gt; Open Folder&lt;/code&gt;打开包含虚拟环境的项目目录。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;创建新终端&lt;/strong&gt;：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当你创建新终端时，VS Code 会自动激活当前选择的虚拟环境，命令提示符前会显示环境名称。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;在本文中，我们详细介绍了 Python 虚拟环境（venv）的使用方法和工作原理。&lt;/p&gt;
&lt;h3 id=&#34;虚拟环境基本使用&#34;&gt;虚拟环境基本使用&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作类型&lt;/th&gt;
&lt;th&gt;macOS/Linux 命令&lt;/th&gt;
&lt;th&gt;Windows（命令提示符）命令&lt;/th&gt;
&lt;th&gt;Windows（PowerShell）命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;创建虚拟环境&lt;/td&gt;
&lt;td&gt;&lt;code&gt;python -m venv myenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;python -m venv myenv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;python -m venv myenv&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;激活虚拟环境&lt;/td&gt;
&lt;td&gt;&lt;code&gt;source myenv/bin/activate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;myenv\Scripts\activate.bat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;myenv\Scripts\Activate.ps1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;停用虚拟环境&lt;/td&gt;
&lt;td&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;deactivate&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;验证 Python 版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;python --version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;python --version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;python --version&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;验证 Python 解释器路径&lt;/td&gt;
&lt;td&gt;&lt;code&gt;which python&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;where python&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;where python&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;验证 pip 版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip --version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip --version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip --version&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;验证环境变量&lt;/td&gt;
&lt;td&gt;&lt;code&gt;echo $VIRTUAL_ENV&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;echo %VIRTUAL_ENV%&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;echo $env:VIRTUAL_ENV&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;依赖管理基本使用&#34;&gt;依赖管理基本使用&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作类型&lt;/th&gt;
&lt;th&gt;操作说明&lt;/th&gt;
&lt;th&gt;执行命令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;安装包&lt;/td&gt;
&lt;td&gt;安装指定第三方包（默认最新版本）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip install package_name&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装特定版本包&lt;/td&gt;
&lt;td&gt;安装指定版本的第三方包，避免版本冲突&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip install package_name==version_number&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;更新包&lt;/td&gt;
&lt;td&gt;将已安装的包更新到最新版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip install --upgrade package_name&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;卸载包&lt;/td&gt;
&lt;td&gt;移除已安装的第三方包&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip uninstall package_name&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;生成依赖列表&lt;/td&gt;
&lt;td&gt;将当前环境中所有已安装包及版本信息导出到 &lt;code&gt;requirements.txt&lt;/code&gt; 文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安装依赖列表&lt;/td&gt;
&lt;td&gt;根据 &lt;code&gt;requirements.txt&lt;/code&gt; 文件安装所有指定包及对应版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看已安装包&lt;/td&gt;
&lt;td&gt;列出当前环境中所有已安装的第三方包及版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip list&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;查看包详情&lt;/td&gt;
&lt;td&gt;显示指定包的详细信息（如版本、依赖、安装路径等）&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip show package_name&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;检查可更新的包&lt;/td&gt;
&lt;td&gt;列出当前环境中可更新的包及最新版本&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip list --outdated&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;最佳实践建议&#34;&gt;最佳实践建议&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;项目结构&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在项目根目录下创建名为&lt;code&gt;.venv&lt;/code&gt;的虚拟环境&lt;/li&gt;
&lt;li&gt;这样可以保持项目结构的清晰，并方便激活虚拟环境&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;requirements.txt&lt;/code&gt;文件记录项目依赖&lt;/li&gt;
&lt;li&gt;在提交代码时，包含&lt;code&gt;requirements.txt&lt;/code&gt;文件，而不是整个虚拟环境目录&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;pip freeze &amp;gt; requirements.txt&lt;/code&gt;生成依赖列表&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;环境激活&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在开发过程中，始终激活虚拟环境后再执行 Python 命令或安装包&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;strong&gt;版本控制&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将虚拟环境目录添加到&lt;code&gt;.gitignore&lt;/code&gt;文件中&lt;/li&gt;
&lt;li&gt;提交&lt;code&gt;requirements.txt&lt;/code&gt;文件，确保其他开发者可以复现相同的环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虚拟环境是 Python 开发中不可或缺的工具，它帮助开发者保持环境的整洁和项目的可维护性。随着你的项目规模和复杂性的增加，熟练掌握虚拟环境的使用将成为一项重要的技能。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在 macOS 上安装和使用 pyenv</title>
        <link>https://mahaoliang.tech/p/%E5%9C%A8-macos-%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-pyenv/</link>
        <pubDate>Sat, 14 Jun 2025 13:18:30 +0800</pubDate>
        
        <guid>https://mahaoliang.tech/p/%E5%9C%A8-macos-%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-pyenv/</guid>
        <description>&lt;p&gt;作为 Python 初学者，使用 &lt;a class=&#34;link&#34; href=&#34;https://github.com/pyenv/pyenv&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pyenv&lt;/a&gt; 来管理多版本 Python 环境是一个明智的选择。pyenv 允许你轻松安装、切换和管理多个 Python 版本，同时保护系统自带的 Python 不被修改。本指南将详细介绍在 macOS 上安装和使用 pyenv 的全过程，包括安装步骤、管理不同 Python 版本、保护系统 Python 等操作方法。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;h3 id=&#34;检查-homebrew-安装&#34;&gt;检查 Homebrew 安装&lt;/h3&gt;
&lt;p&gt;在开始安装 pyenv 之前，首先需要确保你已经安装了 Homebrew。Homebrew 是 macOS 上的包管理器，方便我们安装各种工具和依赖。可以在终端中运行以下命令检查：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ brew --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Homebrew 4.5.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;安装-xcode-命令行工具&#34;&gt;安装 Xcode 命令行工具&lt;/h3&gt;
&lt;p&gt;macOS 上编译安装 Python 需要一些开发工具，这些工具可以通过 Xcode 命令行工具提供。运行以下命令安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ xcode-select --install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会弹出一个安装窗口，按照提示完成安装即可。&lt;/p&gt;
&lt;h2 id=&#34;安装-pyenv&#34;&gt;安装 pyenv&lt;/h2&gt;
&lt;h3 id=&#34;使用-homebrew-安装-pyenv&#34;&gt;使用 Homebrew 安装 pyenv&lt;/h3&gt;
&lt;p&gt;在 macOS 上安装 pyenv 最简单的方法就是使用 Homebrew。在终端中运行以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ brew install pyenv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这一步会下载并安装 pyenv 及其依赖。安装完成后，你可以通过以下命令验证安装是否成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pyenv 2.6.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;如果看到版本号，说明安装成功。&lt;/p&gt;
&lt;h3 id=&#34;配置环境变量&#34;&gt;配置环境变量&lt;/h3&gt;
&lt;p&gt;安装完成后，需要将 pyenv 添加到你的 Shell 配置文件中，以便在任何终端会话中都能使用。根据你使用的 Shell 类型（zsh 或 bash），打开相应的配置文件。以 zsh 为例，打开 &lt;code&gt;${HOME}/.zshrc&lt;/code&gt; 文件，在文件末尾添加以下内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PYENV_ROOT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.pyenv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; -d &lt;span class=&#34;nv&#34;&gt;$PYENV_ROOT&lt;/span&gt;/bin &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PYENV_ROOT&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/bin:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$PATH&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;pyenv init - zsh&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这些配置将：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置 pyenv 的根目录&lt;/li&gt;
&lt;li&gt;将 pyenv 的二进制目录添加到系统 PATH 中&lt;/li&gt;
&lt;li&gt;初始化 pyenv 环境&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;保存文件后，在终端中运行以下命令使配置生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HOME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;管理-python-版本&#34;&gt;管理 Python 版本&lt;/h2&gt;
&lt;h3 id=&#34;查看可用-python-版本&#34;&gt;查看可用 Python 版本&lt;/h3&gt;
&lt;p&gt;安装 pyenv 后，你可以查看所有可用的 Python 版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv install --list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Available versions:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.1.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.2.3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.3.7
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.4.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.4.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会列出所有可通过 pyenv 安装的 Python 版本，包括最新版本和旧版本。&lt;/p&gt;
&lt;h3 id=&#34;安装特定版本的-python&#34;&gt;安装特定版本的 Python&lt;/h3&gt;
&lt;p&gt;要安装特定版本的 Python，使用以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv install &amp;lt;version&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，要安装 Python 3.13.5，可以运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv install 3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装过程可能需要一些时间，因为 pyenv 会从源代码编译 Python。你会看到类似以下的提示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python-build: use openssl@3 from homebrew
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python-build: use readline from homebrew
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Downloading Python-3.13.5.tar.xz...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-&amp;gt; https://www.python.org/ftp/python/3.13.5/Python-3.13.5.tar.xz
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Installing Python-3.13.5...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python-build: use readline from homebrew
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python-build: use zlib from xcode sdk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Installed Python-3.13.5 to /Users/haoliangma/.pyenv/versions/3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;查看已安装的-python-版本&#34;&gt;查看已安装的 Python 版本&lt;/h3&gt;
&lt;p&gt;安装完成后，可以使用 &lt;code&gt;pyenv versions&lt;/code&gt; 查看已安装的 Python 版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 3.11.8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /Users/haoliangma/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;第一行 &lt;code&gt;system&lt;/code&gt; 表示系统自带的 Python 版本，通常由操作系统预装。当前未被激活（没有 * 标记）&lt;/p&gt;
&lt;p&gt;第二行 &lt;code&gt;2.7.18&lt;/code&gt; 表示通过 pyenv 安装的 Python 2.7.18 版本。当前未被激活（没有 * 标记）。&lt;/p&gt;
&lt;p&gt;第三行 &lt;code&gt;* 3.11.8 (set by /Users/haoliangma/.pyenv/version)&lt;/code&gt; 表示当前激活的 Python 版本，该版本是通过全局配置文件 &lt;code&gt;/Users/haoliangma/.pyenv/version&lt;/code&gt; 设置的默认版本。&lt;/p&gt;
&lt;p&gt;第四行 &lt;code&gt;3.13.5&lt;/code&gt; 表示通过 pyenv 安装的 Python 3.13.5 版本，同样没有被激活。&lt;/p&gt;
&lt;h3 id=&#34;设置全局-python-版本&#34;&gt;设置全局 Python 版本&lt;/h3&gt;
&lt;p&gt;要设置系统默认的 Python 版本，可以使用以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv global &amp;lt;version&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如，要将 Python 3.13.5 设置为全局默认版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv global 3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;再次使用 &lt;code&gt;pyenv versions&lt;/code&gt; 查看已安装的版本：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.11.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 3.13.5 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /Users/haoliangma/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;发现 3.13.5 版本已经被激活。&lt;/p&gt;
&lt;p&gt;可以通过以下命令验证：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ python --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Python 3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;设置局部-python-版本&#34;&gt;设置局部 Python 版本&lt;/h3&gt;
&lt;p&gt;在项目目录中，你可以设置特定于该项目的 Python 版本。进入项目目录，运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &amp;lt;version&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会在当前目录下创建一个名为&lt;code&gt;.python-version&lt;/code&gt;的文件，记录当前项目使用的 Python 版本。当你进入该目录时，pyenv 会自动切换到指定的 Python 版本。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; pythonprojects
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; 3.11.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 3.11.8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /Users/haoliangma/works/pythonprojects/.python-version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.11.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 3.13.5 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /Users/haoliangma/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;临时使用特定版本&#34;&gt;临时使用特定版本&lt;/h3&gt;
&lt;p&gt;如果你只需要在当前终端会话中临时使用某个 Python 版本，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv shell &amp;lt;version&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.11.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 3.13.5 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by /Users/haoliangma/.pyenv/version&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv shell 3.11.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv versions
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  system
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  2.7.18
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* 3.11.8 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; by PYENV_VERSION environment variable&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  3.13.5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会覆盖全局和局部设置，仅在当前终端会话中生效。要恢复到之前的设置，可以使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv shell --unset
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;卸载-python-版本&#34;&gt;卸载 Python 版本&lt;/h3&gt;
&lt;p&gt;当你不再需要某个 Python 版本时，可以使用以下命令卸载：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyenv uninstall &amp;lt;version&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;保护系统-python&#34;&gt;保护系统 Python&lt;/h2&gt;
&lt;p&gt;macOS 系统自带了一个 Python 解释器，通常位于&lt;code&gt;/usr/bin/python3&lt;/code&gt;。这个 Python 版本是系统正常运行所必需的，修改或删除它可能导致系统不稳定或某些功能无法正常工作。因此，保护系统 Python 非常重要。&lt;/p&gt;
&lt;p&gt;pyenv 不会自动管理或修改系统 Python。当你安装新的 Python 版本时，它们会被安装在&lt;code&gt;~/.pyenv/versions&lt;/code&gt;目录下，而不是系统路径中。这意味着系统 Python 始终保持不变，不会受到 pyenv 安装的版本的影响。&lt;/p&gt;
&lt;p&gt;你可以通过以下命令验证系统 Python 是否未被修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ which python
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/Users/haoliangma/.pyenv/shims/python
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以看出，你当前使用的是 pyenv 管理的 Python 版本。&lt;/p&gt;
&lt;p&gt;为了确保系统 Python 不被覆盖，你应该避免使用&lt;code&gt;sudo&lt;/code&gt;安装或升级 Python。此外，在设置全局 Python 版本时，应确保不将系统 Python 设置为全局版本。&lt;/p&gt;
&lt;p&gt;如果你不小心覆盖了系统 Python 的某些行为，你可以通过重新安装 Xcode 命令行工具来恢复。运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ xcode-select --install
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这会重新安装系统工具，包括系统 Python。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过本指南，你应该已经掌握了在 macOS 上使用 pyenv 管理 Python 版本的基本技能。以下是关键点回顾：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装 pyenv&lt;/strong&gt;：使用 Homebrew 安装 pyenv 和相关插件，确保正确配置环境变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;管理 Python 版本&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;pyenv install &amp;ndash;list&lt;/td&gt;
&lt;td&gt;查看可安装版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyenv install &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;安装指定版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyenv versions&lt;/td&gt;
&lt;td&gt;查看已安装版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyenv global  &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;设置全局默认版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyenv local &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;为当前目录设置版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyenv shell  &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;为当前 Shell 设置版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pyenv uninstall &lt;!-- raw HTML omitted --&gt;&lt;/td&gt;
&lt;td&gt;卸载版本&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;保护系统 Python&lt;/strong&gt;：pyenv 不会自动管理系统 Python，确保系统 Python 不被覆盖是使用 pyenv 的重要原则。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过使用 pyenv，你可以在保持系统 Python 完整的同时，灵活地管理多个 Python 版本，使你的 Python 开发更加高效和安全。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
