[{"content":"As developers, we often need to connect to remote Linux servers via SSH for development. Tools like VS Code\u0026rsquo;s Remote-SSH plugin make it feel almost as if we\u0026rsquo;re working on a local machine. However, a common pain point arises: SSH key management.\nWe want to:\nUse an SSH key to log in to the server and push code to a Git repository (like GitHub). Sign every Git commit to verify its origin. Most importantly: avoid copying any files containing private keys to the remote server to prevent key compromise if the server is breached. Fortunately, we can perfectly solve this problem using the 1Password built-in SSH Agent and SSH Agent Forwarding. This article will guide you step-by-step through the configuration to achieve a secure and seamless remote development workflow.\nIntroduction to Core Concepts Before we begin, let\u0026rsquo;s briefly understand a few key concepts:\nSSH Agent: Think of it as a temporary key manager. At the beginning of a session, you can load your decrypted private key into the agent. Subsequently, any SSH operation requiring that key will request it from the agent, saving you from repeatedly entering your password. When you close your terminal session, the agent also terminates, and the key is securely cleared.\n1Password SSH Agent: 1Password 8 and later include a powerful built-in SSH Agent. It securely stores your SSH private keys in your 1Password vault and interacts with your system through a secure socket file. This means your private keys never exist in plaintext on your disk, and all usage requests must be authorized through 1Password (e.g., via Touch ID or your master password).\nSSH Agent Forwarding: This is a very powerful SSH feature. When you SSH from your local computer to a remote server, it can establish a secure channel that \u0026ldquo;forwards\u0026rdquo; requests for key authentication from the remote server back to your local machine, to be handled by your local SSH Agent. This way, the remote server itself doesn\u0026rsquo;t need to store any private keys at all.\nOur Target Workflow On our local machine, 1Password manages our SSH private keys. We connect to the remote server via VS Code Remote-SSH or the terminal, with Agent Forwarding enabled. On the remote server, when we run git push, the authentication request is forwarded back to the local machine and handled by 1Password. On the remote server, when we run git commit, the signing request is also forwarded back to the local machine for authorization by 1Password. Configuration Process Prerequisites You have installed the 1Password 8 or newer desktop client. Your SSH key is already created and saved in the SSH Keys category in 1Password. Step 1: Configure Your Local Machine to Use 1Password for SSH First, we need to tell our local SSH client to hand over all key-related requests to 1Password.\nEnable the SSH Agent in 1Password\nOpen the 1Password desktop app. Go to Settings -\u0026gt; Developer. Check the Use SSH agent box. Configure Your Local SSH Config File (~/.ssh/config)\nAccording to 1Password\u0026rsquo;s official documentation, we have two ways to tell the SSH client where the agent is: the IdentityAgent directive and the SSH_AUTH_SOCK environment variable. Using IdentityAgent is recommended.\nEdit the ~/.ssh/config file on your local machine (create it if it doesn\u0026rsquo;t exist). Add the following content to the top of the file:\n1 2 3 # Tell all SSH connections (*) to use the 1Password Agent Host * IdentityAgent \u0026#34;~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\u0026#34; Verify the Configuration\nIn the terminal on your local machine, run the following command:\n1 ssh-add -l If the configuration is successful, it will list the public key fingerprints of all the SSH keys stored in your 1Password. This proves that your local SSH client has successfully connected with 1Password.\nStep 2: Configure the Connection to Enable Agent Forwarding Now, we need to enable the Agent Forwarding feature when connecting to a specific remote server. The best practice is still to modify the ~/.ssh/config file.\nContinue editing the ~/.ssh/config file on your local machine and add a dedicated configuration block for your server:\n1 2 3 4 5 # Give your remote server an alias for easy connection Host my-dev-server HostName \u0026lt;your_server_ip_or_domain\u0026gt; User your_username ForwardAgent yes # \u0026lt;-- The key! Enables Agent Forwarding Host my-dev-server: This is the shortcut alias you\u0026rsquo;ll use to connect. HostName: The server\u0026rsquo;s actual IP address or domain name. User: Your username on the server. ForwardAgent yes: This is the switch that turns on Agent Forwarding. Now, you can connect via ssh my-dev-server or connect directly to my-dev-server in VS Code Remote-SSH, and the forwarding feature will be enabled automatically.\nStep 3: Configure Git on the Remote Server This is the final and most crucial step. We need to tell Git on the remote server how to use our forwarded SSH agent for commit signing.\nConnect and Verify Forwarding\nFirst, connect to your remote server:\n1 ssh my-dev-server Once connected, run the verification command again in the terminal on the remote server:\n1 2 3 4 5 6 7 8 9 ssh-add -l ``` If Agent Forwarding is working correctly, the output here should be **exactly the same** as the output on your **local machine**! If you see the error \u0026#34;Could not open a connection to your authentication agent.\u0026#34;, check your SSH service configuration to ensure `AllowAgentForwarding yes` is enabled. Open the `/etc/ssh/sshd_config` file with an editor like vim and find the `AllowAgentForwarding` option, setting it to `yes`: ```bash AllowAgentForwarding yes Save the file and restart the SSH service to apply the changes:\n1 systemctl restart sshd Connect to your remote server again and run ssh-add -l to confirm that Agent Forwarding is working correctly.\nGet the Public Key for Signing\nGit needs to know which specific key to use for signing. We need to provide the full public key string as an identifier. On the remote server, run:\n1 ssh-add -L This command lists the full public keys for all keys in the agent. Copy the line for the key you want to use for signing. It will look something like this: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICxxxxxxxxxxxxxxxxxxxx your-key-comment\nConfigure the .gitconfig on the Remote Server\nNow, edit the ~/.gitconfig file on your remote server. Update your existing configuration as follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 [user] email = your.email@example.com name = Your Name # Set the value of signingkey to the full public key string you copied in the previous step signingkey = ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICxxxxxxxxxxxxxxxxxxxx your-key-comment [gpg] # Tell Git to use the ssh program for signing format = ssh [commit] # Make all commits signed by default gpgsign = true The most important change is signingkey. We are no longer using a file path but providing the public key itself. This allows Git to directly request the forwarded agent to use this specific key for signing.\nAll Set! Let\u0026rsquo;s Test It Out Everything is ready! On the remote server, navigate to any of your git projects and try creating a new commit:\n1 git commit --allow-empty -m \u0026#34;Test: Signed commit with 1Password Agent Forwarding\u0026#34; At this moment, something magical happens: an authorization request from 1Password will pop up on your local machine, notifying you that an application is requesting to use your SSH key. After you authorize it with Touch ID or your master password, the git commit command on the remote server completes instantly.\nFinally, check your commit log:\n1 git log --show-signature -1 You will see output similar to the following, where Good signature clearly tells you that this commit has been successfully signed by your key!\n1 2 3 4 5 6 commit \u0026lt;commit_hash\u0026gt; (HEAD -\u0026gt; main) Good \u0026#34;git\u0026#34; signature for your.email@example.com with ED25519 key SHA256:GKaU0ZCgehQ73X... Author: Your Name \u0026lt;your.email@example.com\u0026gt; Date: ... Test: Signed commit with 1Password Agent Forwarding Summary The diagram below illustrates the core workflow for signing remote Git commits using 1Password and SSH Agent Forwarding.\nDiagram Components\nLocal Machine (Local)\nDeveloper: The initiator of the action. 1Password SSH Agent: Securely stores the private key and handles all signing requests. SSH Client: The local SSH program, configured to use the 1Password Agent and enable forwarding. Remote Server (Remote)\nRemote Terminal: The developer\u0026rsquo;s workspace on the server. Git: The version control tool, configured to use SSH for signing. SSH Daemon: The SSH service on the server, responsible for establishing the secure connection and forwarding requests. Detailed Interaction Flow\nInitiate Commit: The developer executes the git commit command in the Remote Terminal. Request Signature: Based on its configuration, Git requests a signature using an SSH key from the SSH service. Forward Request: The remote server\u0026rsquo;s SSH Daemon forwards the signing request through the encrypted SSH tunnel back to the local machine\u0026rsquo;s SSH Client. This is the core of Agent Forwarding. Request 1Password: The local SSH Client passes the request to the 1Password SSH Agent. Request User Authorization: 1Password displays a prompt on the local machine, asking the Developer for authorization. User Authorizes: The Developer authenticates locally (e.g., with Touch ID or master password). Return Signature: Upon successful authorization, 1Password generates the signature and returns it to the local SSH Client. Return Signature to Remote: The signature is securely transmitted back through the SSH tunnel to the remote server\u0026rsquo;s SSH Daemon. Complete Commit: The remote Git process receives the valid signature, successfully creates the commit, and displays a success message in the Remote Terminal. By following the steps above, we have built a remote development workflow that is both secure and convenient. Your private key always remains safely in your local 1Password vault, while all Git operations on the remote server (authentication and signing) can use it seamlessly and securely. This not only enhances security but also greatly simplifies key management in multi-server environments, allowing you to focus more on coding itself.\n","date":"2025-08-05T21:05:21+08:00","permalink":"https://mahaoliang.tech/en/p/enhancing-your-remote-development-experience-with-1password-and-ssh-agent-forwarding/","title":"Enhancing Your Remote Development Experience with 1Password and SSH Agent Forwarding"},{"content":"The biggest advantage of 1Password is its cross-platform capability. It provides perfect support across Apple\u0026rsquo;s iOS and macOS, Google\u0026rsquo;s Android, Microsoft\u0026rsquo;s Windows, and Linux. This allows you to use Safari on macOS, Edge on Windows, and Chrome on Android, all with seamless password management support. This is something Apple\u0026rsquo;s native password manager cannot offer.\nTo learn how to use 1Password effectively, the official Get started with 1Password guide is the best learning material. A quick browse through it will cover the basics completely.\nThis document will only focus on some key points to consider when using 1Password on macOS and iOS.\nInstallation On both macOS and iOS, the 1Password extension needs to be enabled for Safari.\nThe Safari extension for macOS can be installed directly from the App Store.\nFor installing the extension on iOS, please refer to: Get to know 1Password for Safari on your iPhone or iPad\nOpen Safari to any website and tap in the address bar.\nIf you\u0026rsquo;re using an iPad, tap in the address bar.\nTap Manage Extensions and turn on 1Password, then tap Done.\nTurn off the built-in password manager Since Safari has its own password manager, having both active can cause conflicts with 1Password. Therefore, you need to disable the built-in password manager.\nFor specific steps, refer to the official guide: Turn off the built-in password manager in your browser.\nSettings for Safari on macOS To stop Safari from asking to save your passwords:\nClick the Safari menu and choose Preferences. Click the AutoFill icon. Turn off all the AutoFill web forms settings: “Using info from my contacts”, “User names and passwords”, “Credit cards”, and “Other forms”. Settings for Safari on iOS To stop Safari from asking to save your passwords:\nOpen Settings, then tap Passwords \u0026amp; Accounts. Tap AutoFill Passwords. Turn off iCloud Keychain. App Support on iOS The experience of using 1Password in iOS apps is consistent with Safari. As long as an app uses the standard iOS keyboard, a key icon will automatically appear in the username and password fields. Tapping the key will bring up 1Password for autofilling.\nHowever, many domestic banking apps in China do not use the built-in iOS keyboard, which prevents 1Password from being invoked. In such cases, you have to manually open 1Password to copy a password or create a new one.\nUniversal Autofill Universal Autofill is a major feature upgrade in 1Password 8. Universal Autofill provides true \u0026ldquo;global autofill.\u0026rdquo; You only need to remember one shortcut, Command + \\, to have 1Password automatically fill in your passwords anywhere, including browsers, applications, terminals, and system prompts.\nTwo-Factor Authentication For websites that support 1Password\u0026rsquo;s two-factor authentication, I have migrated them to 1Password.\nIf 1Password itself has two-factor authentication enabled, it requires a third-party authenticator, as it cannot store its own one-time password, as stated in the official documentation. I chose Microsoft\u0026rsquo;s Authenticator.\nMicrosoft Authenticator supports backup and recovery, which is very convenient when switching phones. Additionally, the experience of logging into a Microsoft account using the Authenticator is excellent; you don\u0026rsquo;t need to enter a password, just confirm on your phone. The experience is similar to scanning a QR code, but without the scanning :)\nManage SSH Keys 1Password can store your SSH keys and act as an SSH agent, seamlessly integrating with your SSH and Git workflows. It also automatically helps you copy and paste your public key when required on platforms like GitHub.\nGenerate or import SSH keys You can generate an SSH key yourself using the ssh-keygen command, or have one generated automatically when creating an SSH key item in 1Password. Enable the 1Password SSH Agent The 1Password SSH Agent uses the SSH keys you\u0026rsquo;ve saved in 1Password to seamlessly integrate with your Git and SSH workflows. It can authenticate your Git and SSH clients, which never get to read your private key.\nFirst, you need to enable the 1Password SSH Agent to run in the background and handle authentication for your SSH clients. Go to 1Password \u0026gt; Preferences \u0026gt; Developer, and check \u0026ldquo;Use the SSH agent\u0026rdquo; and \u0026ldquo;Show key names when authorizing connections\u0026rdquo;. To ensure the SSH Agent runs continuously in the background, go to 1Password \u0026gt; Preferences \u0026gt; General and check \u0026ldquo;Keep 1Password in the menu bar\u0026rdquo;.\nConfigure the SSH client To allow your SSH client to use the 1Password SSH agent, you need to add the IdentityAgent configuration to your ~/.ssh/config file:\n1 2 Host * IdentityAgent \u0026#34;~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock\u0026#34; You can also set the SSH_AUTH_SOCK environment variable in your shell:\n1 export SSH_AUTH_SOCK=~/Library/Group\\ Containers/2BUA8C4S2C.com.1password/t/agent.sock If you find the agent path too complex, you can create a symbolic link first:\n1 mkdir -p ~/.1password \u0026amp;\u0026amp; ln -s ~/Library/Group\\ Containers/2BUA8C4S2C.com.1password/t/agent.sock ~/.1password/agent.sock This allows you to reference the symbolic link when setting the environment variable:\n1 export SSH_AUTH_SOCK=${HOME}/.1password/agent.sock Now, your SSH client can use the 1Password SSH agent when logging into remote hosts.\nYou can use the following command to see the SSH keys managed by the 1Password SSH agent:\n1 ssh-add -L Publish the SSH public key You need a way to publish your SSH public key to the remote server so it can use the public key to verify your identity.\nOne method is to upload the public key to the service provider\u0026rsquo;s website and associate it with your account. For example, you can upload your public key on the GitHub SSH key settings page. The Tencent Cloud management console also allows you to upload your public key and associate it with your purchased servers. When you need to paste the public key on a webpage, 1Password will autofill it just like a password.\nAnother method is to use the ssh-copy-id command to copy the public key directly to the remote server.\nRegardless of the method you use, always remember that you are publishing the public key. Be careful not to leak your private key.\nManage Github Signing Key Github has started to support using SSH keys to sign commits, which means you can use the SSH keys managed by 1Password to sign your git commits.\nThe setup process can be found at Sign your Git commits with 1Password and mainly involves two steps:\nGenerate a Signing Key on GitHub. Go to https://github.com/settings/keys, select \u0026ldquo;New SSH Key\u0026rdquo;, choose the key type as \u0026ldquo;Signing Key\u0026rdquo;, and then paste the SSH public key managed by 1Password. Configure your local .gitconfig. In 1Password, select your SSH Key and choose the \u0026ldquo;Configure\u0026rdquo; option in the banner that appears: Follow the prompts to configure your .gitconfig file. These settings select your SSH key and use it for signing when you make a git commit.\n“Sign in with” anything 1Password will remember the third-party login services (like sign in with Google) that you use. According to the official announcement, this feature will be released soon.\n","date":"2022-09-29T22:06:18+08:00","permalink":"https://mahaoliang.tech/en/p/tips-for-using-1password-on-macos-and-ios/","title":"Tips for Using 1Password on macOS and iOS"},{"content":"When you get a new MacBook, you always have to go through some settings to make it comfortable to use. These configurations might be enlightening and helpful for you as well.\nTrackpad Settings Tap with one finger to click. This is the first thing to set up on a new MacBook. Be gentle with it, and clicking will be effortless. Swipe left or right with four fingers to switch between desktops. Swipe up with four fingers to enter Mission Control. Mission Control provides a bird\u0026rsquo;s-eye view, tiling all your app windows and desktop spaces, allowing you to switch between them easily. Click the \u0026ldquo;+\u0026rdquo; in the top-right corner to create a new desktop. Swipe down with four fingers for App Exposé to see all the windows of the app you\u0026rsquo;re currently using. Set up three-finger drag: Apple menu  \u0026gt; System Preferences \u0026gt; Accessibility \u0026gt; Pointer Control \u0026gt; Trackpad Options \u0026gt; Enable dragging, and then choose \u0026ldquo;three-finger drag\u0026rdquo; from the menu. Dictionary Configuration In the trackpad settings, check the box for \u0026ldquo;Look up \u0026amp; data detectors\u0026rdquo; to trigger it with a three-finger tap.\nIn the Dictionary app\u0026rsquo;s preferences, besides the default selected dictionaries, it is recommended to also check an English-English dictionary. Explaining English words in English, much like how we look up words in a Chinese dictionary, is a more authentic way to learn the language.\nIn any application, you can trigger the dictionary with a \u0026ldquo;three-finger tap.\u0026rdquo; Because it\u0026rsquo;s natively supported by the system, the experience is silky smooth.\nThe native dictionary is convenient and easy to use, but it lacks a vocabulary book feature. There is a method online to generate a vocabulary book using \u0026ldquo;Automator\u0026rdquo;, which you can try.\nSystem Preferences Scroll Bar Settings\nAlways show scroll bars Jump to the spot that\u0026rsquo;s clicked Hot Corners Settings\nBottom-right corner: Show Desktop Top-left corner: Start Screen Saver. In Security \u0026amp; Privacy, set it to \u0026ldquo;Require password immediately after sleep or screen saver begins.\u0026rdquo; This way, it acts as both a screen saver and a screen lock. Remove most apps from the Dock that can be launched with Spotlight.\nSet the Dock to hide automatically to expand the available desktop area.\nF1~F12 keys should keep their default settings as special function keys. If you need to use the standard F1~F12 functions, you\u0026rsquo;ll need to press them in combination with the fn key.\nTurn off automatic English completion. System Preferences \u0026gt; Keyboard \u0026gt; Text \u0026gt; Uncheck \u0026ldquo;Correct spelling automatically.\u0026rdquo;\nControl Center Settings To save space in the menu bar, you can have items that you don\u0026rsquo;t use often, like Bluetooth and AirDrop, show only in the Control Center and not in the menu bar.\nSpotlight can be called up with a keyboard shortcut, so it doesn\u0026rsquo;t need to be displayed in the menu bar.\nThe time can be set to a 24-hour format to shorten the space it occupies in the menu bar.\nHold down the Cmd key and you can drag the menu bar icons with your pointer to arrange them in your preferred order.\nFinder Settings \u0026ldquo;Favorites\u0026rdquo; in Finder can be customized in its preferences. You can drag frequently used folders into your Favorites. Of the four display modes in Finder, I personally prefer the column view. You can customize the Finder toolbar. Show the path bar. Network Settings Set up a DNS for your system. Choose a reliable DNS service:\nAliyun DNS 223.5.5.5 and 223.6.6.6. Tencent Cloud DNS 119.29.29.29 ","date":"2022-07-23T14:51:18+08:00","permalink":"https://mahaoliang.tech/en/p/recommended-system-settings-for-macos/","title":"Recommended System Settings for macOS"}]